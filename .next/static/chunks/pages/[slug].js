/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/[slug]"],{

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsU0FBUztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzPzM3NzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n"));

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n"));

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsV0FBVzs7QUFFcEI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxXQUFXOztBQUVwQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFdBQVc7O0FBRXBCO0FBQ0E7QUFDQSxTQUFTLFVBQVU7O0FBRW5CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanM/ZWJjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n"));

/***/ }),

/***/ "./node_modules/next-seo/lib/next-seo.module.js":
/*!******************************************************!*\
  !*** ./node_modules/next-seo/lib/next-seo.module.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArticleJsonLd\": function() { return /* binding */ ArticleJsonLd; },\n/* harmony export */   \"BrandJsonLd\": function() { return /* binding */ BrandJsonLd; },\n/* harmony export */   \"BreadcrumbJsonLd\": function() { return /* binding */ BreadCrumbJsonLd; },\n/* harmony export */   \"CarouselJsonLd\": function() { return /* binding */ CarouselJsonLd; },\n/* harmony export */   \"CollectionPageJsonLd\": function() { return /* binding */ CollectionPageJsonLd; },\n/* harmony export */   \"CorporateContactJsonLd\": function() { return /* binding */ CorporateContactJsonLd; },\n/* harmony export */   \"CourseJsonLd\": function() { return /* binding */ CourseJsonLd; },\n/* harmony export */   \"DatasetJsonLd\": function() { return /* binding */ DatasetJsonLd; },\n/* harmony export */   \"DefaultSeo\": function() { return /* binding */ DefaultSeo; },\n/* harmony export */   \"EventJsonLd\": function() { return /* binding */ EventJsonLd; },\n/* harmony export */   \"FAQPageJsonLd\": function() { return /* binding */ FAQPageJsonLd; },\n/* harmony export */   \"HowToJsonLd\": function() { return /* binding */ howToJsonLd; },\n/* harmony export */   \"ImageJsonLd\": function() { return /* binding */ ImageJsonLd; },\n/* harmony export */   \"JobPostingJsonLd\": function() { return /* binding */ JobPostingJsonLd; },\n/* harmony export */   \"LocalBusinessJsonLd\": function() { return /* binding */ LocalBusinessJsonLd; },\n/* harmony export */   \"LogoJsonLd\": function() { return /* binding */ LogoJsonLd; },\n/* harmony export */   \"NewsArticleJsonLd\": function() { return /* binding */ NewsArticleJsonLd; },\n/* harmony export */   \"NextSeo\": function() { return /* binding */ NextSeo; },\n/* harmony export */   \"OrganizationJsonLd\": function() { return /* binding */ OrganizationJsonLd; },\n/* harmony export */   \"ProductJsonLd\": function() { return /* binding */ ProductJsonLd; },\n/* harmony export */   \"ProfilePageJsonLd\": function() { return /* binding */ ProfilePageJsonLd; },\n/* harmony export */   \"QAPageJsonLd\": function() { return /* binding */ QAPageJsonLd; },\n/* harmony export */   \"RecipeJsonLd\": function() { return /* binding */ RecipeJsonLd; },\n/* harmony export */   \"SiteLinksSearchBoxJsonLd\": function() { return /* binding */ SiteLinksSearchBoxJsonLd; },\n/* harmony export */   \"SocialProfileJsonLd\": function() { return /* binding */ SocialProfileJsonLd; },\n/* harmony export */   \"SoftwareAppJsonLd\": function() { return /* binding */ SoftwareAppJsonLd; },\n/* harmony export */   \"VideoGameJsonLd\": function() { return /* binding */ VideoGameJsonLd; },\n/* harmony export */   \"VideoJsonLd\": function() { return /* binding */ VideoJsonLd; },\n/* harmony export */   \"WebPageJsonLd\": function() { return /* binding */ WebPageJsonLd; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nvar _excluded$x = [\"keyOverride\"];\nvar defaults = {\n  templateTitle: '',\n  noindex: false,\n  nofollow: false,\n  defaultOpenGraphImageWidth: 0,\n  defaultOpenGraphImageHeight: 0,\n  defaultOpenGraphVideoWidth: 0,\n  defaultOpenGraphVideoHeight: 0\n};\nvar buildOpenGraphMediaTags = function buildOpenGraphMediaTags(mediaType, media, _temp) {\n  if (media === void 0) {\n    media = [];\n  }\n  var _ref = _temp === void 0 ? {} : _temp,\n    defaultWidth = _ref.defaultWidth,\n    defaultHeight = _ref.defaultHeight;\n  return media.reduce(function (tags, medium, index) {\n    tags.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n      key: \"og:\" + mediaType + \":0\" + index,\n      property: \"og:\" + mediaType,\n      content: medium.url\n    }));\n    if (medium.alt) {\n      tags.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:\" + mediaType + \":alt0\" + index,\n        property: \"og:\" + mediaType + \":alt\",\n        content: medium.alt\n      }));\n    }\n    if (medium.secureUrl) {\n      tags.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:\" + mediaType + \":secure_url0\" + index,\n        property: \"og:\" + mediaType + \":secure_url\",\n        content: medium.secureUrl.toString()\n      }));\n    }\n    if (medium.type) {\n      tags.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:\" + mediaType + \":type0\" + index,\n        property: \"og:\" + mediaType + \":type\",\n        content: medium.type.toString()\n      }));\n    }\n    if (medium.width) {\n      tags.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:\" + mediaType + \":width0\" + index,\n        property: \"og:\" + mediaType + \":width\",\n        content: medium.width.toString()\n      }));\n    } else if (defaultWidth) {\n      tags.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:\" + mediaType + \":width0\" + index,\n        property: \"og:\" + mediaType + \":width\",\n        content: defaultWidth.toString()\n      }));\n    }\n    if (medium.height) {\n      tags.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:\" + mediaType + \":height\" + index,\n        property: \"og:\" + mediaType + \":height\",\n        content: medium.height.toString()\n      }));\n    } else if (defaultHeight) {\n      tags.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:\" + mediaType + \":height\" + index,\n        property: \"og:\" + mediaType + \":height\",\n        content: defaultHeight.toString()\n      }));\n    }\n    return tags;\n  }, []);\n};\nvar buildTags = function buildTags(config) {\n  var _config$openGraph, _config$openGraph3, _config$additionalLin;\n  var tagsToRender = [];\n  if (config.titleTemplate) {\n    defaults.templateTitle = config.titleTemplate;\n  }\n  var updatedTitle = '';\n  if (config.title) {\n    updatedTitle = config.title;\n    if (defaults.templateTitle) {\n      updatedTitle = defaults.templateTitle.replace(/%s/g, function () {\n        return updatedTitle;\n      });\n    }\n  } else if (config.defaultTitle) {\n    updatedTitle = config.defaultTitle;\n  }\n  if (updatedTitle) {\n    tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"title\", {\n      key: \"title\"\n    }, updatedTitle));\n  }\n  var noindex = config.noindex || defaults.noindex || config.dangerouslySetAllPagesToNoIndex;\n  var nofollow = config.nofollow || defaults.nofollow || config.dangerouslySetAllPagesToNoFollow;\n  var robotsParams = '';\n  if (config.robotsProps) {\n    var _config$robotsProps = config.robotsProps,\n      nosnippet = _config$robotsProps.nosnippet,\n      maxSnippet = _config$robotsProps.maxSnippet,\n      maxImagePreview = _config$robotsProps.maxImagePreview,\n      maxVideoPreview = _config$robotsProps.maxVideoPreview,\n      noarchive = _config$robotsProps.noarchive,\n      noimageindex = _config$robotsProps.noimageindex,\n      notranslate = _config$robotsProps.notranslate,\n      unavailableAfter = _config$robotsProps.unavailableAfter;\n    robotsParams = \"\" + (nosnippet ? ',nosnippet' : '') + (maxSnippet ? \",max-snippet:\" + maxSnippet : '') + (maxImagePreview ? \",max-image-preview:\" + maxImagePreview : '') + (noarchive ? ',noarchive' : '') + (unavailableAfter ? \",unavailable_after:\" + unavailableAfter : '') + (noimageindex ? ',noimageindex' : '') + (maxVideoPreview ? \",max-video-preview:\" + maxVideoPreview : '') + (notranslate ? ',notranslate' : '');\n  }\n  if (noindex || nofollow) {\n    if (config.dangerouslySetAllPagesToNoIndex) {\n      defaults.noindex = true;\n    }\n    if (config.dangerouslySetAllPagesToNoFollow) {\n      defaults.nofollow = true;\n    }\n    tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n      key: \"robots\",\n      name: \"robots\",\n      content: (noindex ? 'noindex' : 'index') + \",\" + (nofollow ? 'nofollow' : 'follow') + robotsParams\n    }));\n  } else {\n    tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n      key: \"robots\",\n      name: \"robots\",\n      content: \"index,follow\" + robotsParams\n    }));\n  }\n  if (config.description) {\n    tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n      key: \"description\",\n      name: \"description\",\n      content: config.description\n    }));\n  }\n  if (config.themeColor) {\n    tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n      key: \"theme-color\",\n      name: \"theme-color\",\n      content: config.themeColor\n    }));\n  }\n  if (config.mobileAlternate) {\n    tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"link\", {\n      rel: \"alternate\",\n      key: \"mobileAlternate\",\n      media: config.mobileAlternate.media,\n      href: config.mobileAlternate.href\n    }));\n  }\n  if (config.languageAlternates && config.languageAlternates.length > 0) {\n    config.languageAlternates.forEach(function (languageAlternate) {\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"link\", {\n        rel: \"alternate\",\n        key: \"languageAlternate-\" + languageAlternate.hrefLang,\n        hrefLang: languageAlternate.hrefLang,\n        href: languageAlternate.href\n      }));\n    });\n  }\n  if (config.twitter) {\n    if (config.twitter.cardType) {\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"twitter:card\",\n        name: \"twitter:card\",\n        content: config.twitter.cardType\n      }));\n    }\n    if (config.twitter.site) {\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"twitter:site\",\n        name: \"twitter:site\",\n        content: config.twitter.site\n      }));\n    }\n    if (config.twitter.handle) {\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"twitter:creator\",\n        name: \"twitter:creator\",\n        content: config.twitter.handle\n      }));\n    }\n  }\n  if (config.facebook) {\n    if (config.facebook.appId) {\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"fb:app_id\",\n        property: \"fb:app_id\",\n        content: config.facebook.appId\n      }));\n    }\n  }\n  if ((_config$openGraph = config.openGraph) != null && _config$openGraph.title || updatedTitle) {\n    var _config$openGraph2;\n    tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n      key: \"og:title\",\n      property: \"og:title\",\n      content: ((_config$openGraph2 = config.openGraph) == null ? void 0 : _config$openGraph2.title) || updatedTitle\n    }));\n  }\n  if ((_config$openGraph3 = config.openGraph) != null && _config$openGraph3.description || config.description) {\n    var _config$openGraph4;\n    tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n      key: \"og:description\",\n      property: \"og:description\",\n      content: ((_config$openGraph4 = config.openGraph) == null ? void 0 : _config$openGraph4.description) || config.description\n    }));\n  }\n  if (config.openGraph) {\n    if (config.openGraph.url || config.canonical) {\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:url\",\n        property: \"og:url\",\n        content: config.openGraph.url || config.canonical\n      }));\n    }\n    if (config.openGraph.type) {\n      var type = config.openGraph.type.toLowerCase();\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:type\",\n        property: \"og:type\",\n        content: type\n      }));\n      if (type === 'profile' && config.openGraph.profile) {\n        if (config.openGraph.profile.firstName) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"profile:first_name\",\n            property: \"profile:first_name\",\n            content: config.openGraph.profile.firstName\n          }));\n        }\n        if (config.openGraph.profile.lastName) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"profile:last_name\",\n            property: \"profile:last_name\",\n            content: config.openGraph.profile.lastName\n          }));\n        }\n        if (config.openGraph.profile.username) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"profile:username\",\n            property: \"profile:username\",\n            content: config.openGraph.profile.username\n          }));\n        }\n        if (config.openGraph.profile.gender) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"profile:gender\",\n            property: \"profile:gender\",\n            content: config.openGraph.profile.gender\n          }));\n        }\n      } else if (type === 'book' && config.openGraph.book) {\n        if (config.openGraph.book.authors && config.openGraph.book.authors.length) {\n          config.openGraph.book.authors.forEach(function (author, index) {\n            tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n              key: \"book:author:0\" + index,\n              property: \"book:author\",\n              content: author\n            }));\n          });\n        }\n        if (config.openGraph.book.isbn) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"book:isbn\",\n            property: \"book:isbn\",\n            content: config.openGraph.book.isbn\n          }));\n        }\n        if (config.openGraph.book.releaseDate) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"book:release_date\",\n            property: \"book:release_date\",\n            content: config.openGraph.book.releaseDate\n          }));\n        }\n        if (config.openGraph.book.tags && config.openGraph.book.tags.length) {\n          config.openGraph.book.tags.forEach(function (tag, index) {\n            tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n              key: \"book:tag:0\" + index,\n              property: \"book:tag\",\n              content: tag\n            }));\n          });\n        }\n      } else if (type === 'article' && config.openGraph.article) {\n        if (config.openGraph.article.publishedTime) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"article:published_time\",\n            property: \"article:published_time\",\n            content: config.openGraph.article.publishedTime\n          }));\n        }\n        if (config.openGraph.article.modifiedTime) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"article:modified_time\",\n            property: \"article:modified_time\",\n            content: config.openGraph.article.modifiedTime\n          }));\n        }\n        if (config.openGraph.article.expirationTime) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"article:expiration_time\",\n            property: \"article:expiration_time\",\n            content: config.openGraph.article.expirationTime\n          }));\n        }\n        if (config.openGraph.article.authors && config.openGraph.article.authors.length) {\n          config.openGraph.article.authors.forEach(function (author, index) {\n            tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n              key: \"article:author:0\" + index,\n              property: \"article:author\",\n              content: author\n            }));\n          });\n        }\n        if (config.openGraph.article.section) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"article:section\",\n            property: \"article:section\",\n            content: config.openGraph.article.section\n          }));\n        }\n        if (config.openGraph.article.tags && config.openGraph.article.tags.length) {\n          config.openGraph.article.tags.forEach(function (tag, index) {\n            tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n              key: \"article:tag:0\" + index,\n              property: \"article:tag\",\n              content: tag\n            }));\n          });\n        }\n      } else if ((type === 'video.movie' || type === 'video.episode' || type === 'video.tv_show' || type === 'video.other') && config.openGraph.video) {\n        if (config.openGraph.video.actors && config.openGraph.video.actors.length) {\n          config.openGraph.video.actors.forEach(function (actor, index) {\n            if (actor.profile) {\n              tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"video:actor:0\" + index,\n                property: \"video:actor\",\n                content: actor.profile\n              }));\n            }\n            if (actor.role) {\n              tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n                key: \"video:actor:role:0\" + index,\n                property: \"video:actor:role\",\n                content: actor.role\n              }));\n            }\n          });\n        }\n        if (config.openGraph.video.directors && config.openGraph.video.directors.length) {\n          config.openGraph.video.directors.forEach(function (director, index) {\n            tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n              key: \"video:director:0\" + index,\n              property: \"video:director\",\n              content: director\n            }));\n          });\n        }\n        if (config.openGraph.video.writers && config.openGraph.video.writers.length) {\n          config.openGraph.video.writers.forEach(function (writer, index) {\n            tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n              key: \"video:writer:0\" + index,\n              property: \"video:writer\",\n              content: writer\n            }));\n          });\n        }\n        if (config.openGraph.video.duration) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"video:duration\",\n            property: \"video:duration\",\n            content: config.openGraph.video.duration.toString()\n          }));\n        }\n        if (config.openGraph.video.releaseDate) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"video:release_date\",\n            property: \"video:release_date\",\n            content: config.openGraph.video.releaseDate\n          }));\n        }\n        if (config.openGraph.video.tags && config.openGraph.video.tags.length) {\n          config.openGraph.video.tags.forEach(function (tag, index) {\n            tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n              key: \"video:tag:0\" + index,\n              property: \"video:tag\",\n              content: tag\n            }));\n          });\n        }\n        if (config.openGraph.video.series) {\n          tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n            key: \"video:series\",\n            property: \"video:series\",\n            content: config.openGraph.video.series\n          }));\n        }\n      }\n    }\n    // images\n    if (config.defaultOpenGraphImageWidth) {\n      defaults.defaultOpenGraphImageWidth = config.defaultOpenGraphImageWidth;\n    }\n    if (config.defaultOpenGraphImageHeight) {\n      defaults.defaultOpenGraphImageHeight = config.defaultOpenGraphImageHeight;\n    }\n    if (config.openGraph.images && config.openGraph.images.length) {\n      tagsToRender.push.apply(tagsToRender, buildOpenGraphMediaTags('image', config.openGraph.images, {\n        defaultWidth: defaults.defaultOpenGraphImageWidth,\n        defaultHeight: defaults.defaultOpenGraphImageHeight\n      }));\n    }\n    // videos\n    if (config.defaultOpenGraphVideoWidth) {\n      defaults.defaultOpenGraphVideoWidth = config.defaultOpenGraphVideoWidth;\n    }\n    if (config.defaultOpenGraphVideoHeight) {\n      defaults.defaultOpenGraphVideoHeight = config.defaultOpenGraphVideoHeight;\n    }\n    if (config.openGraph.videos && config.openGraph.videos.length) {\n      tagsToRender.push.apply(tagsToRender, buildOpenGraphMediaTags('video', config.openGraph.videos, {\n        defaultWidth: defaults.defaultOpenGraphVideoWidth,\n        defaultHeight: defaults.defaultOpenGraphVideoHeight\n      }));\n    }\n    // audio\n    if (config.openGraph.audio) {\n      tagsToRender.push.apply(tagsToRender, buildOpenGraphMediaTags('audio', config.openGraph.audio));\n    }\n    if (config.openGraph.locale) {\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:locale\",\n        property: \"og:locale\",\n        content: config.openGraph.locale\n      }));\n    }\n    if (config.openGraph.siteName || config.openGraph.site_name) {\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", {\n        key: \"og:site_name\",\n        property: \"og:site_name\",\n        content: config.openGraph.siteName || config.openGraph.site_name\n      }));\n    }\n  }\n  if (config.canonical) {\n    tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"link\", {\n      rel: \"canonical\",\n      href: config.canonical,\n      key: \"canonical\"\n    }));\n  }\n  if (config.additionalMetaTags && config.additionalMetaTags.length > 0) {\n    config.additionalMetaTags.forEach(function (_ref2) {\n      var _ref3, _ref4;\n      var keyOverride = _ref2.keyOverride,\n        tag = _objectWithoutPropertiesLoose(_ref2, _excluded$x);\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"meta\", _extends({\n        key: \"meta:\" + ((_ref3 = (_ref4 = keyOverride != null ? keyOverride : tag.name) != null ? _ref4 : tag.property) != null ? _ref3 : tag.httpEquiv)\n      }, tag)));\n    });\n  }\n  if ((_config$additionalLin = config.additionalLinkTags) != null && _config$additionalLin.length) {\n    config.additionalLinkTags.forEach(function (tag) {\n      var _tag$keyOverride;\n      tagsToRender.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"link\", _extends({\n        key: \"link\" + ((_tag$keyOverride = tag.keyOverride) != null ? _tag$keyOverride : tag.href) + tag.rel\n      }, tag)));\n    });\n  }\n  return tagsToRender;\n};\n\nvar WithHead = function WithHead(props) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((next_head__WEBPACK_IMPORTED_MODULE_1___default()), null, buildTags(props));\n};\n\nvar DefaultSeo = function DefaultSeo(_ref) {\n  var title = _ref.title,\n    titleTemplate = _ref.titleTemplate,\n    defaultTitle = _ref.defaultTitle,\n    themeColor = _ref.themeColor,\n    _ref$dangerouslySetAl = _ref.dangerouslySetAllPagesToNoIndex,\n    dangerouslySetAllPagesToNoIndex = _ref$dangerouslySetAl === void 0 ? false : _ref$dangerouslySetAl,\n    _ref$dangerouslySetAl2 = _ref.dangerouslySetAllPagesToNoFollow,\n    dangerouslySetAllPagesToNoFollow = _ref$dangerouslySetAl2 === void 0 ? false : _ref$dangerouslySetAl2,\n    description = _ref.description,\n    canonical = _ref.canonical,\n    facebook = _ref.facebook,\n    openGraph = _ref.openGraph,\n    additionalMetaTags = _ref.additionalMetaTags,\n    twitter = _ref.twitter,\n    defaultOpenGraphImageWidth = _ref.defaultOpenGraphImageWidth,\n    defaultOpenGraphImageHeight = _ref.defaultOpenGraphImageHeight,\n    defaultOpenGraphVideoWidth = _ref.defaultOpenGraphVideoWidth,\n    defaultOpenGraphVideoHeight = _ref.defaultOpenGraphVideoHeight,\n    mobileAlternate = _ref.mobileAlternate,\n    languageAlternates = _ref.languageAlternates,\n    additionalLinkTags = _ref.additionalLinkTags,\n    robotsProps = _ref.robotsProps;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WithHead, {\n    title: title,\n    titleTemplate: titleTemplate,\n    defaultTitle: defaultTitle,\n    themeColor: themeColor,\n    dangerouslySetAllPagesToNoIndex: dangerouslySetAllPagesToNoIndex,\n    dangerouslySetAllPagesToNoFollow: dangerouslySetAllPagesToNoFollow,\n    description: description,\n    canonical: canonical,\n    facebook: facebook,\n    openGraph: openGraph,\n    additionalMetaTags: additionalMetaTags,\n    twitter: twitter,\n    defaultOpenGraphImageWidth: defaultOpenGraphImageWidth,\n    defaultOpenGraphImageHeight: defaultOpenGraphImageHeight,\n    defaultOpenGraphVideoWidth: defaultOpenGraphVideoWidth,\n    defaultOpenGraphVideoHeight: defaultOpenGraphVideoHeight,\n    mobileAlternate: mobileAlternate,\n    languageAlternates: languageAlternates,\n    additionalLinkTags: additionalLinkTags,\n    robotsProps: robotsProps\n  });\n};\n\nvar NextSeo = function NextSeo(_ref) {\n  var title = _ref.title,\n    themeColor = _ref.themeColor,\n    _ref$noindex = _ref.noindex,\n    noindex = _ref$noindex === void 0 ? false : _ref$noindex,\n    nofollow = _ref.nofollow,\n    robotsProps = _ref.robotsProps,\n    description = _ref.description,\n    canonical = _ref.canonical,\n    openGraph = _ref.openGraph,\n    facebook = _ref.facebook,\n    twitter = _ref.twitter,\n    additionalMetaTags = _ref.additionalMetaTags,\n    titleTemplate = _ref.titleTemplate,\n    defaultTitle = _ref.defaultTitle,\n    mobileAlternate = _ref.mobileAlternate,\n    languageAlternates = _ref.languageAlternates,\n    additionalLinkTags = _ref.additionalLinkTags,\n    _ref$useAppDir = _ref.useAppDir,\n    useAppDir = _ref$useAppDir === void 0 ? false : _ref$useAppDir;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, useAppDir ? buildTags({\n    title: title,\n    themeColor: themeColor,\n    noindex: noindex,\n    nofollow: nofollow,\n    robotsProps: robotsProps,\n    description: description,\n    canonical: canonical,\n    facebook: facebook,\n    openGraph: openGraph,\n    additionalMetaTags: additionalMetaTags,\n    twitter: twitter,\n    titleTemplate: titleTemplate,\n    defaultTitle: defaultTitle,\n    mobileAlternate: mobileAlternate,\n    languageAlternates: languageAlternates,\n    additionalLinkTags: additionalLinkTags\n  }) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WithHead, {\n    title: title,\n    themeColor: themeColor,\n    noindex: noindex,\n    nofollow: nofollow,\n    robotsProps: robotsProps,\n    description: description,\n    canonical: canonical,\n    facebook: facebook,\n    openGraph: openGraph,\n    additionalMetaTags: additionalMetaTags,\n    twitter: twitter,\n    titleTemplate: titleTemplate,\n    defaultTitle: defaultTitle,\n    mobileAlternate: mobileAlternate,\n    languageAlternates: languageAlternates,\n    additionalLinkTags: additionalLinkTags\n  }));\n};\n\nvar toJson = function toJson(type, jsonld) {\n  var data = jsonld;\n  if (Array.isArray(data) && data.length === 1) {\n    data = _extends({}, jsonld[0]);\n  }\n  var jsonLdObject = Array.isArray(data) ? data.map(function (item) {\n    return formatObjectForSchema(type, item);\n  }) : formatObjectForSchema(type, data);\n  return {\n    __html: JSON.stringify(jsonLdObject, safeJsonLdReplacer)\n  };\n};\nvar formatObjectForSchema = function formatObjectForSchema(type, jsonld) {\n  var _jsonld$id = jsonld.id,\n    id = _jsonld$id === void 0 ? undefined : _jsonld$id;\n  var updated = _extends({}, id ? {\n    '@id': jsonld.id\n  } : {}, jsonld);\n  delete updated.id;\n  return _extends({\n    '@context': 'https://schema.org',\n    '@type': type\n  }, updated);\n};\nvar ESCAPE_ENTITIES = Object.freeze({\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&apos;'\n});\nvar ESCAPE_REGEX = new RegExp(\"[\" + Object.keys(ESCAPE_ENTITIES).join('') + \"]\", 'g');\nvar ESCAPE_REPLACER = function ESCAPE_REPLACER(t) {\n  return ESCAPE_ENTITIES[t];\n};\n/**\r\n * A replacer for JSON.stringify to strip JSON-LD of illegal HTML entities\r\n * per https://www.w3.org/TR/json-ld11/#restrictions-for-contents-of-json-ld-script-elements\r\n */\nvar safeJsonLdReplacer = function () {\n  // Replace per https://www.w3.org/TR/json-ld11/#restrictions-for-contents-of-json-ld-script-elements\n  // Solution from https://stackoverflow.com/a/5499821/864313\n  return function (_, value) {\n    switch (typeof value) {\n      case 'object':\n        // Omit null values.\n        if (value === null) {\n          return undefined;\n        }\n        return value;\n      // JSON.stringify will recursively call replacer.\n      case 'number':\n      case 'boolean':\n      case 'bigint':\n        return value;\n      // These values are not risky.\n      case 'string':\n        return value.replace(ESCAPE_REGEX, ESCAPE_REPLACER);\n      default:\n        {\n          // JSON.stringify will remove this element.\n          return undefined;\n        }\n    }\n  };\n}();\n\nvar _excluded$w = [\"type\", \"keyOverride\", \"scriptKey\", \"scriptId\", \"dataArray\", \"useAppDir\"];\nfunction JsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Thing' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    scriptKey = _ref.scriptKey,\n    _ref$scriptId = _ref.scriptId,\n    scriptId = _ref$scriptId === void 0 ? undefined : _ref$scriptId,\n    dataArray = _ref.dataArray,\n    _ref$useAppDir = _ref.useAppDir,\n    useAppDir = _ref$useAppDir === void 0 ? false : _ref$useAppDir,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$w);\n  var JsonLdScript = function JsonLdScript() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"script\", {\n      type: \"application/ld+json\",\n      id: scriptId,\n      \"data-testid\": scriptId,\n      dangerouslySetInnerHTML: toJson(type, dataArray === undefined ? _extends({}, rest) : dataArray),\n      key: \"jsonld-\" + scriptKey + (keyOverride ? \"-\" + keyOverride : '')\n    });\n  };\n  if (useAppDir) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLdScript, null);\n  }\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((next_head__WEBPACK_IMPORTED_MODULE_1___default()), null, JsonLdScript());\n}\n\n/**\r\n * Generate author information\r\n * @param author\r\n * @returns\r\n */\nfunction generateAuthorInfo(author) {\n  if (typeof author === 'string') {\n    return {\n      '@type': 'Person',\n      name: author\n    };\n  } else if (!!author.name) {\n    var _author$type;\n    return {\n      '@type': (_author$type = author == null ? void 0 : author.type) != null ? _author$type : 'Person',\n      name: author.name,\n      url: author == null ? void 0 : author.url\n    };\n  }\n  return;\n}\nfunction setAuthor(author) {\n  if (Array.isArray(author)) {\n    return author.map(function (item) {\n      return generateAuthorInfo(item);\n    }).filter(function (item) {\n      return !!item;\n    });\n  } else if (author) {\n    return generateAuthorInfo(author);\n  }\n  return;\n}\n\nfunction setImage(image) {\n  if (image) {\n    return {\n      '@type': 'ImageObject',\n      url: image\n    };\n  }\n  return undefined;\n}\n\nfunction setPublisher(publisherName, publisherLogo) {\n  if (!publisherName) {\n    return undefined;\n  }\n  return {\n    '@type': 'Organization',\n    name: publisherName,\n    logo: setImage(publisherLogo)\n  };\n}\n\nfunction setReviewRating(rating) {\n  if (rating) {\n    return _extends({}, rating, {\n      '@type': 'Rating'\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$v = [\"reviewRating\", \"author\", \"publisher\"];\nfunction setReviews(reviews) {\n  function mapReview(_ref) {\n    var reviewRating = _ref.reviewRating,\n      author = _ref.author,\n      publisher = _ref.publisher,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$v);\n    return _extends({}, rest, {\n      '@type': 'Review'\n    }, author && {\n      author: setAuthor(author)\n    }, reviewRating && {\n      reviewRating: setReviewRating(reviewRating)\n    }, publisher && {\n      publisher: setPublisher(publisher.name)\n    });\n  }\n  if (Array.isArray(reviews)) {\n    return reviews.map(mapReview);\n  } else if (reviews) {\n    return mapReview(reviews);\n  }\n  return undefined;\n}\n\nfunction setNutrition(calories) {\n  if (calories) {\n    return {\n      '@type': 'NutritionInformation',\n      calories: calories + \" calories\"\n    };\n  }\n  return undefined;\n}\n\nfunction setAggregateRating(aggregateRating) {\n  if (aggregateRating) {\n    return {\n      '@type': 'AggregateRating',\n      ratingCount: aggregateRating.ratingCount,\n      reviewCount: aggregateRating.reviewCount,\n      bestRating: aggregateRating.bestRating,\n      ratingValue: aggregateRating.ratingValue\n    };\n  }\n  return undefined;\n}\n\nfunction setClip(clips) {\n  function mapClip(clip) {\n    return _extends({}, clip, {\n      '@type': 'Clip'\n    });\n  }\n  if (Array.isArray(clips)) {\n    return clips.map(mapClip);\n  } else if (clips) {\n    return mapClip(clips);\n  }\n  return undefined;\n}\n\nfunction setInteractionStatistic(watchCount) {\n  if (watchCount) {\n    return {\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/WatchAction',\n      userInteractionCount: watchCount\n    };\n  }\n  return undefined;\n}\n\nfunction setBroadcastEvent(publication) {\n  function mapBroadcastEvent(publication) {\n    return _extends({}, publication, {\n      '@type': 'BroadcastEvent'\n    });\n  }\n  if (publication) {\n    if (Array.isArray(publication)) {\n      return publication.map(mapBroadcastEvent);\n    }\n    return mapBroadcastEvent(publication);\n  }\n  return undefined;\n}\n\nvar _excluded$u = [\"thumbnailUrls\", \"hasPart\", \"watchCount\", \"publication\"];\nfunction setVideo(video, setContext) {\n  if (setContext === void 0) {\n    setContext = false;\n  }\n  function mapVideo(_ref, context) {\n    var thumbnailUrls = _ref.thumbnailUrls,\n      hasPart = _ref.hasPart,\n      watchCount = _ref.watchCount,\n      publication = _ref.publication,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$u);\n    return _extends({}, rest, {\n      '@type': 'VideoObject'\n    }, context && {\n      '@context': 'https://schema.org'\n    }, {\n      thumbnailUrl: thumbnailUrls,\n      hasPart: setClip(hasPart),\n      interactionStatistic: setInteractionStatistic(watchCount),\n      publication: setBroadcastEvent(publication)\n    });\n  }\n  if (video) {\n    return mapVideo(video, setContext);\n  }\n  return undefined;\n}\n\nfunction setInstruction(instruction) {\n  if (instruction) {\n    return _extends({}, instruction, {\n      '@type': 'HowToStep'\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$t = [\"type\", \"keyOverride\", \"ofType\", \"data\"],\n  _excluded2$1 = [\"authorName\", \"images\", \"yields\", \"category\", \"calories\", \"aggregateRating\", \"video\", \"ingredients\", \"instructions\", \"cuisine\"];\nfunction CarouselJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Carousel' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    ofType = _ref.ofType,\n    data = _ref.data,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$t);\n  function generateList(data, ofType) {\n    switch (ofType) {\n      case 'default':\n        return data.map(function (item, index) {\n          return {\n            '@type': 'ListItem',\n            position: \"\" + (index + 1),\n            url: item.url\n          };\n        });\n      case 'course':\n        return data.map(function (item, index) {\n          return {\n            '@type': 'ListItem',\n            position: \"\" + (index + 1),\n            item: {\n              '@context': 'https://schema.org',\n              '@type': 'Course',\n              url: item.url,\n              name: item.courseName,\n              description: item.description,\n              provider: {\n                '@type': 'Organization',\n                name: item.providerName,\n                sameAs: item.providerUrl\n              }\n            }\n          };\n        });\n      case 'movie':\n        return data.map(function (item, index) {\n          return {\n            '@type': 'ListItem',\n            position: \"\" + (index + 1),\n            item: {\n              '@context': 'https://schema.org',\n              '@type': 'Movie',\n              name: item.name,\n              url: item.url,\n              image: item.image,\n              dateCreated: item.dateCreated,\n              director: item.director ? Array.isArray(item.director) ? item.director.map(function (director) {\n                return {\n                  '@type': 'Person',\n                  name: director.name\n                };\n              }) : {\n                '@type': 'Person',\n                name: item.director.name\n              } : undefined,\n              review: setReviews(item.review)\n            }\n          };\n        });\n      case 'recipe':\n        return data.map(function (_ref2, index) {\n          var authorName = _ref2.authorName,\n            images = _ref2.images,\n            yields = _ref2.yields,\n            category = _ref2.category,\n            calories = _ref2.calories,\n            aggregateRating = _ref2.aggregateRating,\n            video = _ref2.video,\n            ingredients = _ref2.ingredients,\n            instructions = _ref2.instructions,\n            cuisine = _ref2.cuisine,\n            rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);\n          return {\n            '@type': 'ListItem',\n            position: \"\" + (index + 1),\n            item: _extends({\n              '@context': 'https://schema.org',\n              '@type': 'Recipe'\n            }, rest, {\n              author: setAuthor(authorName),\n              image: images,\n              recipeYield: yields,\n              recipeCategory: category,\n              recipeCuisine: cuisine,\n              nutrition: setNutrition(calories),\n              aggregateRating: setAggregateRating(aggregateRating),\n              video: setVideo(video),\n              recipeIngredient: ingredients,\n              recipeInstructions: instructions.map(setInstruction)\n            })\n          };\n        });\n    }\n  }\n  var jsonLdData = _extends({\n    '@type': 'ItemList',\n    itemListElement: generateList(data, ofType)\n  }, rest);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, jsonLdData, {\n    scriptKey: \"Carousel\"\n  }));\n}\n\nvar _excluded$s = [\"type\", \"keyOverride\", \"url\", \"title\", \"images\", \"section\", \"dateCreated\", \"datePublished\", \"dateModified\", \"authorName\", \"authorType\", \"publisherName\", \"publisherLogo\", \"body\", \"isAccessibleForFree\"];\nfunction NewsArticleJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'NewsArticle' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    url = _ref.url,\n    title = _ref.title,\n    images = _ref.images,\n    section = _ref.section,\n    dateCreated = _ref.dateCreated,\n    datePublished = _ref.datePublished,\n    dateModified = _ref.dateModified,\n    authorName = _ref.authorName,\n    publisherName = _ref.publisherName,\n    publisherLogo = _ref.publisherLogo,\n    body = _ref.body,\n    isAccessibleForFree = _ref.isAccessibleForFree,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$s);\n  var data = _extends({}, rest, {\n    mainEntityOfPage: {\n      '@type': 'WebPage',\n      '@id': url\n    },\n    headline: title,\n    image: images,\n    articleSection: section,\n    dateCreated: dateCreated || datePublished,\n    datePublished: datePublished,\n    dateModified: dateModified || datePublished,\n    author: setAuthor(authorName),\n    publisher: setPublisher(publisherName, publisherLogo),\n    articleBody: body,\n    isAccessibleForFree: isAccessibleForFree\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"NewsArticle\"\n  }));\n}\n\nvar _excluded$r = [\"type\", \"keyOverride\", \"baseSalary\", \"hiringOrganization\", \"applicantLocationRequirements\", \"experienceRequirements\", \"jobLocation\"];\nfunction JobPostingJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'JobPosting' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    baseSalary = _ref.baseSalary,\n    hiringOrganization = _ref.hiringOrganization,\n    applicantLocationRequirements = _ref.applicantLocationRequirements,\n    experienceRequirements = _ref.experienceRequirements,\n    jobLocation = _ref.jobLocation,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$r);\n  function setBaseSalary(baseSalary) {\n    if (baseSalary) {\n      return {\n        '@type': 'MonetaryAmount',\n        currency: baseSalary.currency,\n        value: _extends({\n          '@type': 'QuantitativeValue',\n          unitText: baseSalary.unitText\n        }, Array.isArray(baseSalary.value) ? {\n          minValue: baseSalary.value[0],\n          maxValue: baseSalary.value[1]\n        } : {\n          value: baseSalary.value\n        })\n      };\n    }\n    return undefined;\n  }\n  function setHiringOrganization(org) {\n    return {\n      '@type': 'Organization',\n      name: org.name,\n      sameAs: org.sameAs,\n      logo: org.logo\n    };\n  }\n  function setJobLocation(location) {\n    if (location) {\n      return {\n        '@type': 'Place',\n        address: {\n          '@type': 'PostalAddress',\n          addressCountry: location.addressCountry,\n          addressLocality: location.addressLocality,\n          addressRegion: location.addressRegion,\n          postalCode: location.postalCode,\n          streetAddress: location.streetAddress\n        }\n      };\n    }\n    return undefined;\n  }\n  function setApplicantLocationRequirements(requirements) {\n    if (requirements) {\n      return {\n        '@type': 'Country',\n        name: requirements\n      };\n    }\n    return undefined;\n  }\n  function setOccupationalExperienceRequirements(requirements) {\n    if (requirements) {\n      return {\n        '@type': requirements['@type'] ? requirements['@type'] : 'OccupationalExperienceRequirements',\n        monthsOfExperience: requirements.minimumMonthsOfExperience\n      };\n    }\n    return undefined;\n  }\n  function setEducationalOccupationalCredential(requirements) {\n    if (requirements) {\n      return {\n        '@type': requirements['@type'] ? requirements['@type'] : 'EducationalOccupationalCredential',\n        credentialCategory: requirements.credentialCategory\n      };\n    }\n    return undefined;\n  }\n  var data = _extends({}, rest, {\n    baseSalary: setBaseSalary(baseSalary),\n    hiringOrganization: setHiringOrganization(hiringOrganization),\n    jobLocation: setJobLocation(jobLocation),\n    applicantLocationRequirements: setApplicantLocationRequirements(applicantLocationRequirements),\n    experienceRequirements: setOccupationalExperienceRequirements(experienceRequirements == null ? void 0 : experienceRequirements.occupational),\n    educationRequirements: setEducationalOccupationalCredential(experienceRequirements == null ? void 0 : experienceRequirements.educational),\n    experienceInPlaceOfEducation: experienceRequirements == null ? void 0 : experienceRequirements.experienceInPlaceOfEducation\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"JobPosting\"\n  }));\n}\n\nfunction setAddress(address) {\n  if (!address) return undefined;\n  if (!Array.isArray(address)) return toPostalAddress(address);\n  // If array of one address, replace with single address\n  if (address.length === 1) return toPostalAddress(address[0]);\n  // If array, return mapped array of PostalAddresses\n  return address.map(toPostalAddress);\n}\nfunction toPostalAddress(address) {\n  if (typeof address === 'string') return address;\n  return _extends({\n    '@type': 'PostalAddress'\n  }, address);\n}\n\nfunction setGeo(geo) {\n  if (geo) {\n    return _extends({}, geo, {\n      '@type': 'GeoCoordinates'\n    });\n  }\n  return undefined;\n}\n\nfunction setAction(action) {\n  if (action) {\n    return {\n      '@type': action.actionType,\n      name: action.actionName,\n      target: action.target\n    };\n  }\n  return undefined;\n}\n\nfunction setGeoCircle(geoCircle) {\n  if (geoCircle) {\n    return {\n      '@type': 'GeoCircle',\n      geoMidpoint: {\n        '@type': 'GeoCoordinates',\n        latitude: geoCircle.geoMidpoint.latitude,\n        longitude: geoCircle.geoMidpoint.longitude\n      },\n      geoRadius: geoCircle.geoRadius\n    };\n  }\n  return undefined;\n}\n\nfunction setOffer(offer) {\n  function setPriceSpecification(priceSpecification) {\n    if (priceSpecification) {\n      return {\n        '@type': priceSpecification.type,\n        priceCurrency: priceSpecification.priceCurrency,\n        price: priceSpecification.price\n      };\n    }\n    return undefined;\n  }\n  function setItemOffered(itemOffered) {\n    if (itemOffered) {\n      return _extends({}, itemOffered, {\n        '@type': 'Service'\n      });\n    }\n    return undefined;\n  }\n  if (offer) {\n    return _extends({}, offer, {\n      '@type': 'Offer',\n      priceSpecification: setPriceSpecification(offer.priceSpecification),\n      itemOffered: setItemOffered(offer.itemOffered)\n    });\n  }\n  return undefined;\n}\n\nfunction setOpeningHours(openingHours) {\n  if (openingHours) {\n    return _extends({}, openingHours, {\n      '@type': 'OpeningHoursSpecification'\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$q = [\"type\", \"keyOverride\", \"address\", \"geo\", \"rating\", \"review\", \"action\", \"areaServed\", \"makesOffer\", \"openingHours\", \"images\"];\nfunction LocalBusinessJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'LocalBusiness' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    address = _ref.address,\n    geo = _ref.geo,\n    rating = _ref.rating,\n    review = _ref.review,\n    action = _ref.action,\n    areaServed = _ref.areaServed,\n    makesOffer = _ref.makesOffer,\n    openingHours = _ref.openingHours,\n    images = _ref.images,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$q);\n  var data = _extends({}, rest, {\n    image: images,\n    address: setAddress(address),\n    geo: setGeo(geo),\n    aggregateRating: setAggregateRating(rating),\n    review: setReviews(review),\n    potentialAction: setAction(action),\n    areaServed: areaServed && areaServed.map(setGeoCircle),\n    makesOffer: makesOffer == null ? void 0 : makesOffer.map(setOffer),\n    openingHoursSpecification: Array.isArray(openingHours) ? openingHours.map(setOpeningHours) : setOpeningHours(openingHours)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"LocalBusiness\"\n  }));\n}\n\nvar _excluded$p = [\"type\", \"keyOverride\", \"mainEntity\"],\n  _excluded2 = [\"upvoteCount\"];\nfunction QAPageJsonLd(_ref) {\n  var _mainEntity$author, _mainEntity$acceptedA, _mainEntity$acceptedA2;\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'QAPage' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    mainEntity = _ref.mainEntity,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$p);\n  var data = _extends({}, rest, {\n    mainEntity: _extends({}, mainEntity, {\n      '@type': 'Question',\n      author: setAuthor((_mainEntity$author = mainEntity.author) == null ? void 0 : _mainEntity$author.name)\n    }, mainEntity.acceptedAnswer && {\n      acceptedAnswer: _extends({}, mainEntity.acceptedAnswer, {\n        '@type': 'Answer',\n        author: setAuthor((_mainEntity$acceptedA = mainEntity.acceptedAnswer) == null ? void 0 : (_mainEntity$acceptedA2 = _mainEntity$acceptedA.author) == null ? void 0 : _mainEntity$acceptedA2.name)\n      })\n    }, mainEntity.suggestedAnswer && {\n      suggestedAnswer: mainEntity.suggestedAnswer.map(function (_ref2) {\n        var _rest$author;\n        var upvoteCount = _ref2.upvoteCount,\n          rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n        return _extends({}, rest, {\n          '@type': 'Answer',\n          upvoteCount: upvoteCount || 0,\n          author: setAuthor((_rest$author = rest.author) == null ? void 0 : _rest$author.name)\n        });\n      })\n    })\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"QAPage\"\n  }));\n}\n\nfunction setItemListElements(items) {\n  if (items && items.length) {\n    return items.map(function (item) {\n      return {\n        '@type': 'ListItem',\n        position: item.position,\n        item: {\n          '@id': item.item,\n          name: item.name\n        }\n      };\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$o = [\"type\", \"keyOverride\", \"breadcrumb\"];\nfunction ProfilePageJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'ProfilePage' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    breadcrumb = _ref.breadcrumb,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$o);\n  var data = _extends({}, rest, {\n    breadcrumb: Array.isArray(breadcrumb) ? {\n      '@type': 'BreadcrumbList',\n      itemListElement: setItemListElements(breadcrumb)\n    } : breadcrumb\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"ProfilePage\"\n  }));\n}\n\nvar _excluded$n = [\"type\", \"keyOverride\", \"potentialActions\"];\nfunction SiteLinksSearchBoxJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'WebSite' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    potentialActions = _ref.potentialActions,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$n);\n  function setPotentialAction(action) {\n    if (action) {\n      var target = action.target,\n        queryInput = action.queryInput;\n      return {\n        '@type': 'SearchAction',\n        target: target + \"={\" + queryInput + \"}\",\n        'query-input': \"required name=\" + queryInput\n      };\n    }\n    return undefined;\n  }\n  var data = _extends({}, rest, {\n    potentialAction: potentialActions.map(setPotentialAction)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"jsonld-siteLinksSearchBox\"\n  }));\n}\n\nvar _excluded$m = [\"type\", \"keyOverride\", \"authorName\", \"images\", \"yields\", \"category\", \"cuisine\", \"calories\", \"aggregateRating\", \"video\", \"ingredients\", \"instructions\"];\nfunction RecipeJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Recipe' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    authorName = _ref.authorName,\n    images = _ref.images,\n    yields = _ref.yields,\n    category = _ref.category,\n    cuisine = _ref.cuisine,\n    calories = _ref.calories,\n    aggregateRating = _ref.aggregateRating,\n    video = _ref.video,\n    ingredients = _ref.ingredients,\n    instructions = _ref.instructions,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$m);\n  var data = _extends({}, rest, {\n    author: setAuthor(authorName),\n    image: images,\n    recipeYield: yields,\n    recipeCategory: category,\n    recipeCuisine: cuisine,\n    nutrition: setNutrition(calories),\n    aggregateRating: setAggregateRating(aggregateRating),\n    video: setVideo(video),\n    recipeIngredient: ingredients,\n    recipeInstructions: instructions ? instructions.map(setInstruction) : undefined\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"recipe\"\n  }));\n}\n\nfunction setLocation(location) {\n  if (!location) {\n    return undefined;\n  }\n  if (typeof location === 'string') {\n    return location;\n  }\n  if ('url' in location) {\n    return setVirtualLocation(location);\n  } else {\n    return setPlace(location);\n  }\n}\nfunction setVirtualLocation(location) {\n  return _extends({}, location, {\n    '@type': 'VirtualLocation'\n  });\n}\nfunction setPlace(location) {\n  return _extends({}, location, {\n    address: setAddress(location.address),\n    '@type': 'Place'\n  });\n}\n\nvar _excluded$l = [\"type\"];\nfunction setPerformer(performer) {\n  if (performer) {\n    var type = performer.type,\n      restPerformer = _objectWithoutPropertiesLoose(performer, _excluded$l);\n    return _extends({}, restPerformer, {\n      '@type': type || 'PerformingGroup'\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$k = [\"seller\"];\nfunction setOffers(offers) {\n  function mapOffer(_ref) {\n    var seller = _ref.seller,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$k);\n    return _extends({}, rest, {\n      '@type': 'Offer'\n    }, seller && {\n      seller: {\n        '@type': 'Organization',\n        name: seller.name\n      }\n    });\n  }\n  if (Array.isArray(offers)) {\n    return offers.map(mapOffer);\n  } else if (offers) {\n    return mapOffer(offers);\n  }\n  return undefined;\n}\n\nfunction setAggregateOffer(aggregateOffer) {\n  if (aggregateOffer) {\n    return {\n      '@type': 'AggregateOffer',\n      priceCurrency: aggregateOffer.priceCurrency,\n      highPrice: aggregateOffer.highPrice,\n      lowPrice: aggregateOffer.lowPrice,\n      offerCount: aggregateOffer.offerCount,\n      offers: setOffers(aggregateOffer.offers)\n    };\n  }\n  return undefined;\n}\n\nvar _excluded$j = [\"type\"];\nfunction setOrganizer(organizer) {\n  if (organizer) {\n    var type = organizer.type,\n      restOrganizer = _objectWithoutPropertiesLoose(organizer, _excluded$j);\n    return _extends({}, restOrganizer, {\n      '@type': type || 'Person'\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$i = [\"type\", \"keyOverride\", \"location\", \"images\", \"offers\", \"aggregateOffer\", \"performers\", \"organizer\", \"eventStatus\", \"eventAttendanceMode\"];\nfunction EventJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Event' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    location = _ref.location,\n    images = _ref.images,\n    offers = _ref.offers,\n    aggregateOffer = _ref.aggregateOffer,\n    performers = _ref.performers,\n    organizer = _ref.organizer,\n    eventStatus = _ref.eventStatus,\n    eventAttendanceMode = _ref.eventAttendanceMode,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$i);\n  var data = _extends({}, rest, {\n    location: setLocation(location),\n    image: images,\n    offers: offers ? setOffers(offers) : setAggregateOffer(aggregateOffer),\n    performer: Array.isArray(performers) ? performers.map(setPerformer) : setPerformer(performers),\n    organizer: Array.isArray(organizer) ? organizer.map(setOrganizer) : setOrganizer(organizer),\n    eventStatus: eventStatus ? \"https://schema.org/\" + eventStatus : undefined,\n    eventAttendanceMode: eventAttendanceMode ? \"https://schema.org/\" + eventAttendanceMode : undefined\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"Event\"\n  }));\n}\n\nfunction setContactPoint(contactPoint) {\n  if (contactPoint) {\n    return _extends({}, contactPoint, {\n      '@type': 'ContactPoint'\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$h = [\"type\", \"keyOverride\", \"contactPoint\"];\nfunction CorporateContactJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Organization' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    contactPoint = _ref.contactPoint,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$h);\n  var data = _extends({}, rest, {\n    contactPoint: contactPoint.map(setContactPoint)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"CorporateContact\"\n  }));\n}\n\nfunction setCreativeWork(creativeWork) {\n  if (creativeWork) {\n    return _extends({}, creativeWork, {\n      '@type': 'CreativeWork'\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$g = [\"type\", \"keyOverride\", \"hasPart\"];\nfunction CollectionPageJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'CollectionPage' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    hasPart = _ref.hasPart,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$g);\n  var data = _extends({}, rest, {\n    hasPart: hasPart.map(setCreativeWork)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"CollectionPage\"\n  }));\n}\n\nfunction setManufacturer(manufacturer) {\n  if (manufacturer && (manufacturer.manufacturerName || manufacturer.manufacturerLogo)) {\n    return {\n      '@type': 'Organization',\n      name: manufacturer.manufacturerName,\n      logo: setImage(manufacturer.manufacturerLogo)\n    };\n  }\n  return undefined;\n}\n\nfunction setBrand(brand) {\n  if (brand) {\n    return {\n      '@type': 'Brand',\n      name: brand\n    };\n  }\n  return undefined;\n}\n\nvar _excluded$f = [\"type\", \"keyOverride\", \"images\", \"brand\", \"reviews\", \"aggregateRating\", \"manufacturerLogo\", \"manufacturerName\", \"offers\", \"aggregateOffer\", \"productName\"];\nfunction ProductJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Product' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    images = _ref.images,\n    brand = _ref.brand,\n    reviews = _ref.reviews,\n    aggregateRating = _ref.aggregateRating,\n    manufacturerLogo = _ref.manufacturerLogo,\n    manufacturerName = _ref.manufacturerName,\n    offers = _ref.offers,\n    aggregateOffer = _ref.aggregateOffer,\n    productName = _ref.productName,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$f);\n  var data = _extends({}, rest, {\n    image: images,\n    brand: setBrand(brand),\n    review: setReviews(reviews),\n    aggregateRating: setAggregateRating(aggregateRating),\n    manufacturer: setManufacturer({\n      manufacturerLogo: manufacturerLogo,\n      manufacturerName: manufacturerName\n    }),\n    offers: offers ? setOffers(offers) : setAggregateOffer(aggregateOffer),\n    name: productName\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"Product\"\n  }));\n}\n\nvar _excluded$e = [\"type\", \"keyOverride\", \"priceCurrency\", \"price\", \"aggregateRating\", \"review\"];\nfunction SoftwareAppJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'SoftwareApplication' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    priceCurrency = _ref.priceCurrency,\n    price = _ref.price,\n    aggregateRating = _ref.aggregateRating,\n    review = _ref.review,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$e);\n  var data = _extends({}, rest, {\n    offers: {\n      '@type': 'Offer',\n      price: price,\n      priceCurrency: priceCurrency\n    },\n    aggregateRating: setAggregateRating(aggregateRating),\n    review: setReviews(review)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"SoftwareApp\"\n  }));\n}\n\nvar _excluded$d = [\"type\", \"keyOverride\"];\nfunction VideoJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Video' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$d);\n  var data = setVideo(rest, true);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"Video\"\n  }));\n}\n\nfunction setProducer(producer) {\n  if (producer) {\n    return {\n      '@type': 'Organization',\n      sameAs: producer.url,\n      name: producer.name\n    };\n  }\n  return undefined;\n}\n\nfunction setProvider(provider) {\n  if (provider) {\n    return {\n      '@type': provider.type || 'Organization',\n      name: provider.name,\n      sameAs: provider.url\n    };\n  }\n  return undefined;\n}\n\nvar _excluded$c = [\"type\", \"keyOverride\", \"aggregateRating\", \"trailer\", \"reviews\", \"image\", \"authorName\", \"provider\", \"producerName\", \"producerUrl\", \"offers\", \"operatingSystemName\", \"platformName\", \"translatorName\", \"languageName\", \"genreName\", \"publisherName\"];\nfunction VideoGameJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'VideoGame' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    aggregateRating = _ref.aggregateRating,\n    trailer = _ref.trailer,\n    reviews = _ref.reviews,\n    image = _ref.image,\n    authorName = _ref.authorName,\n    provider = _ref.provider,\n    producerName = _ref.producerName,\n    producerUrl = _ref.producerUrl,\n    offers = _ref.offers,\n    operatingSystemName = _ref.operatingSystemName,\n    platformName = _ref.platformName,\n    translatorName = _ref.translatorName,\n    languageName = _ref.languageName,\n    genreName = _ref.genreName,\n    publisherName = _ref.publisherName,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$c);\n  var data = _extends({}, rest, {\n    aggregateRating: setAggregateRating(aggregateRating),\n    trailer: setVideo(trailer),\n    review: setReviews(reviews),\n    image: setImage(image),\n    author: setAuthor(authorName),\n    provider: setProvider(provider),\n    producer: setProducer({\n      name: producerName,\n      url: producerUrl\n    }),\n    offers: setOffers(offers),\n    operatingSystem: operatingSystemName,\n    gamePlatform: platformName,\n    translator: translatorName,\n    inLanguage: languageName,\n    genre: genreName,\n    publisher: publisherName\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"VideoGame\"\n  }));\n}\n\nfunction setContactPoints(contactPoint) {\n  if (contactPoint && contactPoint.length) {\n    return contactPoint.map(function (contactPoint) {\n      return _extends({\n        '@type': 'ContactPoint'\n      }, contactPoint);\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$b = [\"type\", \"keyOverride\", \"address\", \"contactPoints\", \"contactPoint\"];\nfunction OrganizationJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Organization' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    address = _ref.address,\n    contactPoints = _ref.contactPoints,\n    contactPoint = _ref.contactPoint,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$b);\n  var data = _extends({}, rest, {\n    address: setAddress(address),\n    contactPoint: setContactPoints(contactPoint || contactPoints)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"organization\"\n  }));\n}\n\nfunction setQuestions(questions) {\n  if (questions && questions.length) {\n    return questions.map(function (question) {\n      return {\n        '@type': 'Question',\n        name: question.questionName,\n        acceptedAnswer: {\n          '@type': 'Answer',\n          text: question.acceptedAnswerText\n        }\n      };\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$a = [\"type\", \"keyOverride\", \"mainEntity\"];\nfunction FAQPageJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'FAQPage' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    mainEntity = _ref.mainEntity,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$a);\n  var data = _extends({}, rest, {\n    mainEntity: setQuestions(mainEntity)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"faq-page\"\n  }));\n}\n\nvar _excluded$9 = [\"type\", \"keyOverride\"];\nfunction LogoJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Organization' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$9);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, rest, {\n    scriptKey: \"Logo\"\n  }));\n}\n\nvar _excluded$8 = [\"type\", \"keyOverride\"];\nfunction DatasetJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Dataset' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$8);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, rest, {\n    scriptKey: \"dataset\"\n  }));\n}\n\nvar _excluded$7 = [\"type\", \"keyOverride\", \"courseName\", \"provider\"];\nfunction CourseJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Course' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    courseName = _ref.courseName,\n    provider = _ref.provider,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$7);\n  var data = _extends({\n    name: courseName\n  }, rest, {\n    provider: setProvider(provider)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"course\"\n  }));\n}\n\nvar _excluded$6 = [\"type\", \"keyOverride\", \"itemListElements\"];\nfunction BreadCrumbJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'BreadcrumbList' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    itemListElements = _ref.itemListElements,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$6);\n  var data = _extends({}, rest, {\n    itemListElement: setItemListElements(itemListElements)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"breadcrumb\"\n  }));\n}\n\nvar _excluded$5 = [\"type\", \"id\", \"keyOverride\", \"aggregateRating\"];\nfunction BrandJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Brand' : _ref$type,\n    id = _ref.id,\n    keyOverride = _ref.keyOverride,\n    aggregateRating = _ref.aggregateRating,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$5);\n  var data = _extends({\n    aggregateRating: setAggregateRating(aggregateRating),\n    '@id': id\n  }, rest);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"brand\"\n  }));\n}\n\nvar _excluded$4 = [\"type\", \"keyOverride\", \"url\", \"title\", \"images\", \"datePublished\", \"dateModified\", \"authorName\", \"publisherName\", \"publisherLogo\", \"description\", \"isAccessibleForFree\"];\nfunction ArticleJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Article' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    url = _ref.url,\n    title = _ref.title,\n    images = _ref.images,\n    datePublished = _ref.datePublished,\n    dateModified = _ref.dateModified,\n    authorName = _ref.authorName,\n    _ref$publisherName = _ref.publisherName,\n    publisherName = _ref$publisherName === void 0 ? undefined : _ref$publisherName,\n    _ref$publisherLogo = _ref.publisherLogo,\n    publisherLogo = _ref$publisherLogo === void 0 ? undefined : _ref$publisherLogo,\n    description = _ref.description,\n    isAccessibleForFree = _ref.isAccessibleForFree,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$4);\n  var data = _extends({\n    datePublished: datePublished,\n    description: description,\n    mainEntityOfPage: {\n      '@type': 'WebPage',\n      '@id': url\n    },\n    headline: title,\n    image: images,\n    dateModified: dateModified || datePublished,\n    author: setAuthor(authorName),\n    publisher: setPublisher(publisherName, publisherLogo),\n    isAccessibleForFree: isAccessibleForFree\n  }, rest);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"article\"\n  }));\n}\n\nfunction setReviewedBy(reviewedBy) {\n  if (reviewedBy) {\n    return _extends({\n      '@type': (reviewedBy == null ? void 0 : reviewedBy.type) || 'Organization'\n    }, reviewedBy);\n  }\n  return undefined;\n}\n\nvar _excluded$3 = [\"keyOverride\", \"reviewedBy\"];\nfunction WebPageJsonLd(_ref) {\n  var keyOverride = _ref.keyOverride,\n    reviewedBy = _ref.reviewedBy,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$3);\n  var data = _extends({}, rest, {\n    reviewedBy: setReviewedBy(reviewedBy)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    keyOverride: keyOverride\n  }, data, {\n    type: \"WebPage\",\n    scriptKey: \"WebPage\"\n  }));\n}\n\nvar _excluded$2 = [\"type\", \"keyOverride\"];\nfunction SocialProfileJsonLd(_ref) {\n  var type = _ref.type,\n    keyOverride = _ref.keyOverride,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, rest, {\n    scriptKey: \"social\"\n  }));\n}\n\nfunction setCost(cost) {\n  if (cost) {\n    return _extends({}, cost, {\n      '@type': 'MonetaryAmount'\n    });\n  }\n  return undefined;\n}\n\nfunction setSupply(supply) {\n  if (supply) {\n    return supply.map(function (supplyItem) {\n      return {\n        '@type': 'HowToSupply',\n        name: supplyItem\n      };\n    });\n  }\n  return undefined;\n}\n\nfunction setTool(tool) {\n  if (tool) {\n    return tool.map(function (toolItem) {\n      return {\n        '@type': 'HowToTool',\n        name: toolItem\n      };\n    });\n  }\n  return undefined;\n}\n\nfunction setStep(step) {\n  if (step) {\n    return step.map(function (stepElement) {\n      var itemListElement = stepElement.itemListElement,\n        image = stepElement.image;\n      var currentListElements = itemListElement == null ? void 0 : itemListElement.map(function (_ref) {\n        var type = _ref.type,\n          text = _ref.text;\n        return {\n          '@type': type,\n          text: text\n        };\n      });\n      return _extends({}, stepElement, {\n        '@type': 'HowToStep',\n        itemListElement: currentListElements,\n        image: setImage(image)\n      });\n    });\n  }\n  return undefined;\n}\n\nvar _excluded$1 = [\"type\", \"keyOverride\", \"image\", \"estimatedCost\", \"supply\", \"tool\", \"step\"];\nfunction howToJsonLd(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'HowTo' : _ref$type,\n    keyOverride = _ref.keyOverride,\n    image = _ref.image,\n    estimatedCost = _ref.estimatedCost,\n    supply = _ref.supply,\n    tool = _ref.tool,\n    step = _ref.step,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n  var data = _extends({}, rest, {\n    image: setImage(image),\n    estimatedCost: setCost(estimatedCost),\n    supply: setSupply(supply),\n    tool: setTool(tool),\n    step: setStep(step)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({\n    type: type,\n    keyOverride: keyOverride\n  }, data, {\n    scriptKey: \"howTo\"\n  }));\n}\n\nvar _excluded = [\"keyOverride\", \"images\"];\nfunction ImageJsonLd(_ref) {\n  var keyOverride = _ref.keyOverride,\n    images = _ref.images,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(JsonLd, _extends({}, rest, {\n    type: \"ImageObject\",\n    keyOverride: keyOverride,\n    dataArray: images,\n    scriptKey: \"image\"\n  }));\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next-seo/lib/next-seo.module.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=D%3A%5Cdev_test%5Csrc%5Cpages%5C%5Bslug%5D.tsx&page=%2F%5Bslug%5D!":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=D%3A%5Cdev_test%5Csrc%5Cpages%5C%5Bslug%5D.tsx&page=%2F%5Bslug%5D! ***!
  \**********************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/[slug]\",\n      function () {\n        return __webpack_require__(/*! ./src/pages/[slug].tsx */ \"./src/pages/[slug].tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/[slug]\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1EJTNBJTVDZGV2X3Rlc3QlNUNzcmMlNUNwYWdlcyU1QyU1QnNsdWclNUQudHN4JnBhZ2U9JTJGJTVCc2x1ZyU1RCEuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxzREFBd0I7QUFDL0M7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzljOTkiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9bc2x1Z11cIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuL3NyYy9wYWdlcy9bc2x1Z10udHN4XCIpO1xuICAgICAgfVxuICAgIF0pO1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5fX05FWFRfUC5wdXNoKFtcIi9bc2x1Z11cIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=D%3A%5Cdev_test%5Csrc%5Cpages%5C%5Bslug%5D.tsx&page=%2F%5Bslug%5D!\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/get-domain-locale.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/client/get-domain-locale.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getDomainLocale = getDomainLocale;\nconst basePath =  false || \"\";\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n    if (false) {} else {\n        return false;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=get-domain-locale.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9nZXQtZG9tYWluLWxvY2FsZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU8sSUFBSTtBQUNmLENBQUMsRUFBQztBQUNGRCx1QkFBdUIsR0FBR0U7QUFDMUIsTUFBTUMsV0FBV0MsTUFBa0MsSUFBSTtBQUN2RCxTQUFTRixnQkFBZ0JLLElBQUksRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLGFBQWEsRUFBRTtJQUMzRCxJQUFJTixLQUErQixFQUFFLEVBV3BDLE1BQU07UUFDSCxPQUFPLEtBQUs7SUFDaEIsQ0FBQztBQUNMO0FBRUEsSUFBSSxDQUFDLE9BQU9KLFFBQVF1QixPQUFPLEtBQUssY0FBZSxPQUFPdkIsUUFBUXVCLE9BQU8sS0FBSyxZQUFZdkIsUUFBUXVCLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT3ZCLFFBQVF1QixPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLMUIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRdUIsT0FBTyxFQUFFLGNBQWM7UUFBRXRCLE9BQU8sSUFBSTtJQUFDO0lBQ25FSCxPQUFPMkIsTUFBTSxDQUFDekIsUUFBUXVCLE9BQU8sRUFBRXZCO0lBQy9CMEIsT0FBTzFCLE9BQU8sR0FBR0EsUUFBUXVCLE9BQU87QUFDbEMsQ0FBQyxDQUVELDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9nZXQtZG9tYWluLWxvY2FsZS5qcz81YzI3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXREb21haW5Mb2NhbGUgPSBnZXREb21haW5Mb2NhbGU7XG5jb25zdCBiYXNlUGF0aCA9IHByb2Nlc3MuZW52Ll9fTkVYVF9ST1VURVJfQkFTRVBBVEggfHwgJyc7XG5mdW5jdGlvbiBnZXREb21haW5Mb2NhbGUocGF0aCwgbG9jYWxlLCBsb2NhbGVzLCBkb21haW5Mb2NhbGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplTG9jYWxlUGF0aCA9IHJlcXVpcmUoJy4vbm9ybWFsaXplLWxvY2FsZS1wYXRoJykubm9ybWFsaXplTG9jYWxlUGF0aDtcbiAgICAgICAgY29uc3QgZGV0ZWN0RG9tYWluTG9jYWxlID0gcmVxdWlyZSgnLi9kZXRlY3QtZG9tYWluLWxvY2FsZScpLmRldGVjdERvbWFpbkxvY2FsZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gbG9jYWxlIHx8IG5vcm1hbGl6ZUxvY2FsZVBhdGgocGF0aCwgbG9jYWxlcykuZGV0ZWN0ZWRMb2NhbGU7XG4gICAgICAgIGNvbnN0IGRvbWFpbiA9IGRldGVjdERvbWFpbkxvY2FsZShkb21haW5Mb2NhbGVzLCB1bmRlZmluZWQsIHRhcmdldCk7XG4gICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3RvID0gYGh0dHAke2RvbWFpbi5odHRwID8gJycgOiAncyd9Oi8vYDtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsTG9jYWxlID0gdGFyZ2V0ID09PSBkb21haW4uZGVmYXVsdExvY2FsZSA/ICcnIDogYC8ke3RhcmdldH1gO1xuICAgICAgICAgICAgcmV0dXJuIGAke3Byb3RvfSR7ZG9tYWluLmRvbWFpbn0ke2Jhc2VQYXRofSR7ZmluYWxMb2NhbGV9JHtwYXRofWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1kb21haW4tbG9jYWxlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldERvbWFpbkxvY2FsZSIsImJhc2VQYXRoIiwicHJvY2VzcyIsImVudiIsIl9fTkVYVF9ST1VURVJfQkFTRVBBVEgiLCJwYXRoIiwibG9jYWxlIiwibG9jYWxlcyIsImRvbWFpbkxvY2FsZXMiLCJfX05FWFRfSTE4Tl9TVVBQT1JUIiwibm9ybWFsaXplTG9jYWxlUGF0aCIsInJlcXVpcmUiLCJkZXRlY3REb21haW5Mb2NhbGUiLCJ0YXJnZXQiLCJkZXRlY3RlZExvY2FsZSIsImRvbWFpbiIsInVuZGVmaW5lZCIsInByb3RvIiwiaHR0cCIsImZpbmFsTG9jYWxlIiwiZGVmYXVsdExvY2FsZSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/get-domain-locale.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$();\n\"use client\";\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\nvar _object_without_properties_loose = (__webpack_require__(/*! @swc/helpers/lib/_object_without_properties_loose.js */ \"./node_modules/@swc/helpers/lib/_object_without_properties_loose.js\")[\"default\"]);\nvar _react = _interop_require_default(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nvar _router = __webpack_require__(/*! ../shared/lib/router/router */ \"./node_modules/next/dist/shared/lib/router/router.js\");\nvar _formatUrl = __webpack_require__(/*! ../shared/lib/router/utils/format-url */ \"./node_modules/next/dist/shared/lib/router/utils/format-url.js\");\nvar _addLocale = __webpack_require__(/*! ./add-locale */ \"./node_modules/next/dist/client/add-locale.js\");\nvar _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ \"./node_modules/next/dist/shared/lib/router-context.js\");\nvar _appRouterContext = __webpack_require__(/*! ../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\nvar _useIntersection = __webpack_require__(/*! ./use-intersection */ \"./node_modules/next/dist/client/use-intersection.js\");\nvar _getDomainLocale = __webpack_require__(/*! ./get-domain-locale */ \"./node_modules/next/dist/client/get-domain-locale.js\");\nvar _addBasePath = __webpack_require__(/*! ./add-base-path */ \"./node_modules/next/dist/client/add-base-path.js\");\nconst prefetched = new Set();\nfunction prefetch(router, href, as, options) {\n    if (false) {}\n    if (!(0, _router).isLocalURL(href)) {\n        return;\n    }\n    // We should only dedupe requests when experimental.optimisticClientCache is\n    // disabled.\n    if (!options.bypassPrefetchedCheck) {\n        const locale = typeof options.locale !== \"undefined\" ? options.locale : \"locale\" in router ? router.locale : undefined;\n        const prefetchedKey = href + \"%\" + as + \"%\" + locale;\n        // If we've already fetched the key, then don't prefetch it again!\n        if (prefetched.has(prefetchedKey)) {\n            return;\n        }\n        // Mark this URL as prefetched.\n        prefetched.add(prefetchedKey);\n    }\n    // Prefetch the JSON page if asked (only in the client)\n    // We need to handle a prefetch error here since we may be\n    // loading with priority which can reject but we don't\n    // want to force navigation since this is only a prefetch\n    Promise.resolve(router.prefetch(href, as, options)).catch((err)=>{\n        if (true) {\n            // rethrow to show invalid URL errors\n            throw err;\n        }\n    });\n}\nfunction isModifiedEvent(event) {\n    const { target  } = event.currentTarget;\n    return target && target !== \"_self\" || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || event.nativeEvent && event.nativeEvent.which === 2;\n}\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter, prefetchEnabled) {\n    const { nodeName  } = e.currentTarget;\n    // anchors inside an svg have a lowercase nodeName\n    const isAnchorNodeName = nodeName.toUpperCase() === \"A\";\n    if (isAnchorNodeName && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {\n        // ignore click for browser’s default behavior\n        return;\n    }\n    e.preventDefault();\n    const navigate = ()=>{\n        // If the router is an NextRouter instance it will have `beforePopState`\n        if (\"beforePopState\" in router) {\n            router[replace ? \"replace\" : \"push\"](href, as, {\n                shallow,\n                locale,\n                scroll\n            });\n        } else {\n            router[replace ? \"replace\" : \"push\"](as || href, {\n                forceOptimisticNavigation: !prefetchEnabled\n            });\n        }\n    };\n    if (isAppRouter) {\n        // @ts-expect-error startTransition exists.\n        _react.default.startTransition(navigate);\n    } else {\n        navigate();\n    }\n}\nfunction formatStringOrUrl(urlObjOrString) {\n    if (typeof urlObjOrString === \"string\") {\n        return urlObjOrString;\n    }\n    return (0, _formatUrl).formatUrl(urlObjOrString);\n}\n/**\n * React Component that enables client-side transitions between routes.\n */ const Link = /*#__PURE__*/ _s(_react.default.forwardRef(_c = _s(function LinkComponent(props, forwardedRef) {\n    _s();\n    if (true) {\n        function createPropError(args) {\n            return new Error(\"Failed prop type: The prop `\".concat(args.key, \"` expects a \").concat(args.expected, \" in `<Link>`, but got `\").concat(args.actual, \"` instead.\") + ( true ? \"\\nOpen your browser's console to view the Component stack trace.\" : 0));\n        }\n        // TypeScript trick for type-guarding:\n        const requiredPropsGuard = {\n            href: true\n        };\n        const requiredProps = Object.keys(requiredPropsGuard);\n        requiredProps.forEach((key)=>{\n            if (key === \"href\") {\n                if (props[key] == null || typeof props[key] !== \"string\" && typeof props[key] !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: props[key] === null ? \"null\" : typeof props[key]\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // TypeScript trick for type-guarding:\n        const optionalPropsGuard = {\n            as: true,\n            replace: true,\n            scroll: true,\n            shallow: true,\n            passHref: true,\n            prefetch: true,\n            locale: true,\n            onClick: true,\n            onMouseEnter: true,\n            onTouchStart: true,\n            legacyBehavior: true\n        };\n        const optionalProps = Object.keys(optionalPropsGuard);\n        optionalProps.forEach((key)=>{\n            const valType = typeof props[key];\n            if (key === \"as\") {\n                if (props[key] && valType !== \"string\" && valType !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"locale\") {\n                if (props[key] && valType !== \"string\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"onClick\" || key === \"onMouseEnter\" || key === \"onTouchStart\") {\n                if (props[key] && valType !== \"function\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`function`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"replace\" || key === \"scroll\" || key === \"shallow\" || key === \"passHref\" || key === \"prefetch\" || key === \"legacyBehavior\") {\n                if (props[key] != null && valType !== \"boolean\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`boolean`\",\n                        actual: valType\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const hasWarned = _react.default.useRef(false);\n        if (props.prefetch && !hasWarned.current) {\n            hasWarned.current = true;\n            console.warn(\"Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated\");\n        }\n    }\n    let children;\n    const { href: hrefProp , as: asProp , children: childrenProp , prefetch: prefetchProp , passHref , replace , shallow , scroll , locale , onClick , onMouseEnter: onMouseEnterProp , onTouchStart: onTouchStartProp , legacyBehavior =true === false  } = props, restProps = _object_without_properties_loose(props, [\n        \"href\",\n        \"as\",\n        \"children\",\n        \"prefetch\",\n        \"passHref\",\n        \"replace\",\n        \"shallow\",\n        \"scroll\",\n        \"locale\",\n        \"onClick\",\n        \"onMouseEnter\",\n        \"onTouchStart\",\n        \"legacyBehavior\"\n    ]);\n    children = childrenProp;\n    if (legacyBehavior && (typeof children === \"string\" || typeof children === \"number\")) {\n        children = /*#__PURE__*/ _react.default.createElement(\"a\", null, children);\n    }\n    const prefetchEnabled = prefetchProp !== false;\n    const pagesRouter = _react.default.useContext(_routerContext.RouterContext);\n    const appRouter = _react.default.useContext(_appRouterContext.AppRouterContext);\n    const router = pagesRouter != null ? pagesRouter : appRouter;\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter;\n    if (true) {\n        if (isAppRouter && !asProp) {\n            let href;\n            if (typeof hrefProp === \"string\") {\n                href = hrefProp;\n            } else if (typeof hrefProp === \"object\" && typeof hrefProp.pathname === \"string\") {\n                href = hrefProp.pathname;\n            }\n            if (href) {\n                const hasDynamicSegment = href.split(\"/\").some((segment)=>segment.startsWith(\"[\") && segment.endsWith(\"]\"));\n                if (hasDynamicSegment) {\n                    throw new Error(\"Dynamic href `\".concat(href, \"` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href\"));\n                }\n            }\n        }\n    }\n    const { href: href1 , as  } = _react.default.useMemo(()=>{\n        if (!pagesRouter) {\n            const resolvedHref = formatStringOrUrl(hrefProp);\n            return {\n                href: resolvedHref,\n                as: asProp ? formatStringOrUrl(asProp) : resolvedHref\n            };\n        }\n        const [resolvedHref1, resolvedAs] = (0, _router).resolveHref(pagesRouter, hrefProp, true);\n        return {\n            href: resolvedHref1,\n            as: asProp ? (0, _router).resolveHref(pagesRouter, asProp) : resolvedAs || resolvedHref1\n        };\n    }, [\n        pagesRouter,\n        hrefProp,\n        asProp\n    ]);\n    const previousHref = _react.default.useRef(href1);\n    const previousAs = _react.default.useRef(as);\n    // This will return the first child, if multiple are provided it will throw an error\n    let child;\n    if (legacyBehavior) {\n        if (true) {\n            if (onClick) {\n                console.warn('\"onClick\" was passed to <Link> with `href` of `'.concat(hrefProp, '` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link'));\n            }\n            if (onMouseEnterProp) {\n                console.warn('\"onMouseEnter\" was passed to <Link> with `href` of `'.concat(hrefProp, '` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link'));\n            }\n            try {\n                child = _react.default.Children.only(children);\n            } catch (err) {\n                if (!children) {\n                    throw new Error(\"No children were passed to <Link> with `href` of `\".concat(hrefProp, \"` but one child is required https://nextjs.org/docs/messages/link-no-children\"));\n                }\n                throw new Error(\"Multiple children were passed to <Link> with `href` of `\".concat(hrefProp, \"` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children\") + ( true ? \" \\nOpen your browser's console to view the Component stack trace.\" : 0));\n            }\n        } else {}\n    } else {\n        if (true) {\n            var ref;\n            if (((ref = children) == null ? void 0 : ref.type) === \"a\") {\n                throw new Error(\"Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor\");\n            }\n        }\n    }\n    const childRef = legacyBehavior ? child && typeof child === \"object\" && child.ref : forwardedRef;\n    const [setIntersectionRef, isVisible, resetVisible] = (0, _useIntersection).useIntersection({\n        rootMargin: \"200px\"\n    });\n    const setRef = _react.default.useCallback((el)=>{\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href1) {\n            resetVisible();\n            previousAs.current = as;\n            previousHref.current = href1;\n        }\n        setIntersectionRef(el);\n        if (childRef) {\n            if (typeof childRef === \"function\") childRef(el);\n            else if (typeof childRef === \"object\") {\n                childRef.current = el;\n            }\n        }\n    }, [\n        as,\n        childRef,\n        href1,\n        resetVisible,\n        setIntersectionRef\n    ]);\n    // Prefetch the URL if we haven't already and it's visible.\n    _react.default.useEffect(()=>{\n        // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n        if (true) {\n            return;\n        }\n        if (!router) {\n            return;\n        }\n        // If we don't need to prefetch the URL, don't do prefetch.\n        if (!isVisible || !prefetchEnabled) {\n            return;\n        }\n        // Prefetch the URL.\n        prefetch(router, href1, as, {\n            locale\n        });\n    }, [\n        as,\n        href1,\n        isVisible,\n        locale,\n        prefetchEnabled,\n        pagesRouter == null ? void 0 : pagesRouter.locale,\n        router\n    ]);\n    const childProps = {\n        ref: setRef,\n        onClick (e) {\n            if (true) {\n                if (!e) {\n                    throw new Error('Component rendered inside next/link has to pass click event to \"onClick\" prop.');\n                }\n            }\n            if (!legacyBehavior && typeof onClick === \"function\") {\n                onClick(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onClick === \"function\") {\n                child.props.onClick(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (e.defaultPrevented) {\n                return;\n            }\n            linkClicked(e, router, href1, as, replace, shallow, scroll, locale, isAppRouter, prefetchEnabled);\n        },\n        onMouseEnter (e) {\n            if (!legacyBehavior && typeof onMouseEnterProp === \"function\") {\n                onMouseEnterProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onMouseEnter === \"function\") {\n                child.props.onMouseEnter(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (!prefetchEnabled && isAppRouter) {\n                return;\n            }\n            prefetch(router, href1, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            });\n        },\n        onTouchStart (e) {\n            if (!legacyBehavior && typeof onTouchStartProp === \"function\") {\n                onTouchStartProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onTouchStart === \"function\") {\n                child.props.onTouchStart(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (!prefetchEnabled && isAppRouter) {\n                return;\n            }\n            prefetch(router, href1, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            });\n        }\n    };\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user\n    if (!legacyBehavior || passHref || child.type === \"a\" && !(\"href\" in child.props)) {\n        const curLocale = typeof locale !== \"undefined\" ? locale : pagesRouter == null ? void 0 : pagesRouter.locale;\n        // we only render domain locales if we are currently on a domain locale\n        // so that locale links are still visitable in development/preview envs\n        const localeDomain = (pagesRouter == null ? void 0 : pagesRouter.isLocaleDomain) && (0, _getDomainLocale).getDomainLocale(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.locales, pagesRouter == null ? void 0 : pagesRouter.domainLocales);\n        childProps.href = localeDomain || (0, _addBasePath).addBasePath((0, _addLocale).addLocale(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.defaultLocale));\n    }\n    return legacyBehavior ? /*#__PURE__*/ _react.default.cloneElement(child, childProps) : /*#__PURE__*/ _react.default.createElement(\"a\", Object.assign({}, restProps, childProps), children);\n}, \"ann5/dOH/k5dvIvXTqfdyzq9F1A=\")), \"ann5/dOH/k5dvIvXTqfdyzq9F1A=\");\n_c1 = Link;\nvar _default = Link;\nexports[\"default\"] = _default;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=link.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Link$_react.default.forwardRef\");\n$RefreshReg$(_c1, \"Link\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/link.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useIntersection = useIntersection;\nvar _react = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\nconst hasIntersectionObserver = typeof IntersectionObserver === \"function\";\nconst observers = new Map();\nconst idList = [];\nfunction createObserver(options) {\n    const id = {\n        root: options.root || null,\n        margin: options.rootMargin || \"\"\n    };\n    const existing = idList.find((obj)=>obj.root === id.root && obj.margin === id.margin);\n    let instance;\n    if (existing) {\n        instance = observers.get(existing);\n        if (instance) {\n            return instance;\n        }\n    }\n    const elements = new Map();\n    const observer = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            const callback = elements.get(entry.target);\n            const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n            if (callback && isVisible) {\n                callback(isVisible);\n            }\n        });\n    }, options);\n    instance = {\n        id,\n        observer,\n        elements\n    };\n    idList.push(id);\n    observers.set(id, instance);\n    return instance;\n}\nfunction observe(element, callback, options) {\n    const { id , observer , elements  } = createObserver(options);\n    elements.set(element, callback);\n    observer.observe(element);\n    return function unobserve() {\n        elements.delete(element);\n        observer.unobserve(element);\n        // Destroy observer when there's nothing left to watch:\n        if (elements.size === 0) {\n            observer.disconnect();\n            observers.delete(id);\n            const index = idList.findIndex((obj)=>obj.root === id.root && obj.margin === id.margin);\n            if (index > -1) {\n                idList.splice(index, 1);\n            }\n        }\n    };\n}\nfunction useIntersection(param) {\n    let { rootRef , rootMargin , disabled  } = param;\n    _s();\n    const isDisabled = disabled || !hasIntersectionObserver;\n    const [visible, setVisible] = (0, _react).useState(false);\n    const [element, setElement] = (0, _react).useState(null);\n    (0, _react).useEffect(()=>{\n        if (hasIntersectionObserver) {\n            if (isDisabled || visible) return;\n            if (element && element.tagName) {\n                const unobserve = observe(element, (isVisible)=>isVisible && setVisible(isVisible), {\n                    root: rootRef == null ? void 0 : rootRef.current,\n                    rootMargin\n                });\n                return unobserve;\n            }\n        } else {\n            if (!visible) {\n                const idleCallback = (0, _requestIdleCallback).requestIdleCallback(()=>setVisible(true));\n                return ()=>(0, _requestIdleCallback).cancelIdleCallback(idleCallback);\n            }\n        }\n    }, [\n        element,\n        isDisabled,\n        rootMargin,\n        rootRef,\n        visible\n    ]);\n    const resetVisible = (0, _react).useCallback(()=>{\n        setVisible(false);\n    }, []);\n    return [\n        setElement,\n        visible,\n        resetVisible\n    ];\n}\n_s(useIntersection, \"mCSdCffdW7h1A87zcVCmaEd/d2A=\");\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=use-intersection.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/use-intersection.js\n"));

/***/ }),

/***/ "./src/components/form.tsx":
/*!*********************************!*\
  !*** ./src/components/form.tsx ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ CheckoutForm; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction CheckoutForm() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"md:flex \",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"w-full\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text-sm font-medium text-gray-900\",\n                    children: \"Customer Information\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 5,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"relative pb-5\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                            type: \"text\",\n                            name: \"mail\",\n                            className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                            placeholder: \"E-mail\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 10,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"absolute right-2 top-4 text-xs font-medium text-blue-500\",\n                            children: \"Log out\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 16,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"mt-4 flex items-center\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                    id: \"default-checkbox\",\n                                    type: \"checkbox\",\n                                    value: \"\",\n                                    className: \"h-3 w-3 rounded border-gray-300 bg-gray-100 text-xs text-blue-600 placeholder:text-zinc-500 focus:outline-none focus:ring-2 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 \"\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                                    lineNumber: 20,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                    htmlFor: \"default-checkbox\",\n                                    className: \"ml-1 text-xs\",\n                                    children: \"Keep me up to date with news and special offers\"\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                                    lineNumber: 26,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 19,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 9,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text-sm font-medium text-gray-900\",\n                    children: \"Shipping Address\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 32,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"grid md:grid-cols-2 md:gap-2\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                            type: \"text\",\n                            name: \"mail\",\n                            className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                            placeholder: \"First name*\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 37,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                            type: \"text\",\n                            name: \"mail\",\n                            className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                            placeholder: \"Last name*\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 43,\n                            columnNumber: 11\n                        }, this),\n                        \" \"\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 36,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                    type: \"text\",\n                    name: \"mail\",\n                    className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                    placeholder: \"Company (optional)\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 50,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                    type: \"text\",\n                    name: \"mail\",\n                    className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                    placeholder: \"Address*\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 56,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                    type: \"text\",\n                    name: \"mail\",\n                    className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                    placeholder: \"Apartment, suite, etc. (optional)\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 62,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"grid md:grid-cols-3 md:gap-2\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                            type: \"text\",\n                            name: \"mail\",\n                            className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                            placeholder: \"Zipcode*\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 69,\n                            columnNumber: 11\n                        }, this),\n                        \" \",\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                            type: \"text\",\n                            name: \"mail\",\n                            className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                            placeholder: \"City*\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 75,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                            type: \"text\",\n                            name: \"mail\",\n                            className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                            placeholder: \"State*\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 81,\n                            columnNumber: 11\n                        }, this),\n                        \" \"\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 68,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                    type: \"text\",\n                    name: \"mail\",\n                    className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                    placeholder: \"Country*\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 88,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                    type: \"text\",\n                    name: \"mail\",\n                    className: \"mt-3 h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                    placeholder: \"Phone Number*\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 94,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-between pt-2\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            type: \"button\",\n                            className: \"h-12 w-24 text-xs font-medium text-blue-500\",\n                            children: \"Return to cart\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 101,\n                            columnNumber: 11\n                        }, this),\n                        \" \",\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            type: \"button\",\n                            className: \"h-12 w-48 rounded bg-blue-500 text-xs font-medium text-white\",\n                            children: \"Continue to Shipping\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                            lineNumber: 107,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n                    lineNumber: 100,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n            lineNumber: 4,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\form.tsx\",\n        lineNumber: 3,\n        columnNumber: 5\n    }, this);\n}\n_c = CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/form.tsx\n"));

/***/ }),

/***/ "./src/components/loading.tsx":
/*!************************************!*\
  !*** ./src/components/loading.tsx ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Loader; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction Loader() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        role: \"status\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                \"aria-hidden\": \"true\",\n                className: \"mr-2 h-8 w-8 animate-spin fill-blue-600 text-gray-200 dark:text-gray-600\",\n                viewBox: \"0 0 100 101\",\n                fill: \"none\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\",\n                        fill: \"currentColor\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\loading.tsx\",\n                        lineNumber: 11,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\",\n                        fill: \"currentFill\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\loading.tsx\",\n                        lineNumber: 15,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\loading.tsx\",\n                lineNumber: 4,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                className: \"sr-only\",\n                children: \"Loading...\"\n            }, void 0, false, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\loading.tsx\",\n                lineNumber: 20,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\loading.tsx\",\n        lineNumber: 3,\n        columnNumber: 5\n    }, this);\n}\n_c = Loader;\nvar _c;\n$RefreshReg$(_c, \"Loader\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9sb2FkaW5nLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUFlLFNBQVNBLFNBQVM7SUFDL0IscUJBQ0UsOERBQUNDO1FBQUlDLE1BQUs7OzBCQUNSLDhEQUFDQztnQkFDQ0MsZUFBWTtnQkFDWkMsV0FBVTtnQkFDVkMsU0FBUTtnQkFDUkMsTUFBSztnQkFDTEMsT0FBTTs7a0NBRU4sOERBQUNDO3dCQUNDQyxHQUFFO3dCQUNGSCxNQUFLOzs7Ozs7a0NBRVAsOERBQUNFO3dCQUNDQyxHQUFFO3dCQUNGSCxNQUFLOzs7Ozs7Ozs7Ozs7MEJBR1QsOERBQUNJO2dCQUFLTixXQUFVOzBCQUFVOzs7Ozs7Ozs7Ozs7QUFHaEMsQ0FBQztLQXRCdUJMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL2xvYWRpbmcudHN4PzAzMDciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9hZGVyKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgPHN2Z1xuICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICBjbGFzc05hbWU9XCJtci0yIGgtOCB3LTggYW5pbWF0ZS1zcGluIGZpbGwtYmx1ZS02MDAgdGV4dC1ncmF5LTIwMCBkYXJrOnRleHQtZ3JheS02MDBcIlxuICAgICAgICB2aWV3Qm94PVwiMCAwIDEwMCAxMDFcIlxuICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNMTAwIDUwLjU5MDhDMTAwIDc4LjIwNTEgNzcuNjE0MiAxMDAuNTkxIDUwIDEwMC41OTFDMjIuMzg1OCAxMDAuNTkxIDAgNzguMjA1MSAwIDUwLjU5MDhDMCAyMi45NzY2IDIyLjM4NTggMC41OTA4MiA1MCAwLjU5MDgyQzc3LjYxNDIgMC41OTA4MiAxMDAgMjIuOTc2NiAxMDAgNTAuNTkwOFpNOS4wODE0NCA1MC41OTA4QzkuMDgxNDQgNzMuMTg5NSAyNy40MDEzIDkxLjUwOTQgNTAgOTEuNTA5NEM3Mi41OTg3IDkxLjUwOTQgOTAuOTE4NiA3My4xODk1IDkwLjkxODYgNTAuNTkwOEM5MC45MTg2IDI3Ljk5MjEgNzIuNTk4NyA5LjY3MjI2IDUwIDkuNjcyMjZDMjcuNDAxMyA5LjY3MjI2IDkuMDgxNDQgMjcuOTkyMSA5LjA4MTQ0IDUwLjU5MDhaXCJcbiAgICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBkPVwiTTkzLjk2NzYgMzkuMDQwOUM5Ni4zOTMgMzguNDAzOCA5Ny44NjI0IDM1LjkxMTYgOTcuMDA3OSAzMy41NTM5Qzk1LjI5MzIgMjguODIyNyA5Mi44NzEgMjQuMzY5MiA4OS44MTY3IDIwLjM0OEM4NS44NDUyIDE1LjExOTIgODAuODgyNiAxMC43MjM4IDc1LjIxMjQgNy40MTI4OUM2OS41NDIyIDQuMTAxOTQgNjMuMjc1NCAxLjk0MDI1IDU2Ljc2OTggMS4wNTEyNEM1MS43NjY2IDAuMzY3NTQxIDQ2LjY5NzYgMC40NDY4NDMgNDEuNzM0NSAxLjI3ODczQzM5LjI2MTMgMS42OTMyOCAzNy44MTMgNC4xOTc3OCAzOC40NTAxIDYuNjIzMjZDMzkuMDg3MyA5LjA0ODc0IDQxLjU2OTQgMTAuNDcxNyA0NC4wNTA1IDEwLjEwNzFDNDcuODUxMSA5LjU0ODU1IDUxLjcxOTEgOS41MjY4OSA1NS41NDAyIDEwLjA0OTFDNjAuODY0MiAxMC43NzY2IDY1Ljk5MjggMTIuNTQ1NyA3MC42MzMxIDE1LjI1NTJDNzUuMjczNSAxNy45NjQ4IDc5LjMzNDcgMjEuNTYxOSA4Mi41ODQ5IDI1Ljg0MUM4NC45MTc1IDI4LjkxMjEgODYuNzk5NyAzMi4yOTEzIDg4LjE4MTEgMzUuODc1OEM4OS4wODMgMzguMjE1OCA5MS41NDIxIDM5LjY3ODEgOTMuOTY3NiAzOS4wNDA5WlwiXG4gICAgICAgICAgZmlsbD1cImN1cnJlbnRGaWxsXCJcbiAgICAgICAgLz5cbiAgICAgIDwvc3ZnPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic3Itb25seVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiTG9hZGVyIiwiZGl2Iiwicm9sZSIsInN2ZyIsImFyaWEtaGlkZGVuIiwiY2xhc3NOYW1lIiwidmlld0JveCIsImZpbGwiLCJ4bWxucyIsInBhdGgiLCJkIiwic3BhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/loading.tsx\n"));

/***/ }),

/***/ "./src/components/order_summary.tsx":
/*!******************************************!*\
  !*** ./src/components/order_summary.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ OrderSummary; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_product__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/product */ \"./src/utils/product.ts\");\n/* harmony import */ var _order_summary_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./order_summary_item */ \"./src/components/order_summary_item.tsx\");\n\n\n\nfunction OrderSummary(param) {\n    let { items , discount_total , sub_total , grand_total , tax_total , promotions  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"lg:py-21 relative col-span-full flex flex-col bg-gray-100 py-6 pl-8 pr-4 sm:py-12 lg:col-span-5\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                className: \"text-black\",\n                children: \"Order summary\"\n            }, void 0, false, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                lineNumber: 25,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative max-w-md\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                        className: \"space-y-5\",\n                        children: items.map((e, key)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_order_summary_item__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                ...e\n                            }, key, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 30,\n                                columnNumber: 13\n                            }, this))\n                    }, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                        lineNumber: 28,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"my-5 h-0.5 w-full bg-white bg-opacity-30\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                        lineNumber: 33,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"hr\", {}, void 0, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 35,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex gap-2\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        type: \"text\",\n                                        name: \"mail\",\n                                        className: \" h-9 w-full rounded border px-2 text-xs placeholder:text-zinc-500 focus:border-gray-500 focus:outline-none\",\n                                        placeholder: \"Coupon code\"\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 37,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        type: \"button\",\n                                        className: \" rounded bg-zinc-700 px-5 py-2 text-sm font-medium text-white hover:bg-zinc-800 focus:outline-none focus:ring-4 focus:ring-zinc-300 dark:bg-zinc-600 dark:hover:bg-zinc-700 dark:focus:ring-zinc-900\",\n                                        children: \"Apply\"\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 43,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 36,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"hr\", {\n                                className: \"pb-2\"\n                            }, void 0, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 50,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                        lineNumber: 34,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"flex justify-between text-sm text-black\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: \"Subtotal\"\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 54,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: (0,_utils_product__WEBPACK_IMPORTED_MODULE_1__.getPrice)(sub_total, \"AUD\")\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 55,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 53,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"flex justify-between text-sm text-black\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: \"Shipping\"\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 58,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-xs font-light\",\n                                        children: \"—\"\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 59,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 57,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"flex justify-between text-sm text-black\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: \"Discount\"\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 62,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: [\n                                            \"(\",\n                                            (0,_utils_product__WEBPACK_IMPORTED_MODULE_1__.getPrice)(discount_total, \"AUD\"),\n                                            \")\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 63,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 61,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"hr\", {}, void 0, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 65,\n                                columnNumber: 11\n                            }, this),\n                            promotions.count > 0 && promotions.results.length > 0 && promotions.results.map((promotion)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"relative inline-flex rounded-md bg-gray-200 p-2 text-sm text-black\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-xs\",\n                                        children: promotion.name\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 74,\n                                        columnNumber: 17\n                                    }, this)\n                                }, promotion.id, false, {\n                                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                    lineNumber: 70,\n                                    columnNumber: 15\n                                }, this)),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"hr\", {}, void 0, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 78,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center justify-between text-lg font-bold text-black\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        children: [\n                                            \"Total\",\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"block text-xs font-light\",\n                                                children: [\n                                                    \"including \",\n                                                    (0,_utils_product__WEBPACK_IMPORTED_MODULE_1__.getPrice)(tax_total, \"AUD\"),\n                                                    \" in taxes\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                                lineNumber: 82,\n                                                columnNumber: 15\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 80,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: (0,_utils_product__WEBPACK_IMPORTED_MODULE_1__.getPrice)(grand_total, \"AUD\")\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                        lineNumber: 86,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 79,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                        lineNumber: 52,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                lineNumber: 27,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative mt-10 text-black\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"mb-5 text-lg font-bold\",\n                        children: \"Support\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                        lineNumber: 92,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-sm font-semibold\",\n                        children: [\n                            \"+01 234 456 789 \",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"font-light\",\n                                children: \"(International)\"\n                            }, void 0, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 94,\n                                columnNumber: 27\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                        lineNumber: 93,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"mt-1 text-sm font-semibold\",\n                        children: [\n                            \"support@example.com \",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"font-light\",\n                                children: \"(Email)\"\n                            }, void 0, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                                lineNumber: 97,\n                                columnNumber: 31\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                        lineNumber: 96,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"mt-2 text-xs font-medium\",\n                        children: \"Call us now for payment related issues\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                        lineNumber: 99,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                lineNumber: 91,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative mt-10 flex\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"flex flex-col\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-sm font-bold text-black\",\n                            children: \"Money Back Guarantee\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                            lineNumber: 105,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-xs font-medium text-black\",\n                            children: \"within 30 days of purchase\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                            lineNumber: 108,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                    lineNumber: 104,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n                lineNumber: 103,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary.tsx\",\n        lineNumber: 24,\n        columnNumber: 5\n    }, this);\n}\n_c = OrderSummary;\nvar _c;\n$RefreshReg$(_c, \"OrderSummary\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/order_summary.tsx\n"));

/***/ }),

/***/ "./src/components/order_summary_item.tsx":
/*!***********************************************!*\
  !*** ./src/components/order_summary_item.tsx ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ OrderSummaryItem; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_product__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/product */ \"./src/utils/product.ts\");\n\n\nfunction OrderSummaryItem(param) {\n    let { product , price , variant  } = param;\n    var _product_images_, _product_images__file;\n    var _ref;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n        className: \"flex items-center justify-between\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"inline-flex items-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                        src: (_ref = product.images && ((_product_images_ = product.images[0]) === null || _product_images_ === void 0 ? void 0 : (_product_images__file = _product_images_.file) === null || _product_images__file === void 0 ? void 0 : _product_images__file.url)) !== null && _ref !== void 0 ? _ref : \"https://londiniumespresso.com/store/image/cache/catalog/all-machines/londinium-R24-2021-800x800.jpg\",\n                        alt: \"\",\n                        className: \"max-h-16 rounded-md\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary_item.tsx\",\n                        lineNumber: 18,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"ml-3\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-base font-semibold text-black\",\n                                children: product.name\n                            }, void 0, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary_item.tsx\",\n                                lineNumber: 27,\n                                columnNumber: 11\n                            }, this),\n                            (variant === null || variant === void 0 ? void 0 : variant.name) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-sm font-medium text-black text-opacity-80\",\n                                children: variant.name\n                            }, void 0, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary_item.tsx\",\n                                lineNumber: 29,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary_item.tsx\",\n                        lineNumber: 26,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary_item.tsx\",\n                lineNumber: 17,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                className: \"text-sm font-semibold text-black\",\n                children: (0,_utils_product__WEBPACK_IMPORTED_MODULE_1__.getPrice)(price, \"AUD\")\n            }, void 0, false, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary_item.tsx\",\n                lineNumber: 35,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\dev_test\\\\src\\\\components\\\\order_summary_item.tsx\",\n        lineNumber: 16,\n        columnNumber: 5\n    }, this);\n}\n_c = OrderSummaryItem;\nvar _c;\n$RefreshReg$(_c, \"OrderSummaryItem\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9vcmRlcl9zdW1tYXJ5X2l0ZW0udHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUUyQztBQUU1QixTQUFTQyxpQkFBaUIsS0FTeEMsRUFBRTtRQVRzQyxFQUN2Q0MsUUFBTyxFQUNQQyxNQUFLLEVBQ0xDLFFBQU8sRUFNUixHQVR3QztRQWVWRjtRQUFsQkE7SUFMWCxxQkFDRSw4REFBQ0c7UUFBR0MsV0FBVTs7MEJBQ1osOERBQUNDO2dCQUFJRCxXQUFVOztrQ0FDYiw4REFBQ0U7d0JBQ0NDLEtBQ0UsQ0FBQ1AsT0FBQUEsUUFBUVEsTUFBTSxJQUFJUixDQUFBQSxDQUFBQSxtQkFBQUEsUUFBUVEsTUFBTSxDQUFDLEVBQUUsY0FBakJSLDhCQUFBQSxLQUFBQSxJQUFBQSx5QkFBQUEsaUJBQW1CUyxxREFBbkJULEtBQUFBLDBCQUF5QlUsR0FBRixlQUF6Q1Ysa0JBQUFBLE9BQ0QscUdBQXFHO3dCQUV2R1csS0FBSTt3QkFDSlAsV0FBVTs7Ozs7O2tDQUVaLDhEQUFDQzt3QkFBSUQsV0FBVTs7MENBQ2IsOERBQUNRO2dDQUFFUixXQUFVOzBDQUFzQ0osUUFBUWEsSUFBSTs7Ozs7OzRCQUM5RFgsQ0FBQUEsb0JBQUFBLHFCQUFBQSxLQUFBQSxJQUFBQSxRQUFTVyxJQUFJLG1CQUNaLDhEQUFDRDtnQ0FBRVIsV0FBVTswQ0FDVkYsUUFBUVcsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUtyQiw4REFBQ0Q7Z0JBQUVSLFdBQVU7MEJBQ1ZOLHdEQUFRQSxDQUFDRyxPQUFPOzs7Ozs7Ozs7Ozs7QUFJekIsQ0FBQztLQW5DdUJGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL29yZGVyX3N1bW1hcnlfaXRlbS50c3g/ODU2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFByb2R1Y3QsIFByb2R1Y3RWYXJpYW50IH0gZnJvbSAnc3dlbGwtanMnO1xuXG5pbXBvcnQgeyBnZXRQcmljZSB9IGZyb20gJ0AvdXRpbHMvcHJvZHVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9yZGVyU3VtbWFyeUl0ZW0oe1xuICBwcm9kdWN0LFxuICBwcmljZSxcbiAgdmFyaWFudCxcbn06IHtcbiAgaXRlbTogb2JqZWN0O1xuICBwcm9kdWN0OiBQcm9kdWN0O1xuICB2YXJpYW50OiBQcm9kdWN0VmFyaWFudDtcbiAgcHJpY2U6IG51bWJlcjtcbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8bGkgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPXtcbiAgICAgICAgICAgIChwcm9kdWN0LmltYWdlcyAmJiBwcm9kdWN0LmltYWdlc1swXT8uZmlsZT8udXJsKSA/P1xuICAgICAgICAgICAgJ2h0dHBzOi8vbG9uZGluaXVtZXNwcmVzc28uY29tL3N0b3JlL2ltYWdlL2NhY2hlL2NhdGFsb2cvYWxsLW1hY2hpbmVzL2xvbmRpbml1bS1SMjQtMjAyMS04MDB4ODAwLmpwZydcbiAgICAgICAgICB9XG4gICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJtYXgtaC0xNiByb3VuZGVkLW1kXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC0zXCI+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1iYXNlIGZvbnQtc2VtaWJvbGQgdGV4dC1ibGFja1wiPntwcm9kdWN0Lm5hbWV9PC9wPlxuICAgICAgICAgIHt2YXJpYW50Py5uYW1lICYmIChcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ibGFjayB0ZXh0LW9wYWNpdHktODBcIj5cbiAgICAgICAgICAgICAge3ZhcmlhbnQubmFtZX1cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LXNlbWlib2xkIHRleHQtYmxhY2tcIj5cbiAgICAgICAge2dldFByaWNlKHByaWNlLCAnQVVEJyl9XG4gICAgICA8L3A+XG4gICAgPC9saT5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJnZXRQcmljZSIsIk9yZGVyU3VtbWFyeUl0ZW0iLCJwcm9kdWN0IiwicHJpY2UiLCJ2YXJpYW50IiwibGkiLCJjbGFzc05hbWUiLCJkaXYiLCJpbWciLCJzcmMiLCJpbWFnZXMiLCJmaWxlIiwidXJsIiwiYWx0IiwicCIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/order_summary_item.tsx\n"));

/***/ }),

/***/ "./src/layouts/Meta.tsx":
/*!******************************!*\
  !*** ./src/layouts/Meta.tsx ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Meta\": function() { return /* binding */ Meta; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_seo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-seo */ \"./node_modules/next-seo/lib/next-seo.module.js\");\n/* harmony import */ var _utils_AppConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/utils/AppConfig */ \"./src/utils/AppConfig.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst Meta = (props)=>{\n    _s();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_1___default()), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        charSet: \"UTF-8\"\n                    }, \"charset\", false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\layouts\\\\Meta.tsx\",\n                        lineNumber: 19,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        name: \"viewport\",\n                        content: \"width=device-width,initial-scale=1\"\n                    }, \"viewport\", false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\layouts\\\\Meta.tsx\",\n                        lineNumber: 20,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                        rel: \"apple-touch-icon\",\n                        href: \"\".concat(router.basePath, \"/apple-touch-icon.png\")\n                    }, \"apple\", false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\layouts\\\\Meta.tsx\",\n                        lineNumber: 25,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                        rel: \"icon\",\n                        type: \"image/png\",\n                        sizes: \"32x32\",\n                        href: \"\".concat(router.basePath, \"/favicon-32x32.png\")\n                    }, \"icon32\", false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\layouts\\\\Meta.tsx\",\n                        lineNumber: 30,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                        rel: \"icon\",\n                        type: \"image/png\",\n                        sizes: \"16x16\",\n                        href: \"\".concat(router.basePath, \"/favicon-16x16.png\")\n                    }, \"icon16\", false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\layouts\\\\Meta.tsx\",\n                        lineNumber: 37,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                        rel: \"icon\",\n                        href: \"\".concat(router.basePath, \"/favicon.ico\")\n                    }, \"favicon\", false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\layouts\\\\Meta.tsx\",\n                        lineNumber: 44,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\layouts\\\\Meta.tsx\",\n                lineNumber: 18,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_seo__WEBPACK_IMPORTED_MODULE_3__.NextSeo, {\n                title: props.title,\n                description: props.description,\n                canonical: props.canonical,\n                openGraph: {\n                    title: props.title,\n                    description: props.description,\n                    url: props.canonical,\n                    locale: _utils_AppConfig__WEBPACK_IMPORTED_MODULE_4__.AppConfig.locale,\n                    site_name: _utils_AppConfig__WEBPACK_IMPORTED_MODULE_4__.AppConfig.site_name\n                }\n            }, void 0, false, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\layouts\\\\Meta.tsx\",\n                lineNumber: 50,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n_s(Meta, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = Meta;\n\nvar _c;\n$RefreshReg$(_c, \"Meta\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGF5b3V0cy9NZXRhLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFBNkI7QUFDVztBQUNMO0FBRVc7QUFROUMsTUFBTUksT0FBTyxDQUFDQyxRQUFzQjs7SUFDbEMsTUFBTUMsU0FBU0wsc0RBQVNBO0lBRXhCLHFCQUNFOzswQkFDRSw4REFBQ0Qsa0RBQUlBOztrQ0FDSCw4REFBQ087d0JBQUtDLFNBQVE7dUJBQVk7Ozs7O2tDQUMxQiw4REFBQ0Q7d0JBQ0NFLE1BQUs7d0JBQ0xDLFNBQVE7dUJBQ0o7Ozs7O2tDQUVOLDhEQUFDQzt3QkFDQ0MsS0FBSTt3QkFDSkMsTUFBTSxHQUFtQixPQUFoQlAsT0FBT1EsUUFBUSxFQUFDO3VCQUNyQjs7Ozs7a0NBRU4sOERBQUNIO3dCQUNDQyxLQUFJO3dCQUNKRyxNQUFLO3dCQUNMQyxPQUFNO3dCQUNOSCxNQUFNLEdBQW1CLE9BQWhCUCxPQUFPUSxRQUFRLEVBQUM7dUJBQ3JCOzs7OztrQ0FFTiw4REFBQ0g7d0JBQ0NDLEtBQUk7d0JBQ0pHLE1BQUs7d0JBQ0xDLE9BQU07d0JBQ05ILE1BQU0sR0FBbUIsT0FBaEJQLE9BQU9RLFFBQVEsRUFBQzt1QkFDckI7Ozs7O2tDQUVOLDhEQUFDSDt3QkFDQ0MsS0FBSTt3QkFDSkMsTUFBTSxHQUFtQixPQUFoQlAsT0FBT1EsUUFBUSxFQUFDO3VCQUNyQjs7Ozs7Ozs7Ozs7MEJBR1IsOERBQUNaLDZDQUFPQTtnQkFDTmUsT0FBT1osTUFBTVksS0FBSztnQkFDbEJDLGFBQWFiLE1BQU1hLFdBQVc7Z0JBQzlCQyxXQUFXZCxNQUFNYyxTQUFTO2dCQUMxQkMsV0FBVztvQkFDVEgsT0FBT1osTUFBTVksS0FBSztvQkFDbEJDLGFBQWFiLE1BQU1hLFdBQVc7b0JBQzlCRyxLQUFLaEIsTUFBTWMsU0FBUztvQkFDcEJHLFFBQVFuQiw4REFBZ0I7b0JBQ3hCb0IsV0FBV3BCLGlFQUFtQjtnQkFDaEM7Ozs7Ozs7O0FBSVI7R0FuRE1DOztRQUNXSCxrREFBU0E7OztLQURwQkc7QUFxRFUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xheW91dHMvTWV0YS50c3g/MGY5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInO1xuaW1wb3J0IHsgTmV4dFNlbyB9IGZyb20gJ25leHQtc2VvJztcblxuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnQC91dGlscy9BcHBDb25maWcnO1xuXG50eXBlIElNZXRhUHJvcHMgPSB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGNhbm9uaWNhbD86IHN0cmluZztcbn07XG5cbmNvbnN0IE1ldGEgPSAocHJvcHM6IElNZXRhUHJvcHMpID0+IHtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEhlYWQ+XG4gICAgICAgIDxtZXRhIGNoYXJTZXQ9XCJVVEYtOFwiIGtleT1cImNoYXJzZXRcIiAvPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIG5hbWU9XCJ2aWV3cG9ydFwiXG4gICAgICAgICAgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTFcIlxuICAgICAgICAgIGtleT1cInZpZXdwb3J0XCJcbiAgICAgICAgLz5cbiAgICAgICAgPGxpbmtcbiAgICAgICAgICByZWw9XCJhcHBsZS10b3VjaC1pY29uXCJcbiAgICAgICAgICBocmVmPXtgJHtyb3V0ZXIuYmFzZVBhdGh9L2FwcGxlLXRvdWNoLWljb24ucG5nYH1cbiAgICAgICAgICBrZXk9XCJhcHBsZVwiXG4gICAgICAgIC8+XG4gICAgICAgIDxsaW5rXG4gICAgICAgICAgcmVsPVwiaWNvblwiXG4gICAgICAgICAgdHlwZT1cImltYWdlL3BuZ1wiXG4gICAgICAgICAgc2l6ZXM9XCIzMngzMlwiXG4gICAgICAgICAgaHJlZj17YCR7cm91dGVyLmJhc2VQYXRofS9mYXZpY29uLTMyeDMyLnBuZ2B9XG4gICAgICAgICAga2V5PVwiaWNvbjMyXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGxpbmtcbiAgICAgICAgICByZWw9XCJpY29uXCJcbiAgICAgICAgICB0eXBlPVwiaW1hZ2UvcG5nXCJcbiAgICAgICAgICBzaXplcz1cIjE2eDE2XCJcbiAgICAgICAgICBocmVmPXtgJHtyb3V0ZXIuYmFzZVBhdGh9L2Zhdmljb24tMTZ4MTYucG5nYH1cbiAgICAgICAgICBrZXk9XCJpY29uMTZcIlxuICAgICAgICAvPlxuICAgICAgICA8bGlua1xuICAgICAgICAgIHJlbD1cImljb25cIlxuICAgICAgICAgIGhyZWY9e2Ake3JvdXRlci5iYXNlUGF0aH0vZmF2aWNvbi5pY29gfVxuICAgICAgICAgIGtleT1cImZhdmljb25cIlxuICAgICAgICAvPlxuICAgICAgPC9IZWFkPlxuICAgICAgPE5leHRTZW9cbiAgICAgICAgdGl0bGU9e3Byb3BzLnRpdGxlfVxuICAgICAgICBkZXNjcmlwdGlvbj17cHJvcHMuZGVzY3JpcHRpb259XG4gICAgICAgIGNhbm9uaWNhbD17cHJvcHMuY2Fub25pY2FsfVxuICAgICAgICBvcGVuR3JhcGg9e3tcbiAgICAgICAgICB0aXRsZTogcHJvcHMudGl0bGUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIHVybDogcHJvcHMuY2Fub25pY2FsLFxuICAgICAgICAgIGxvY2FsZTogQXBwQ29uZmlnLmxvY2FsZSxcbiAgICAgICAgICBzaXRlX25hbWU6IEFwcENvbmZpZy5zaXRlX25hbWUsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IHsgTWV0YSB9O1xuIl0sIm5hbWVzIjpbIkhlYWQiLCJ1c2VSb3V0ZXIiLCJOZXh0U2VvIiwiQXBwQ29uZmlnIiwiTWV0YSIsInByb3BzIiwicm91dGVyIiwibWV0YSIsImNoYXJTZXQiLCJuYW1lIiwiY29udGVudCIsImxpbmsiLCJyZWwiLCJocmVmIiwiYmFzZVBhdGgiLCJ0eXBlIiwic2l6ZXMiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiY2Fub25pY2FsIiwib3BlbkdyYXBoIiwidXJsIiwibG9jYWxlIiwic2l0ZV9uYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/layouts/Meta.tsx\n"));

/***/ }),

/***/ "./src/pages/[slug].tsx":
/*!******************************!*\
  !*** ./src/pages/[slug].tsx ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__N_SSP\": function() { return /* binding */ __N_SSP; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var swell_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! swell-js */ \"./node_modules/swell-js/dist/swell.umd.min.js\");\n/* harmony import */ var swell_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(swell_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_form__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/form */ \"./src/components/form.tsx\");\n/* harmony import */ var _components_loading__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/loading */ \"./src/components/loading.tsx\");\n/* harmony import */ var _components_order_summary__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/order_summary */ \"./src/components/order_summary.tsx\");\n/* harmony import */ var _layouts_Meta__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/layouts/Meta */ \"./src/layouts/Meta.tsx\");\n/* harmony import */ var _templates_Main__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/templates/Main */ \"./src/templates/Main.tsx\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nconst Index = (param)=>{\n    let { checkout_id  } = param;\n    _s();\n    swell_js__WEBPACK_IMPORTED_MODULE_2___default().init(\"toggly\", \"pk_Qo600k0BZTFLNJzuwLIgqAdmzkh720h5\");\n    // Initialize the client first\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [cart, setCart] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setLoading(true);\n        // @ts-ignore\n        swell_js__WEBPACK_IMPORTED_MODULE_2___default().cart.recover(checkout_id).then((e)=>{\n            setCart({\n                ...e\n            });\n        });\n        setLoading(false);\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_templates_Main__WEBPACK_IMPORTED_MODULE_7__.Main, {\n        meta: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_layouts_Meta__WEBPACK_IMPORTED_MODULE_6__.Meta, {\n            title: \"Next.js checkout Presentation\",\n            description: \"Next js checkout is the perfect starter code for your project. Build your React application with the Next.js framework.\"\n        }, void 0, false, void 0, void 0),\n        children: [\n            loading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                id: \"loading-screen\",\n                className: \"fixed top-0 left-0 z-50 block h-full w-full bg-white\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"relative top-1/2 my-0 mx-auto block h-0 w-0 opacity-75\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_loading__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                        lineNumber: 45,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                    lineNumber: 44,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                lineNumber: 40,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative bg-white\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"mx-auto grid min-h-screen grid-cols-12\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"mx-auto mr-6 py-6 sm:py-12 lg:col-span-3 lg:col-start-4\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"ml-auto w-full\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                        className: \"relative text-center text-2xl font-medium text-gray-700 sm:text-3xl\",\n                                        children: \"Londinium\"\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                        lineNumber: 54,\n                                        columnNumber: 15\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex flex-wrap items-center justify-center text-xs\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                            className: \"flex items-center gap-2\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                    className: \"inline-flex items-center\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                            href: \"#\",\n                                                            className: \"text-gray-900 hover:text-gray-900\",\n                                                            children: \"Customer Information\"\n                                                        }, void 0, false, {\n                                                            fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                                            lineNumber: 60,\n                                                            columnNumber: 21\n                                                        }, undefined),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                            className: \"ml-2 h-auto font-medium text-gray-400\",\n                                                            children: \"/\"\n                                                        }, void 0, false, {\n                                                            fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                                            lineNumber: 63,\n                                                            columnNumber: 21\n                                                        }, undefined)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                                    lineNumber: 59,\n                                                    columnNumber: 19\n                                                }, undefined),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                    className: \"inline-flex items-center\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                            href: \"#\",\n                                                            className: \"text-gray-600 hover:text-gray-900\",\n                                                            children: \"Shipping Method\"\n                                                        }, void 0, false, {\n                                                            fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                                            lineNumber: 69,\n                                                            columnNumber: 21\n                                                        }, undefined),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                            className: \"ml-2 h-auto font-medium text-gray-400\",\n                                                            children: \"/\"\n                                                        }, void 0, false, {\n                                                            fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                                            lineNumber: 73,\n                                                            columnNumber: 21\n                                                        }, undefined)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                                    lineNumber: 68,\n                                                    columnNumber: 19\n                                                }, undefined),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                    className: \"inline-flex items-center\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                        href: \"#\",\n                                                        className: \" text-gray-600 hover:text-gray-900\",\n                                                        children: \"Payment Method\"\n                                                    }, void 0, false, {\n                                                        fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                                        lineNumber: 79,\n                                                        columnNumber: 21\n                                                    }, undefined)\n                                                }, void 0, false, {\n                                                    fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                                    lineNumber: 78,\n                                                    columnNumber: 19\n                                                }, undefined)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                            lineNumber: 58,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                        lineNumber: 57,\n                                        columnNumber: 15\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_form__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {}, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                        lineNumber: 86,\n                                        columnNumber: 15\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                                lineNumber: 53,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                            lineNumber: 52,\n                            columnNumber: 11\n                        }, undefined),\n                        cart !== null && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_order_summary__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                            ...cart\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                            lineNumber: 89,\n                            columnNumber: 29\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                    lineNumber: 51,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n                lineNumber: 50,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\dev_test\\\\src\\\\pages\\\\[slug].tsx\",\n        lineNumber: 31,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Index, \"kSrK87d3FFXhl+vk/QUq6tTnClk=\");\n_c = Index;\nvar __N_SSP = true;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Index);\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvW3NsdWddLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFBNEM7QUFFZjtBQUVnQjtBQUNIO0FBQ1k7QUFDaEI7QUFDRTtBQUV4QyxNQUFNUSxRQUFRLFNBQThDO1FBQTdDLEVBQUVDLFlBQVcsRUFBMkI7O0lBQ3JEUCxvREFBVSxDQUNSUyxRQUFtQyxFQUNuQ0EscUNBQXVDO0lBR3pDLDhCQUE4QjtJQUU5QixNQUFNLENBQUNJLFNBQVNDLFdBQVcsR0FBR2YsK0NBQVFBLENBQVUsS0FBSztJQUNyRCxNQUFNLENBQUNnQixNQUFNQyxRQUFRLEdBQUdqQiwrQ0FBUUEsQ0FBYSxJQUFJO0lBQ2pERCxnREFBU0EsQ0FBQyxJQUFNO1FBQ2RnQixXQUFXLElBQUk7UUFDZixhQUFhO1FBQ2JkLDREQUFrQixDQUFDTyxhQUFhVyxJQUFJLENBQUMsQ0FBQ0MsSUFBVztZQUMvQ0gsUUFBUTtnQkFBRSxHQUFHRyxDQUFDO1lBQUM7UUFDakI7UUFDQUwsV0FBVyxLQUFLO0lBQ2xCLEdBQUcsRUFBRTtJQUVMLHFCQUNFLDhEQUFDVCxpREFBSUE7UUFDSGUsb0JBQ0UsOERBQUNoQiwrQ0FBSUE7WUFDSGlCLE9BQU07WUFDTkMsYUFBWTs7O1lBSWZULHlCQUNDLDhEQUFDVTtnQkFDQ0MsSUFBRztnQkFDSEMsV0FBVTswQkFFViw0RUFBQ0M7b0JBQUtELFdBQVU7OEJBQ2QsNEVBQUN2QiwyREFBTUE7Ozs7Ozs7Ozs7Ozs7OzswQkFLYiw4REFBQ3FCO2dCQUFJRSxXQUFVOzBCQUNiLDRFQUFDRjtvQkFBSUUsV0FBVTs7c0NBQ2IsOERBQUNGOzRCQUFJRSxXQUFVO3NDQUNiLDRFQUFDRjtnQ0FBSUUsV0FBVTs7a0RBQ2IsOERBQUNFO3dDQUFHRixXQUFVO2tEQUFzRTs7Ozs7O2tEQUdwRiw4REFBQ0Y7d0NBQUlFLFdBQVU7a0RBQ2IsNEVBQUNHOzRDQUFHSCxXQUFVOzs4REFDWiw4REFBQ0k7b0RBQUdKLFdBQVU7O3NFQUNaLDhEQUFDSzs0REFBRUMsTUFBSzs0REFBSU4sV0FBVTtzRUFBb0M7Ozs7OztzRUFHMUQsOERBQUNDOzREQUFLRCxXQUFVO3NFQUF3Qzs7Ozs7Ozs7Ozs7OzhEQUsxRCw4REFBQ0k7b0RBQUdKLFdBQVU7O3NFQUNaLDhEQUFDSzs0REFBRUMsTUFBSzs0REFBSU4sV0FBVTtzRUFBb0M7Ozs7OztzRUFJMUQsOERBQUNDOzREQUFLRCxXQUFVO3NFQUF3Qzs7Ozs7Ozs7Ozs7OzhEQUsxRCw4REFBQ0k7b0RBQUdKLFdBQVU7OERBQ1osNEVBQUNLO3dEQUFFQyxNQUFLO3dEQUFJTixXQUFVO2tFQUFxQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrREFPakUsOERBQUN4Qix3REFBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBR2hCYyxTQUFTLElBQUksa0JBQUksOERBQUNaLGlFQUFZQTs0QkFBRSxHQUFHWSxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtsRDtHQW5GTVQ7S0FBQUE7O0FBNkZOLCtEQUFlQSxLQUFLQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9wYWdlcy9bc2x1Z10udHN4PzZmNDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgQ2FydCB9IGZyb20gJ3N3ZWxsLWpzJztcbmltcG9ydCBzd2VsbCBmcm9tICdzd2VsbC1qcyc7XG5cbmltcG9ydCBDaGVja291dEZvcm0gZnJvbSAnQC9jb21wb25lbnRzL2Zvcm0nO1xuaW1wb3J0IExvYWRlciBmcm9tICdAL2NvbXBvbmVudHMvbG9hZGluZyc7XG5pbXBvcnQgT3JkZXJTdW1tYXJ5IGZyb20gJ0AvY29tcG9uZW50cy9vcmRlcl9zdW1tYXJ5JztcbmltcG9ydCB7IE1ldGEgfSBmcm9tICdAL2xheW91dHMvTWV0YSc7XG5pbXBvcnQgeyBNYWluIH0gZnJvbSAnQC90ZW1wbGF0ZXMvTWFpbic7XG5cbmNvbnN0IEluZGV4ID0gKHsgY2hlY2tvdXRfaWQgfTogeyBjaGVja291dF9pZDogc3RyaW5nIH0pID0+IHtcbiAgc3dlbGwuaW5pdChcbiAgICBwcm9jZXNzLmVudi5ORVhUX1NXRUxMX1BVQkxJQ19TVE9SRSBhcyBzdHJpbmcsXG4gICAgcHJvY2Vzcy5lbnYuTkVYVF9TV0VMTF9QVUJMSUNfQVBJX1RPS0VOIGFzIHN0cmluZ1xuICApO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIGNsaWVudCBmaXJzdFxuXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2NhcnQsIHNldENhcnRdID0gdXNlU3RhdGU8Q2FydCB8IGFueT4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc3dlbGwuY2FydC5yZWNvdmVyKGNoZWNrb3V0X2lkKS50aGVuKChlOiBhbnkpID0+IHtcbiAgICAgIHNldENhcnQoeyAuLi5lIH0pO1xuICAgIH0pO1xuICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8TWFpblxuICAgICAgbWV0YT17XG4gICAgICAgIDxNZXRhXG4gICAgICAgICAgdGl0bGU9XCJOZXh0LmpzIGNoZWNrb3V0IFByZXNlbnRhdGlvblwiXG4gICAgICAgICAgZGVzY3JpcHRpb249XCJOZXh0IGpzIGNoZWNrb3V0IGlzIHRoZSBwZXJmZWN0IHN0YXJ0ZXIgY29kZSBmb3IgeW91ciBwcm9qZWN0LiBCdWlsZCB5b3VyIFJlYWN0IGFwcGxpY2F0aW9uIHdpdGggdGhlIE5leHQuanMgZnJhbWV3b3JrLlwiXG4gICAgICAgIC8+XG4gICAgICB9XG4gICAgPlxuICAgICAge2xvYWRpbmcgJiYgKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgaWQ9XCJsb2FkaW5nLXNjcmVlblwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZml4ZWQgdG9wLTAgbGVmdC0wIHotNTAgYmxvY2sgIGgtZnVsbCB3LWZ1bGwgYmctd2hpdGVcIlxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmVsYXRpdmUgdG9wLTEvMiBteS0wIG14LWF1dG8gYmxvY2sgaC0wIHctMCAgb3BhY2l0eS03NVwiPlxuICAgICAgICAgICAgPExvYWRlciAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlbGF0aXZlIGJnLXdoaXRlXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXgtYXV0byBncmlkIG1pbi1oLXNjcmVlbiBncmlkLWNvbHMtMTJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14LWF1dG8gbXItNiAgcHktNiBzbTpweS0xMiBsZzpjb2wtc3Bhbi0zIGxnOmNvbC1zdGFydC00XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1sLWF1dG8gdy1mdWxsXCI+XG4gICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJyZWxhdGl2ZSB0ZXh0LWNlbnRlciB0ZXh0LTJ4bCBmb250LW1lZGl1bSB0ZXh0LWdyYXktNzAwIHNtOnRleHQtM3hsXCI+XG4gICAgICAgICAgICAgICAgTG9uZGluaXVtXG4gICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LXdyYXAgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHRleHQteHNcIj5cbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktOTAwIGhvdmVyOnRleHQtZ3JheS05MDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICBDdXN0b21lciBJbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1sLTIgaC1hdXRvIGZvbnQtbWVkaXVtIHRleHQtZ3JheS00MDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAvXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG5cbiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktNjAwIGhvdmVyOnRleHQtZ3JheS05MDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICBTaGlwcGluZyBNZXRob2RcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1sLTIgaC1hdXRvIGZvbnQtbWVkaXVtIHRleHQtZ3JheS00MDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAvXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG5cbiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBjbGFzc05hbWU9XCIgdGV4dC1ncmF5LTYwMCBob3Zlcjp0ZXh0LWdyYXktOTAwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgUGF5bWVudCBNZXRob2RcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICA8Q2hlY2tvdXRGb3JtIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7Y2FydCAhPT0gbnVsbCAmJiA8T3JkZXJTdW1tYXJ5IHsuLi5jYXJ0fSAvPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L01haW4+XG4gICk7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VydmVyU2lkZVByb3BzKGNvbnRleHQ6IGFueSkge1xuICByZXR1cm4ge1xuICAgIHByb3BzOiB7XG4gICAgICBjaGVja291dF9pZDogY29udGV4dC5xdWVyeS5zbHVnLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEluZGV4O1xuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVN0YXRlIiwic3dlbGwiLCJDaGVja291dEZvcm0iLCJMb2FkZXIiLCJPcmRlclN1bW1hcnkiLCJNZXRhIiwiTWFpbiIsIkluZGV4IiwiY2hlY2tvdXRfaWQiLCJpbml0IiwicHJvY2VzcyIsImVudiIsIk5FWFRfU1dFTExfUFVCTElDX1NUT1JFIiwiTkVYVF9TV0VMTF9QVUJMSUNfQVBJX1RPS0VOIiwibG9hZGluZyIsInNldExvYWRpbmciLCJjYXJ0Iiwic2V0Q2FydCIsInJlY292ZXIiLCJ0aGVuIiwiZSIsIm1ldGEiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZGl2IiwiaWQiLCJjbGFzc05hbWUiLCJzcGFuIiwiaDEiLCJ1bCIsImxpIiwiYSIsImhyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/pages/[slug].tsx\n"));

/***/ }),

/***/ "./src/templates/Main.tsx":
/*!********************************!*\
  !*** ./src/templates/Main.tsx ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Main\": function() { return /* binding */ Main; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_AppConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/AppConfig */ \"./src/utils/AppConfig.ts\");\n\n\n\nconst Main = (props)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full px-1 text-gray-700 antialiased\",\n        children: [\n            props.meta,\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mx-auto\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"content text-xl\",\n                        children: props.children\n                    }, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                        lineNumber: 15,\n                        columnNumber: 7\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"border-t text-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                className: \"flex flex-wrap justify-center text-xl\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                        className: \"mr-6\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                                            href: \"/\",\n                                            className: \"border-none text-gray-700 hover:text-gray-900\",\n                                            children: \"Home\"\n                                        }, void 0, false, {\n                                            fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                                            lineNumber: 20,\n                                            columnNumber: 15\n                                        }, undefined)\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                                        lineNumber: 19,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                        className: \"mr-6\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                                            href: \"/about/\",\n                                            className: \"border-none text-gray-700 hover:text-gray-900\",\n                                            children: \"About\"\n                                        }, void 0, false, {\n                                            fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                                            lineNumber: 28,\n                                            columnNumber: 15\n                                        }, undefined)\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                                        lineNumber: 27,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                        className: \"mr-6\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                                            href: \"/blog/\",\n                                            className: \"border-none text-gray-700 hover:text-gray-900\",\n                                            children: \"Blog\"\n                                        }, void 0, false, {\n                                            fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                                            lineNumber: 36,\n                                            columnNumber: 15\n                                        }, undefined)\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                                        lineNumber: 35,\n                                        columnNumber: 13\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                                lineNumber: 18,\n                                columnNumber: 11\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                            lineNumber: 17,\n                            columnNumber: 9\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                        lineNumber: 16,\n                        columnNumber: 7\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \" border-gray-300 py-8 text-center text-sm\",\n                        children: [\n                            \"\\xa9 Copyright \",\n                            new Date().getFullYear(),\n                            \" \",\n                            _utils_AppConfig__WEBPACK_IMPORTED_MODULE_2__.AppConfig.title,\n                            \".\",\n                            \" \",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                href: \"#\",\n                                children: \"Store name\"\n                            }, void 0, false, {\n                                fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                                lineNumber: 48,\n                                columnNumber: 9\n                            }, undefined),\n                            \".\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                        lineNumber: 46,\n                        columnNumber: 7\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n                lineNumber: 14,\n                columnNumber: 5\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\dev_test\\\\src\\\\templates\\\\Main.tsx\",\n        lineNumber: 12,\n        columnNumber: 3\n    }, undefined);\n_c = Main;\n\nvar _c;\n$RefreshReg$(_c, \"Main\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdGVtcGxhdGVzL01haW4udHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQTZCO0FBR2lCO0FBTzlDLE1BQU1FLE9BQU8sQ0FBQ0Msc0JBQ1osOERBQUNDO1FBQUlDLFdBQVU7O1lBQ1pGLE1BQU1HLElBQUk7MEJBQ1gsOERBQUNGO2dCQUFJQyxXQUFVOztrQ0FDYiw4REFBQ0Q7d0JBQUlDLFdBQVU7a0NBQW1CRixNQUFNSSxRQUFROzs7Ozs7a0NBQ2hELDhEQUFDSDt3QkFBSUMsV0FBVTtrQ0FDYiw0RUFBQ0Q7c0NBQ0MsNEVBQUNJO2dDQUFHSCxXQUFVOztrREFDWiw4REFBQ0k7d0NBQUdKLFdBQVU7a0RBQ1osNEVBQUNMLGtEQUFJQTs0Q0FDSFUsTUFBSzs0Q0FDTEwsV0FBVTtzREFDWDs7Ozs7Ozs7Ozs7a0RBSUgsOERBQUNJO3dDQUFHSixXQUFVO2tEQUNaLDRFQUFDTCxrREFBSUE7NENBQ0hVLE1BQUs7NENBQ0xMLFdBQVU7c0RBQ1g7Ozs7Ozs7Ozs7O2tEQUlILDhEQUFDSTt3Q0FBR0osV0FBVTtrREFDWiw0RUFBQ0wsa0RBQUlBOzRDQUNIVSxNQUFLOzRDQUNMTCxXQUFVO3NEQUNYOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBT1QsOERBQUNEO3dCQUFJQyxXQUFVOzs0QkFBNEM7NEJBQzVDLElBQUlNLE9BQU9DLFdBQVc7NEJBQUc7NEJBQUVYLDZEQUFlOzRCQUFDOzRCQUFFOzBDQUMxRCw4REFBQ2E7Z0NBQUVKLE1BQUs7MENBQUk7Ozs7Ozs0QkFBYzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXJDNUJSO0FBaURVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy90ZW1wbGF0ZXMvTWFpbi50c3g/MDI2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xuaW1wb3J0IHR5cGUgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEFwcENvbmZpZyB9IGZyb20gJ0AvdXRpbHMvQXBwQ29uZmlnJztcblxudHlwZSBJTWFpblByb3BzID0ge1xuICBtZXRhOiBSZWFjdE5vZGU7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59O1xuXG5jb25zdCBNYWluID0gKHByb3BzOiBJTWFpblByb3BzKSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIHB4LTEgdGV4dC1ncmF5LTcwMCBhbnRpYWxpYXNlZFwiPlxuICAgIHtwcm9wcy5tZXRhfVxuICAgIDxkaXYgY2xhc3NOYW1lPVwibXgtYXV0b1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50IHRleHQteGxcIj57cHJvcHMuY2hpbGRyZW59PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvcmRlci10IHRleHQtY2VudGVyXCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImZsZXggZmxleC13cmFwIGp1c3RpZnktY2VudGVyIHRleHQteGxcIj5cbiAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJtci02XCI+XG4gICAgICAgICAgICAgIDxMaW5rXG4gICAgICAgICAgICAgICAgaHJlZj1cIi9cIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJvcmRlci1ub25lIHRleHQtZ3JheS03MDAgaG92ZXI6dGV4dC1ncmF5LTkwMFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBIb21lXG4gICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibXItNlwiPlxuICAgICAgICAgICAgICA8TGlua1xuICAgICAgICAgICAgICAgIGhyZWY9XCIvYWJvdXQvXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3JkZXItbm9uZSB0ZXh0LWdyYXktNzAwIGhvdmVyOnRleHQtZ3JheS05MDBcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgQWJvdXRcbiAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJtci02XCI+XG4gICAgICAgICAgICAgIDxMaW5rXG4gICAgICAgICAgICAgICAgaHJlZj1cIi9ibG9nL1wiXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm9yZGVyLW5vbmUgdGV4dC1ncmF5LTcwMCBob3Zlcjp0ZXh0LWdyYXktOTAwXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIEJsb2dcbiAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCIgYm9yZGVyLWdyYXktMzAwIHB5LTggdGV4dC1jZW50ZXIgdGV4dC1zbVwiPlxuICAgICAgICDCqSBDb3B5cmlnaHQge25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKX0ge0FwcENvbmZpZy50aXRsZX0ueycgJ31cbiAgICAgICAgPGEgaHJlZj1cIiNcIj5TdG9yZSBuYW1lPC9hPi5cbiAgICAgICAgey8qXG4gICAgICAgICAqIFBMRUFTRSBSRUFEIFRISVMgU0VDVElPTlxuICAgICAgICAgKiBJJ20gYW4gaW5kaWUgbWFrZXIgd2l0aCBsaW1pdGVkIHJlc291cmNlcyBhbmQgZnVuZHMsIEknbGwgcmVhbGx5IGFwcHJlY2lhdGUgaWYgeW91IGNvdWxkIGhhdmUgYSBsaW5rIHRvIG15IHdlYnNpdGUuXG4gICAgICAgICAqIFRoZSBsaW5rIGRvZXNuJ3QgbmVlZCB0byBhcHBlYXIgb24gZXZlcnkgcGFnZXMsIG9uZSBsaW5rIG9uIG9uZSBwYWdlIGlzIGVub3VnaC5cbiAgICAgICAgICogRm9yIGV4YW1wbGUsIGluIHRoZSBgQWJvdXRgIHBhZ2UuIFRoYW5rIHlvdSBmb3IgeW91ciBzdXBwb3J0LCBpdCdsbCBtZWFuIGEgbG90IHRvIG1lLlxuICAgICAgICAgKi99XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4pO1xuXG5leHBvcnQgeyBNYWluIH07XG4iXSwibmFtZXMiOlsiTGluayIsIkFwcENvbmZpZyIsIk1haW4iLCJwcm9wcyIsImRpdiIsImNsYXNzTmFtZSIsIm1ldGEiLCJjaGlsZHJlbiIsInVsIiwibGkiLCJocmVmIiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwidGl0bGUiLCJhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/templates/Main.tsx\n"));

/***/ }),

/***/ "./src/utils/AppConfig.ts":
/*!********************************!*\
  !*** ./src/utils/AppConfig.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AppConfig\": function() { return /* binding */ AppConfig; }\n/* harmony export */ });\n// FIXME: Update this configuration file based on your project information\nconst AppConfig = {\n    site_name: \"Starter\",\n    title: \"Nextjs Starter\",\n    description: \"Starter code for your Nextjs checkout with Tailwind CSS\",\n    locale: \"en\"\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvQXBwQ29uZmlnLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwwRUFBMEU7QUFFbkUsTUFBTUEsWUFBWTtJQUN2QkMsV0FBVztJQUNYQyxPQUFPO0lBQ1BDLGFBQWE7SUFDYkMsUUFBUTtBQUNWLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3V0aWxzL0FwcENvbmZpZy50cz84YTliIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZJWE1FOiBVcGRhdGUgdGhpcyBjb25maWd1cmF0aW9uIGZpbGUgYmFzZWQgb24geW91ciBwcm9qZWN0IGluZm9ybWF0aW9uXG5cbmV4cG9ydCBjb25zdCBBcHBDb25maWcgPSB7XG4gIHNpdGVfbmFtZTogJ1N0YXJ0ZXInLFxuICB0aXRsZTogJ05leHRqcyBTdGFydGVyJyxcbiAgZGVzY3JpcHRpb246ICdTdGFydGVyIGNvZGUgZm9yIHlvdXIgTmV4dGpzIGNoZWNrb3V0IHdpdGggVGFpbHdpbmQgQ1NTJyxcbiAgbG9jYWxlOiAnZW4nLFxufTtcbiJdLCJuYW1lcyI6WyJBcHBDb25maWciLCJzaXRlX25hbWUiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwibG9jYWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/AppConfig.ts\n"));

/***/ }),

/***/ "./src/utils/product.ts":
/*!******************************!*\
  !*** ./src/utils/product.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getPrice\": function() { return /* binding */ getPrice; }\n/* harmony export */ });\nconst getPrice = (price, currency)=>Intl.NumberFormat(undefined, {\n        currency,\n        minimumFractionDigits: 2,\n        style: \"currency\"\n    }).format(parseFloat(price ? \"\".concat(price) : \"0\"));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcHJvZHVjdC50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsV0FBVyxDQUN0QkMsT0FDQUMsV0FFQUMsS0FBS0MsWUFBWSxDQUFDQyxXQUFXO1FBQzNCSDtRQUNBSSx1QkFBdUI7UUFDdkJDLE9BQU87SUFDVCxHQUFHQyxNQUFNLENBQUNDLFdBQVdSLFFBQVEsR0FBUyxPQUFOQSxTQUFVLEdBQUcsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvdXRpbHMvcHJvZHVjdC50cz8xZmM0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBnZXRQcmljZSA9IChcbiAgcHJpY2U6IHN0cmluZyB8IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgY3VycmVuY3k6IHN0cmluZ1xuKSA9PlxuICBJbnRsLk51bWJlckZvcm1hdCh1bmRlZmluZWQsIHtcbiAgICBjdXJyZW5jeSxcbiAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDIsXG4gICAgc3R5bGU6ICdjdXJyZW5jeScsXG4gIH0pLmZvcm1hdChwYXJzZUZsb2F0KHByaWNlID8gYCR7cHJpY2V9YCA6ICcwJykpO1xuIl0sIm5hbWVzIjpbImdldFByaWNlIiwicHJpY2UiLCJjdXJyZW5jeSIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJ1bmRlZmluZWQiLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJzdHlsZSIsImZvcm1hdCIsInBhcnNlRmxvYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/product.ts\n"));

/***/ }),

/***/ "./node_modules/next/head.js":
/*!***********************************!*\
  !*** ./node_modules/next/head.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/shared/lib/head */ \"./node_modules/next/dist/shared/lib/head.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlIQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzPzg4NDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3Qvc2hhcmVkL2xpYi9oZWFkJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/head.js\n"));

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/client/link */ \"./node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlHQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzPzc1YjMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvY2xpZW50L2xpbmsnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/link.js\n"));

/***/ }),

/***/ "./node_modules/swell-js/dist/swell.umd.min.js":
/*!*****************************************************!*\
  !*** ./node_modules/swell-js/dist/swell.umd.min.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\t0;\n})(this, (function () { 'use strict';\n\n\tfunction getAugmentedNamespace(n) {\n\t  var f = n.default;\n\t\tif (typeof f == \"function\") {\n\t\t\tvar a = function () {\n\t\t\t\treturn f.apply(this, arguments);\n\t\t\t};\n\t\t\ta.prototype = f.prototype;\n\t  } else a = {};\n\t  Object.defineProperty(a, '__esModule', {value: true});\n\t\tObject.keys(n).forEach(function (k) {\n\t\t\tvar d = Object.getOwnPropertyDescriptor(n, k);\n\t\t\tObject.defineProperty(a, k, d.get ? d : {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn n[k];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn a;\n\t}\n\n\t/* eslint complexity: [2, 18], max-statements: [2, 33] */\n\tvar shams = function hasSymbols() {\n\t\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\t\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\t\tvar obj = {};\n\t\tvar sym = Symbol('test');\n\t\tvar symObj = Object(sym);\n\t\tif (typeof sym === 'string') { return false; }\n\n\t\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\t\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t\t// if (sym instanceof Symbol) { return false; }\n\t\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\t\tvar symVal = 42;\n\t\tobj[sym] = symVal;\n\t\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\t\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\t\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\t\tvar syms = Object.getOwnPropertySymbols(obj);\n\t\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\t\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\t\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\n\tvar hasSymbolSham = shams;\n\n\tvar hasSymbols$1 = function hasNativeSymbols() {\n\t\tif (typeof origSymbol !== 'function') { return false; }\n\t\tif (typeof Symbol !== 'function') { return false; }\n\t\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\t\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\t\treturn hasSymbolSham();\n\t};\n\n\t/* eslint no-invalid-this: 1 */\n\n\tvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\n\tvar slice = Array.prototype.slice;\n\tvar toStr$1 = Object.prototype.toString;\n\tvar funcType = '[object Function]';\n\n\tvar implementation$1 = function bind(that) {\n\t    var target = this;\n\t    if (typeof target !== 'function' || toStr$1.call(target) !== funcType) {\n\t        throw new TypeError(ERROR_MESSAGE + target);\n\t    }\n\t    var args = slice.call(arguments, 1);\n\n\t    var bound;\n\t    var binder = function () {\n\t        if (this instanceof bound) {\n\t            var result = target.apply(\n\t                this,\n\t                args.concat(slice.call(arguments))\n\t            );\n\t            if (Object(result) === result) {\n\t                return result;\n\t            }\n\t            return this;\n\t        } else {\n\t            return target.apply(\n\t                that,\n\t                args.concat(slice.call(arguments))\n\t            );\n\t        }\n\t    };\n\n\t    var boundLength = Math.max(0, target.length - args.length);\n\t    var boundArgs = [];\n\t    for (var i = 0; i < boundLength; i++) {\n\t        boundArgs.push('$' + i);\n\t    }\n\n\t    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n\t    if (target.prototype) {\n\t        var Empty = function Empty() {};\n\t        Empty.prototype = target.prototype;\n\t        bound.prototype = new Empty();\n\t        Empty.prototype = null;\n\t    }\n\n\t    return bound;\n\t};\n\n\tvar implementation = implementation$1;\n\n\tvar functionBind = Function.prototype.bind || implementation;\n\n\tvar bind$1 = functionBind;\n\n\tvar src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);\n\n\tvar undefined$1;\n\n\tvar $SyntaxError = SyntaxError;\n\tvar $Function = Function;\n\tvar $TypeError$1 = TypeError;\n\n\t// eslint-disable-next-line consistent-return\n\tvar getEvalledConstructor = function (expressionSyntax) {\n\t\ttry {\n\t\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t\t} catch (e) {}\n\t};\n\n\tvar $gOPD = Object.getOwnPropertyDescriptor;\n\tif ($gOPD) {\n\t\ttry {\n\t\t\t$gOPD({}, '');\n\t\t} catch (e) {\n\t\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t\t}\n\t}\n\n\tvar throwTypeError = function () {\n\t\tthrow new $TypeError$1();\n\t};\n\tvar ThrowTypeError = $gOPD\n\t\t? (function () {\n\t\t\ttry {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\t\treturn throwTypeError;\n\t\t\t} catch (calleeThrows) {\n\t\t\t\ttry {\n\t\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t\t} catch (gOPDthrows) {\n\t\t\t\t\treturn throwTypeError;\n\t\t\t\t}\n\t\t\t}\n\t\t}())\n\t\t: throwTypeError;\n\n\tvar hasSymbols = hasSymbols$1();\n\n\tvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\n\tvar needsEval = {};\n\n\tvar TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);\n\n\tvar INTRINSICS = {\n\t\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,\n\t\t'%Array%': Array,\n\t\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,\n\t\t'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined$1,\n\t\t'%AsyncFromSyncIteratorPrototype%': undefined$1,\n\t\t'%AsyncFunction%': needsEval,\n\t\t'%AsyncGenerator%': needsEval,\n\t\t'%AsyncGeneratorFunction%': needsEval,\n\t\t'%AsyncIteratorPrototype%': needsEval,\n\t\t'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,\n\t\t'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,\n\t\t'%Boolean%': Boolean,\n\t\t'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,\n\t\t'%Date%': Date,\n\t\t'%decodeURI%': decodeURI,\n\t\t'%decodeURIComponent%': decodeURIComponent,\n\t\t'%encodeURI%': encodeURI,\n\t\t'%encodeURIComponent%': encodeURIComponent,\n\t\t'%Error%': Error,\n\t\t'%eval%': eval, // eslint-disable-line no-eval\n\t\t'%EvalError%': EvalError,\n\t\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,\n\t\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,\n\t\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,\n\t\t'%Function%': $Function,\n\t\t'%GeneratorFunction%': needsEval,\n\t\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,\n\t\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,\n\t\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,\n\t\t'%isFinite%': isFinite,\n\t\t'%isNaN%': isNaN,\n\t\t'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined$1,\n\t\t'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,\n\t\t'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,\n\t\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Map()[Symbol.iterator]()),\n\t\t'%Math%': Math,\n\t\t'%Number%': Number,\n\t\t'%Object%': Object,\n\t\t'%parseFloat%': parseFloat,\n\t\t'%parseInt%': parseInt,\n\t\t'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,\n\t\t'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,\n\t\t'%RangeError%': RangeError,\n\t\t'%ReferenceError%': ReferenceError,\n\t\t'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,\n\t\t'%RegExp%': RegExp,\n\t\t'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,\n\t\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Set()[Symbol.iterator]()),\n\t\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,\n\t\t'%String%': String,\n\t\t'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined$1,\n\t\t'%Symbol%': hasSymbols ? Symbol : undefined$1,\n\t\t'%SyntaxError%': $SyntaxError,\n\t\t'%ThrowTypeError%': ThrowTypeError,\n\t\t'%TypedArray%': TypedArray,\n\t\t'%TypeError%': $TypeError$1,\n\t\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,\n\t\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,\n\t\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,\n\t\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,\n\t\t'%URIError%': URIError,\n\t\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,\n\t\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,\n\t\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet\n\t};\n\n\tvar doEval = function doEval(name) {\n\t\tvar value;\n\t\tif (name === '%AsyncFunction%') {\n\t\t\tvalue = getEvalledConstructor('async function () {}');\n\t\t} else if (name === '%GeneratorFunction%') {\n\t\t\tvalue = getEvalledConstructor('function* () {}');\n\t\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\t\tvalue = getEvalledConstructor('async function* () {}');\n\t\t} else if (name === '%AsyncGenerator%') {\n\t\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\t\tif (fn) {\n\t\t\t\tvalue = fn.prototype;\n\t\t\t}\n\t\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\t\tvar gen = doEval('%AsyncGenerator%');\n\t\t\tif (gen) {\n\t\t\t\tvalue = getProto(gen.prototype);\n\t\t\t}\n\t\t}\n\n\t\tINTRINSICS[name] = value;\n\n\t\treturn value;\n\t};\n\n\tvar LEGACY_ALIASES = {\n\t\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t\t'%DatePrototype%': ['Date', 'prototype'],\n\t\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t\t'%JSONParse%': ['JSON', 'parse'],\n\t\t'%JSONStringify%': ['JSON', 'stringify'],\n\t\t'%MapPrototype%': ['Map', 'prototype'],\n\t\t'%NumberPrototype%': ['Number', 'prototype'],\n\t\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t\t'%Promise_all%': ['Promise', 'all'],\n\t\t'%Promise_reject%': ['Promise', 'reject'],\n\t\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t\t'%SetPrototype%': ['Set', 'prototype'],\n\t\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t\t'%StringPrototype%': ['String', 'prototype'],\n\t\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n\t};\n\n\tvar bind = functionBind;\n\tvar hasOwn$1 = src;\n\tvar $concat = bind.call(Function.call, Array.prototype.concat);\n\tvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\n\tvar $replace = bind.call(Function.call, String.prototype.replace);\n\tvar $strSlice = bind.call(Function.call, String.prototype.slice);\n\n\t/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\n\tvar rePropName$1 = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\n\tvar reEscapeChar$1 = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\n\tvar stringToPath$1 = function stringToPath(string) {\n\t\tvar first = $strSlice(string, 0, 1);\n\t\tvar last = $strSlice(string, -1);\n\t\tif (first === '%' && last !== '%') {\n\t\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t\t} else if (last === '%' && first !== '%') {\n\t\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t\t}\n\t\tvar result = [];\n\t\t$replace(string, rePropName$1, function (match, number, quote, subString) {\n\t\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar$1, '$1') : number || match;\n\t\t});\n\t\treturn result;\n\t};\n\t/* end adaptation */\n\n\tvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\t\tvar intrinsicName = name;\n\t\tvar alias;\n\t\tif (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {\n\t\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\t\tintrinsicName = '%' + alias[0] + '%';\n\t\t}\n\n\t\tif (hasOwn$1(INTRINSICS, intrinsicName)) {\n\t\t\tvar value = INTRINSICS[intrinsicName];\n\t\t\tif (value === needsEval) {\n\t\t\t\tvalue = doEval(intrinsicName);\n\t\t\t}\n\t\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\t\tthrow new $TypeError$1('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\talias: alias,\n\t\t\t\tname: intrinsicName,\n\t\t\t\tvalue: value\n\t\t\t};\n\t\t}\n\n\t\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n\t};\n\n\tvar getIntrinsic = function GetIntrinsic(name, allowMissing) {\n\t\tif (typeof name !== 'string' || name.length === 0) {\n\t\t\tthrow new $TypeError$1('intrinsic name must be a non-empty string');\n\t\t}\n\t\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\t\tthrow new $TypeError$1('\"allowMissing\" argument must be a boolean');\n\t\t}\n\n\t\tvar parts = stringToPath$1(name);\n\t\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\t\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\t\tvar intrinsicRealName = intrinsic.name;\n\t\tvar value = intrinsic.value;\n\t\tvar skipFurtherCaching = false;\n\n\t\tvar alias = intrinsic.alias;\n\t\tif (alias) {\n\t\t\tintrinsicBaseName = alias[0];\n\t\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t\t}\n\n\t\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\t\tvar part = parts[i];\n\t\t\tvar first = $strSlice(part, 0, 1);\n\t\t\tvar last = $strSlice(part, -1);\n\t\t\tif (\n\t\t\t\t(\n\t\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t\t)\n\t\t\t\t&& first !== last\n\t\t\t) {\n\t\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t\t}\n\t\t\tif (part === 'constructor' || !isOwn) {\n\t\t\t\tskipFurtherCaching = true;\n\t\t\t}\n\n\t\t\tintrinsicBaseName += '.' + part;\n\t\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\t\tif (hasOwn$1(INTRINSICS, intrinsicRealName)) {\n\t\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t\t} else if (value != null) {\n\t\t\t\tif (!(part in value)) {\n\t\t\t\t\tif (!allowMissing) {\n\t\t\t\t\t\tthrow new $TypeError$1('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t\t}\n\t\t\t\t\treturn void undefined$1;\n\t\t\t\t}\n\t\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t\t// itself.\n\t\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\t\tvalue = desc.get;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = value[part];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tisOwn = hasOwn$1(value, part);\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\n\t\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t};\n\n\tvar callBind$1 = {exports: {}};\n\n\t(function (module) {\n\n\t\tvar bind = functionBind;\n\t\tvar GetIntrinsic = getIntrinsic;\n\n\t\tvar $apply = GetIntrinsic('%Function.prototype.apply%');\n\t\tvar $call = GetIntrinsic('%Function.prototype.call%');\n\t\tvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\n\t\tvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\n\t\tvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\n\t\tvar $max = GetIntrinsic('%Math.max%');\n\n\t\tif ($defineProperty) {\n\t\t\ttry {\n\t\t\t\t$defineProperty({}, 'a', { value: 1 });\n\t\t\t} catch (e) {\n\t\t\t\t// IE 8 has a broken defineProperty\n\t\t\t\t$defineProperty = null;\n\t\t\t}\n\t\t}\n\n\t\tmodule.exports = function callBind(originalFunction) {\n\t\t\tvar func = $reflectApply(bind, $call, arguments);\n\t\t\tif ($gOPD && $defineProperty) {\n\t\t\t\tvar desc = $gOPD(func, 'length');\n\t\t\t\tif (desc.configurable) {\n\t\t\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t\t\t$defineProperty(\n\t\t\t\t\t\tfunc,\n\t\t\t\t\t\t'length',\n\t\t\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn func;\n\t\t};\n\n\t\tvar applyBind = function applyBind() {\n\t\t\treturn $reflectApply(bind, $apply, arguments);\n\t\t};\n\n\t\tif ($defineProperty) {\n\t\t\t$defineProperty(module.exports, 'apply', { value: applyBind });\n\t\t} else {\n\t\t\tmodule.exports.apply = applyBind;\n\t\t}\n\t} (callBind$1));\n\n\tvar GetIntrinsic$1 = getIntrinsic;\n\n\tvar callBind = callBind$1.exports;\n\n\tvar $indexOf = callBind(GetIntrinsic$1('String.prototype.indexOf'));\n\n\tvar callBound$1 = function callBoundIntrinsic(name, allowMissing) {\n\t\tvar intrinsic = GetIntrinsic$1(name, !!allowMissing);\n\t\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\t\treturn callBind(intrinsic);\n\t\t}\n\t\treturn intrinsic;\n\t};\n\n\tvar global$1 = (typeof __webpack_require__.g !== \"undefined\" ? __webpack_require__.g :\n\t  typeof self !== \"undefined\" ? self :\n\t  typeof window !== \"undefined\" ? window : {});\n\n\tvar lookup = [];\n\tvar revLookup = [];\n\tvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\tvar inited = false;\n\tfunction init () {\n\t  inited = true;\n\t  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t  for (var i = 0, len = code.length; i < len; ++i) {\n\t    lookup[i] = code[i];\n\t    revLookup[code.charCodeAt(i)] = i;\n\t  }\n\n\t  revLookup['-'.charCodeAt(0)] = 62;\n\t  revLookup['_'.charCodeAt(0)] = 63;\n\t}\n\n\tfunction toByteArray (b64) {\n\t  if (!inited) {\n\t    init();\n\t  }\n\t  var i, j, l, tmp, placeHolders, arr;\n\t  var len = b64.length;\n\n\t  if (len % 4 > 0) {\n\t    throw new Error('Invalid string. Length must be a multiple of 4')\n\t  }\n\n\t  // the number of equal signs (place holders)\n\t  // if there are two placeholders, than the two characters before it\n\t  // represent one byte\n\t  // if there is only one, then the three characters before it represent 2 bytes\n\t  // this is just a cheap hack to not do indexOf twice\n\t  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n\t  // base64 is 4/3 + up to two characters of the original data\n\t  arr = new Arr(len * 3 / 4 - placeHolders);\n\n\t  // if there are placeholders, only get up to the last complete 4 chars\n\t  l = placeHolders > 0 ? len - 4 : len;\n\n\t  var L = 0;\n\n\t  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n\t    arr[L++] = (tmp >> 16) & 0xFF;\n\t    arr[L++] = (tmp >> 8) & 0xFF;\n\t    arr[L++] = tmp & 0xFF;\n\t  }\n\n\t  if (placeHolders === 2) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n\t    arr[L++] = tmp & 0xFF;\n\t  } else if (placeHolders === 1) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n\t    arr[L++] = (tmp >> 8) & 0xFF;\n\t    arr[L++] = tmp & 0xFF;\n\t  }\n\n\t  return arr\n\t}\n\n\tfunction tripletToBase64 (num) {\n\t  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n\t}\n\n\tfunction encodeChunk (uint8, start, end) {\n\t  var tmp;\n\t  var output = [];\n\t  for (var i = start; i < end; i += 3) {\n\t    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n\t    output.push(tripletToBase64(tmp));\n\t  }\n\t  return output.join('')\n\t}\n\n\tfunction fromByteArray (uint8) {\n\t  if (!inited) {\n\t    init();\n\t  }\n\t  var tmp;\n\t  var len = uint8.length;\n\t  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\t  var output = '';\n\t  var parts = [];\n\t  var maxChunkLength = 16383; // must be multiple of 3\n\n\t  // go through the array every three bytes, we'll deal with trailing stuff later\n\t  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n\t    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n\t  }\n\n\t  // pad the end with zeros, but make sure to not forget the extra bytes\n\t  if (extraBytes === 1) {\n\t    tmp = uint8[len - 1];\n\t    output += lookup[tmp >> 2];\n\t    output += lookup[(tmp << 4) & 0x3F];\n\t    output += '==';\n\t  } else if (extraBytes === 2) {\n\t    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n\t    output += lookup[tmp >> 10];\n\t    output += lookup[(tmp >> 4) & 0x3F];\n\t    output += lookup[(tmp << 2) & 0x3F];\n\t    output += '=';\n\t  }\n\n\t  parts.push(output);\n\n\t  return parts.join('')\n\t}\n\n\tfunction read (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m;\n\t  var eLen = nBytes * 8 - mLen - 1;\n\t  var eMax = (1 << eLen) - 1;\n\t  var eBias = eMax >> 1;\n\t  var nBits = -7;\n\t  var i = isLE ? (nBytes - 1) : 0;\n\t  var d = isLE ? -1 : 1;\n\t  var s = buffer[offset + i];\n\n\t  i += d;\n\n\t  e = s & ((1 << (-nBits)) - 1);\n\t  s >>= (-nBits);\n\t  nBits += eLen;\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n\t  m = e & ((1 << (-nBits)) - 1);\n\t  e >>= (-nBits);\n\t  nBits += mLen;\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n\t  if (e === 0) {\n\t    e = 1 - eBias;\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen);\n\t    e = e - eBias;\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\n\tfunction write (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c;\n\t  var eLen = nBytes * 8 - mLen - 1;\n\t  var eMax = (1 << eLen) - 1;\n\t  var eBias = eMax >> 1;\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n\t  var i = isLE ? 0 : (nBytes - 1);\n\t  var d = isLE ? 1 : -1;\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n\t  value = Math.abs(value);\n\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0;\n\t    e = eMax;\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2);\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--;\n\t      c *= 2;\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c;\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias);\n\t    }\n\t    if (value * c >= 2) {\n\t      e++;\n\t      c /= 2;\n\t    }\n\n\t    if (e + eBias >= eMax) {\n\t      m = 0;\n\t      e = eMax;\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen);\n\t      e = e + eBias;\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n\t      e = 0;\n\t    }\n\t  }\n\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n\t  e = (e << mLen) | m;\n\t  eLen += mLen;\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n\t  buffer[offset + i - d] |= s * 128;\n\t}\n\n\tvar toString$1 = {}.toString;\n\n\tvar isArray$6 = Array.isArray || function (arr) {\n\t  return toString$1.call(arr) == '[object Array]';\n\t};\n\n\t/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\n\tvar INSPECT_MAX_BYTES = 50;\n\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer$3.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined\n\t  ? global$1.TYPED_ARRAY_SUPPORT\n\t  : true;\n\n\tfunction kMaxLength () {\n\t  return Buffer$3.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\n\tfunction createBuffer (that, length) {\n\t  if (kMaxLength() < length) {\n\t    throw new RangeError('Invalid typed array length')\n\t  }\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = new Uint8Array(length);\n\t    that.__proto__ = Buffer$3.prototype;\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    if (that === null) {\n\t      that = new Buffer$3(length);\n\t    }\n\t    that.length = length;\n\t  }\n\n\t  return that\n\t}\n\n\t/**\n\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t * returns a single octet.\n\t *\n\t * The `Uint8Array` prototype remains unmodified.\n\t */\n\n\tfunction Buffer$3 (arg, encodingOrOffset, length) {\n\t  if (!Buffer$3.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$3)) {\n\t    return new Buffer$3(arg, encodingOrOffset, length)\n\t  }\n\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    if (typeof encodingOrOffset === 'string') {\n\t      throw new Error(\n\t        'If encoding is specified then the first argument must be a string'\n\t      )\n\t    }\n\t    return allocUnsafe$1(this, arg)\n\t  }\n\t  return from(this, arg, encodingOrOffset, length)\n\t}\n\n\tBuffer$3.poolSize = 8192; // not used by this implementation\n\n\t// TODO: Legacy, not needed anymore. Remove in next major version.\n\tBuffer$3._augment = function (arr) {\n\t  arr.__proto__ = Buffer$3.prototype;\n\t  return arr\n\t};\n\n\tfunction from (that, value, encodingOrOffset, length) {\n\t  if (typeof value === 'number') {\n\t    throw new TypeError('\"value\" argument must not be a number')\n\t  }\n\n\t  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n\t    return fromArrayBuffer(that, value, encodingOrOffset, length)\n\t  }\n\n\t  if (typeof value === 'string') {\n\t    return fromString(that, value, encodingOrOffset)\n\t  }\n\n\t  return fromObject(that, value)\n\t}\n\n\t/**\n\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t * if value is a number.\n\t * Buffer.from(str[, encoding])\n\t * Buffer.from(array)\n\t * Buffer.from(buffer)\n\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t **/\n\tBuffer$3.from = function (value, encodingOrOffset, length) {\n\t  return from(null, value, encodingOrOffset, length)\n\t};\n\n\tif (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t  Buffer$3.prototype.__proto__ = Uint8Array.prototype;\n\t  Buffer$3.__proto__ = Uint8Array;\n\t}\n\n\tfunction assertSize (size) {\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('\"size\" argument must be a number')\n\t  } else if (size < 0) {\n\t    throw new RangeError('\"size\" argument must not be negative')\n\t  }\n\t}\n\n\tfunction alloc (that, size, fill, encoding) {\n\t  assertSize(size);\n\t  if (size <= 0) {\n\t    return createBuffer(that, size)\n\t  }\n\t  if (fill !== undefined) {\n\t    // Only pay attention to encoding if it's a string. This\n\t    // prevents accidentally sending in a number that would\n\t    // be interpretted as a start offset.\n\t    return typeof encoding === 'string'\n\t      ? createBuffer(that, size).fill(fill, encoding)\n\t      : createBuffer(that, size).fill(fill)\n\t  }\n\t  return createBuffer(that, size)\n\t}\n\n\t/**\n\t * Creates a new filled Buffer instance.\n\t * alloc(size[, fill[, encoding]])\n\t **/\n\tBuffer$3.alloc = function (size, fill, encoding) {\n\t  return alloc(null, size, fill, encoding)\n\t};\n\n\tfunction allocUnsafe$1 (that, size) {\n\t  assertSize(size);\n\t  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\t  if (!Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < size; ++i) {\n\t      that[i] = 0;\n\t    }\n\t  }\n\t  return that\n\t}\n\n\t/**\n\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t * */\n\tBuffer$3.allocUnsafe = function (size) {\n\t  return allocUnsafe$1(null, size)\n\t};\n\t/**\n\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t */\n\tBuffer$3.allocUnsafeSlow = function (size) {\n\t  return allocUnsafe$1(null, size)\n\t};\n\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') {\n\t    encoding = 'utf8';\n\t  }\n\n\t  if (!Buffer$3.isEncoding(encoding)) {\n\t    throw new TypeError('\"encoding\" must be a valid string encoding')\n\t  }\n\n\t  var length = byteLength(string, encoding) | 0;\n\t  that = createBuffer(that, length);\n\n\t  var actual = that.write(string, encoding);\n\n\t  if (actual !== length) {\n\t    // Writing a hex string, for example, that contains invalid characters will\n\t    // cause everything after the first invalid character to be ignored. (e.g.\n\t    // 'abxxcd' will be treated as 'ab')\n\t    that = that.slice(0, actual);\n\t  }\n\n\t  return that\n\t}\n\n\tfunction fromArrayLike (that, array) {\n\t  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n\t  that = createBuffer(that, length);\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255;\n\t  }\n\t  return that\n\t}\n\n\tfunction fromArrayBuffer (that, array, byteOffset, length) {\n\t  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n\t  if (byteOffset < 0 || array.byteLength < byteOffset) {\n\t    throw new RangeError('\\'offset\\' is out of bounds')\n\t  }\n\n\t  if (array.byteLength < byteOffset + (length || 0)) {\n\t    throw new RangeError('\\'length\\' is out of bounds')\n\t  }\n\n\t  if (byteOffset === undefined && length === undefined) {\n\t    array = new Uint8Array(array);\n\t  } else if (length === undefined) {\n\t    array = new Uint8Array(array, byteOffset);\n\t  } else {\n\t    array = new Uint8Array(array, byteOffset, length);\n\t  }\n\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = array;\n\t    that.__proto__ = Buffer$3.prototype;\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromArrayLike(that, array);\n\t  }\n\t  return that\n\t}\n\n\tfunction fromObject (that, obj) {\n\t  if (internalIsBuffer(obj)) {\n\t    var len = checked(obj.length) | 0;\n\t    that = createBuffer(that, len);\n\n\t    if (that.length === 0) {\n\t      return that\n\t    }\n\n\t    obj.copy(that, 0, 0, len);\n\t    return that\n\t  }\n\n\t  if (obj) {\n\t    if ((typeof ArrayBuffer !== 'undefined' &&\n\t        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n\t      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n\t        return createBuffer(that, 0)\n\t      }\n\t      return fromArrayLike(that, obj)\n\t    }\n\n\t    if (obj.type === 'Buffer' && isArray$6(obj.data)) {\n\t      return fromArrayLike(that, obj.data)\n\t    }\n\t  }\n\n\t  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n\t}\n\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength()` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\tBuffer$3.isBuffer = isBuffer$3;\n\tfunction internalIsBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\n\tBuffer$3.compare = function compare (a, b) {\n\t  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\n\t  if (a === b) return 0\n\n\t  var x = a.length;\n\t  var y = b.length;\n\n\t  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n\t    if (a[i] !== b[i]) {\n\t      x = a[i];\n\t      y = b[i];\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t};\n\n\tBuffer$3.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'latin1':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t};\n\n\tBuffer$3.concat = function concat (list, length) {\n\t  if (!isArray$6(list)) {\n\t    throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t  }\n\n\t  if (list.length === 0) {\n\t    return Buffer$3.alloc(0)\n\t  }\n\n\t  var i;\n\t  if (length === undefined) {\n\t    length = 0;\n\t    for (i = 0; i < list.length; ++i) {\n\t      length += list[i].length;\n\t    }\n\t  }\n\n\t  var buffer = Buffer$3.allocUnsafe(length);\n\t  var pos = 0;\n\t  for (i = 0; i < list.length; ++i) {\n\t    var buf = list[i];\n\t    if (!internalIsBuffer(buf)) {\n\t      throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t    }\n\t    buf.copy(buffer, pos);\n\t    pos += buf.length;\n\t  }\n\t  return buffer\n\t};\n\n\tfunction byteLength (string, encoding) {\n\t  if (internalIsBuffer(string)) {\n\t    return string.length\n\t  }\n\t  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n\t      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n\t    return string.byteLength\n\t  }\n\t  if (typeof string !== 'string') {\n\t    string = '' + string;\n\t  }\n\n\t  var len = string.length;\n\t  if (len === 0) return 0\n\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false;\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'latin1':\n\t      case 'binary':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t      case undefined:\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase();\n\t        loweredCase = true;\n\t    }\n\t  }\n\t}\n\tBuffer$3.byteLength = byteLength;\n\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false;\n\n\t  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n\t  // property of a typed array.\n\n\t  // This behaves neither like String nor Uint8Array in that we set start/end\n\t  // to their upper/lower bounds if the value passed is out of range.\n\t  // undefined is handled specially as per ECMA-262 6th Edition,\n\t  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\t  if (start === undefined || start < 0) {\n\t    start = 0;\n\t  }\n\t  // Return early if start > this.length. Done here to prevent potential uint32\n\t  // coercion fail below.\n\t  if (start > this.length) {\n\t    return ''\n\t  }\n\n\t  if (end === undefined || end > this.length) {\n\t    end = this.length;\n\t  }\n\n\t  if (end <= 0) {\n\t    return ''\n\t  }\n\n\t  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\t  end >>>= 0;\n\t  start >>>= 0;\n\n\t  if (end <= start) {\n\t    return ''\n\t  }\n\n\t  if (!encoding) encoding = 'utf8';\n\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Slice(this, start, end)\n\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase();\n\t        loweredCase = true;\n\t    }\n\t  }\n\t}\n\n\t// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n\t// Buffer instances.\n\tBuffer$3.prototype._isBuffer = true;\n\n\tfunction swap (b, n, m) {\n\t  var i = b[n];\n\t  b[n] = b[m];\n\t  b[m] = i;\n\t}\n\n\tBuffer$3.prototype.swap16 = function swap16 () {\n\t  var len = this.length;\n\t  if (len % 2 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 16-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 2) {\n\t    swap(this, i, i + 1);\n\t  }\n\t  return this\n\t};\n\n\tBuffer$3.prototype.swap32 = function swap32 () {\n\t  var len = this.length;\n\t  if (len % 4 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 32-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 4) {\n\t    swap(this, i, i + 3);\n\t    swap(this, i + 1, i + 2);\n\t  }\n\t  return this\n\t};\n\n\tBuffer$3.prototype.swap64 = function swap64 () {\n\t  var len = this.length;\n\t  if (len % 8 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 64-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 8) {\n\t    swap(this, i, i + 7);\n\t    swap(this, i + 1, i + 6);\n\t    swap(this, i + 2, i + 5);\n\t    swap(this, i + 3, i + 4);\n\t  }\n\t  return this\n\t};\n\n\tBuffer$3.prototype.toString = function toString () {\n\t  var length = this.length | 0;\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t};\n\n\tBuffer$3.prototype.equals = function equals (b) {\n\t  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer$3.compare(this, b) === 0\n\t};\n\n\tBuffer$3.prototype.inspect = function inspect () {\n\t  var str = '';\n\t  var max = INSPECT_MAX_BYTES;\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n\t    if (this.length > max) str += ' ... ';\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t};\n\n\tBuffer$3.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n\t  if (!internalIsBuffer(target)) {\n\t    throw new TypeError('Argument must be a Buffer')\n\t  }\n\n\t  if (start === undefined) {\n\t    start = 0;\n\t  }\n\t  if (end === undefined) {\n\t    end = target ? target.length : 0;\n\t  }\n\t  if (thisStart === undefined) {\n\t    thisStart = 0;\n\t  }\n\t  if (thisEnd === undefined) {\n\t    thisEnd = this.length;\n\t  }\n\n\t  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n\t    throw new RangeError('out of range index')\n\t  }\n\n\t  if (thisStart >= thisEnd && start >= end) {\n\t    return 0\n\t  }\n\t  if (thisStart >= thisEnd) {\n\t    return -1\n\t  }\n\t  if (start >= end) {\n\t    return 1\n\t  }\n\n\t  start >>>= 0;\n\t  end >>>= 0;\n\t  thisStart >>>= 0;\n\t  thisEnd >>>= 0;\n\n\t  if (this === target) return 0\n\n\t  var x = thisEnd - thisStart;\n\t  var y = end - start;\n\t  var len = Math.min(x, y);\n\n\t  var thisCopy = this.slice(thisStart, thisEnd);\n\t  var targetCopy = target.slice(start, end);\n\n\t  for (var i = 0; i < len; ++i) {\n\t    if (thisCopy[i] !== targetCopy[i]) {\n\t      x = thisCopy[i];\n\t      y = targetCopy[i];\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t};\n\n\t// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n\t// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n\t//\n\t// Arguments:\n\t// - buffer - a Buffer to search\n\t// - val - a string, Buffer, or number\n\t// - byteOffset - an index into `buffer`; will be clamped to an int32\n\t// - encoding - an optional encoding, relevant is val is a string\n\t// - dir - true for indexOf, false for lastIndexOf\n\tfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n\t  // Empty buffer means no match\n\t  if (buffer.length === 0) return -1\n\n\t  // Normalize byteOffset\n\t  if (typeof byteOffset === 'string') {\n\t    encoding = byteOffset;\n\t    byteOffset = 0;\n\t  } else if (byteOffset > 0x7fffffff) {\n\t    byteOffset = 0x7fffffff;\n\t  } else if (byteOffset < -0x80000000) {\n\t    byteOffset = -0x80000000;\n\t  }\n\t  byteOffset = +byteOffset;  // Coerce to Number.\n\t  if (isNaN(byteOffset)) {\n\t    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n\t    byteOffset = dir ? 0 : (buffer.length - 1);\n\t  }\n\n\t  // Normalize byteOffset: negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\t  if (byteOffset >= buffer.length) {\n\t    if (dir) return -1\n\t    else byteOffset = buffer.length - 1;\n\t  } else if (byteOffset < 0) {\n\t    if (dir) byteOffset = 0;\n\t    else return -1\n\t  }\n\n\t  // Normalize val\n\t  if (typeof val === 'string') {\n\t    val = Buffer$3.from(val, encoding);\n\t  }\n\n\t  // Finally, search either indexOf (if dir is true) or lastIndexOf\n\t  if (internalIsBuffer(val)) {\n\t    // Special case: looking for empty string/buffer always fails\n\t    if (val.length === 0) {\n\t      return -1\n\t    }\n\t    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n\t  } else if (typeof val === 'number') {\n\t    val = val & 0xFF; // Search for a byte value [0-255]\n\t    if (Buffer$3.TYPED_ARRAY_SUPPORT &&\n\t        typeof Uint8Array.prototype.indexOf === 'function') {\n\t      if (dir) {\n\t        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n\t      } else {\n\t        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n\t      }\n\t    }\n\t    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n\t  }\n\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\n\tfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n\t  var indexSize = 1;\n\t  var arrLength = arr.length;\n\t  var valLength = val.length;\n\n\t  if (encoding !== undefined) {\n\t    encoding = String(encoding).toLowerCase();\n\t    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n\t        encoding === 'utf16le' || encoding === 'utf-16le') {\n\t      if (arr.length < 2 || val.length < 2) {\n\t        return -1\n\t      }\n\t      indexSize = 2;\n\t      arrLength /= 2;\n\t      valLength /= 2;\n\t      byteOffset /= 2;\n\t    }\n\t  }\n\n\t  function read (buf, i) {\n\t    if (indexSize === 1) {\n\t      return buf[i]\n\t    } else {\n\t      return buf.readUInt16BE(i * indexSize)\n\t    }\n\t  }\n\n\t  var i;\n\t  if (dir) {\n\t    var foundIndex = -1;\n\t    for (i = byteOffset; i < arrLength; i++) {\n\t      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n\t        if (foundIndex === -1) foundIndex = i;\n\t        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n\t      } else {\n\t        if (foundIndex !== -1) i -= i - foundIndex;\n\t        foundIndex = -1;\n\t      }\n\t    }\n\t  } else {\n\t    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\t    for (i = byteOffset; i >= 0; i--) {\n\t      var found = true;\n\t      for (var j = 0; j < valLength; j++) {\n\t        if (read(arr, i + j) !== read(val, j)) {\n\t          found = false;\n\t          break\n\t        }\n\t      }\n\t      if (found) return i\n\t    }\n\t  }\n\n\t  return -1\n\t}\n\n\tBuffer$3.prototype.includes = function includes (val, byteOffset, encoding) {\n\t  return this.indexOf(val, byteOffset, encoding) !== -1\n\t};\n\n\tBuffer$3.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n\t};\n\n\tBuffer$3.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n\t};\n\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0;\n\t  var remaining = buf.length - offset;\n\t  if (!length) {\n\t    length = remaining;\n\t  } else {\n\t    length = Number(length);\n\t    if (length > remaining) {\n\t      length = remaining;\n\t    }\n\t  }\n\n\t  // must be an even number of digits\n\t  var strLen = string.length;\n\t  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2;\n\t  }\n\t  for (var i = 0; i < length; ++i) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16);\n\t    if (isNaN(parsed)) return i\n\t    buf[offset + i] = parsed;\n\t  }\n\t  return i\n\t}\n\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\n\tfunction latin1Write (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tBuffer$3.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8';\n\t    length = this.length;\n\t    offset = 0;\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset;\n\t    length = this.length;\n\t    offset = 0;\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0;\n\t    if (isFinite(length)) {\n\t      length = length | 0;\n\t      if (encoding === undefined) encoding = 'utf8';\n\t    } else {\n\t      encoding = length;\n\t      length = undefined;\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    throw new Error(\n\t      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t    )\n\t  }\n\n\t  var remaining = this.length - offset;\n\t  if (length === undefined || length > remaining) length = remaining;\n\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('Attempt to write outside buffer bounds')\n\t  }\n\n\t  if (!encoding) encoding = 'utf8';\n\n\t  var loweredCase = false;\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Write(this, string, offset, length)\n\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase();\n\t        loweredCase = true;\n\t    }\n\t  }\n\t};\n\n\tBuffer$3.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t};\n\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return fromByteArray(buf)\n\t  } else {\n\t    return fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end);\n\t  var res = [];\n\n\t  var i = start;\n\t  while (i < end) {\n\t    var firstByte = buf[i];\n\t    var codePoint = null;\n\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t      : (firstByte > 0xDF) ? 3\n\t      : (firstByte > 0xBF) ? 2\n\t      : 1;\n\n\t    if (i + bytesPerSequence <= end) {\n\t      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte;\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1];\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint;\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1];\n\t          thirdByte = buf[i + 2];\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint;\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1];\n\t          thirdByte = buf[i + 2];\n\t          fourthByte = buf[i + 3];\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint;\n\t            }\n\t          }\n\t      }\n\t    }\n\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD;\n\t      bytesPerSequence = 1;\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000;\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n\t      codePoint = 0xDC00 | codePoint & 0x3FF;\n\t    }\n\n\t    res.push(codePoint);\n\t    i += bytesPerSequence;\n\t  }\n\n\t  return decodeCodePointsArray(res)\n\t}\n\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\n\tfunction decodeCodePointsArray (codePoints) {\n\t  var len = codePoints.length;\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  var res = '';\n\t  var i = 0;\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    );\n\t  }\n\t  return res\n\t}\n\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = '';\n\t  end = Math.min(buf.length, end);\n\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F);\n\t  }\n\t  return ret\n\t}\n\n\tfunction latin1Slice (buf, start, end) {\n\t  var ret = '';\n\t  end = Math.min(buf.length, end);\n\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i]);\n\t  }\n\t  return ret\n\t}\n\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length;\n\n\t  if (!start || start < 0) start = 0;\n\t  if (!end || end < 0 || end > len) end = len;\n\n\t  var out = '';\n\t  for (var i = start; i < end; ++i) {\n\t    out += toHex(buf[i]);\n\t  }\n\t  return out\n\t}\n\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end);\n\t  var res = '';\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n\t  }\n\t  return res\n\t}\n\n\tBuffer$3.prototype.slice = function slice (start, end) {\n\t  var len = this.length;\n\t  start = ~~start;\n\t  end = end === undefined ? len : ~~end;\n\n\t  if (start < 0) {\n\t    start += len;\n\t    if (start < 0) start = 0;\n\t  } else if (start > len) {\n\t    start = len;\n\t  }\n\n\t  if (end < 0) {\n\t    end += len;\n\t    if (end < 0) end = 0;\n\t  } else if (end > len) {\n\t    end = len;\n\t  }\n\n\t  if (end < start) end = start;\n\n\t  var newBuf;\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = this.subarray(start, end);\n\t    newBuf.__proto__ = Buffer$3.prototype;\n\t  } else {\n\t    var sliceLen = end - start;\n\t    newBuf = new Buffer$3(sliceLen, undefined);\n\t    for (var i = 0; i < sliceLen; ++i) {\n\t      newBuf[i] = this[i + start];\n\t    }\n\t  }\n\n\t  return newBuf\n\t};\n\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\n\tBuffer$3.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0;\n\t  byteLength = byteLength | 0;\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n\t  var val = this[offset];\n\t  var mul = 1;\n\t  var i = 0;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul;\n\t  }\n\n\t  return val\n\t};\n\n\tBuffer$3.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0;\n\t  byteLength = byteLength | 0;\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length);\n\t  }\n\n\t  var val = this[offset + --byteLength];\n\t  var mul = 1;\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul;\n\t  }\n\n\t  return val\n\t};\n\n\tBuffer$3.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length);\n\t  return this[offset]\n\t};\n\n\tBuffer$3.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  return this[offset] | (this[offset + 1] << 8)\n\t};\n\n\tBuffer$3.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  return (this[offset] << 8) | this[offset + 1]\n\t};\n\n\tBuffer$3.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t};\n\n\tBuffer$3.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t};\n\n\tBuffer$3.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0;\n\t  byteLength = byteLength | 0;\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n\t  var val = this[offset];\n\t  var mul = 1;\n\t  var i = 0;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul;\n\t  }\n\t  mul *= 0x80;\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n\t  return val\n\t};\n\n\tBuffer$3.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0;\n\t  byteLength = byteLength | 0;\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n\t  var i = byteLength;\n\t  var mul = 1;\n\t  var val = this[offset + --i];\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul;\n\t  }\n\t  mul *= 0x80;\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n\t  return val\n\t};\n\n\tBuffer$3.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length);\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t};\n\n\tBuffer$3.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  var val = this[offset] | (this[offset + 1] << 8);\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t};\n\n\tBuffer$3.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  var val = this[offset + 1] | (this[offset] << 8);\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t};\n\n\tBuffer$3.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t};\n\n\tBuffer$3.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t};\n\n\tBuffer$3.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\t  return read(this, offset, true, 23, 4)\n\t};\n\n\tBuffer$3.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\t  return read(this, offset, false, 23, 4)\n\t};\n\n\tBuffer$3.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length);\n\t  return read(this, offset, true, 52, 8)\n\t};\n\n\tBuffer$3.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length);\n\t  return read(this, offset, false, 52, 8)\n\t};\n\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t}\n\n\tBuffer$3.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  byteLength = byteLength | 0;\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0);\n\t  }\n\n\t  var mul = 1;\n\t  var i = 0;\n\t  this[offset] = value & 0xFF;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer$3.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  byteLength = byteLength | 0;\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0);\n\t  }\n\n\t  var i = byteLength - 1;\n\t  var mul = 1;\n\t  this[offset + i] = value & 0xFF;\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer$3.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n\t  if (!Buffer$3.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n\t  this[offset] = (value & 0xff);\n\t  return offset + 1\n\t};\n\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1;\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8;\n\t  }\n\t}\n\n\tBuffer$3.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff);\n\t    this[offset + 1] = (value >>> 8);\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true);\n\t  }\n\t  return offset + 2\n\t};\n\n\tBuffer$3.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8);\n\t    this[offset + 1] = (value & 0xff);\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false);\n\t  }\n\t  return offset + 2\n\t};\n\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1;\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n\t  }\n\t}\n\n\tBuffer$3.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24);\n\t    this[offset + 2] = (value >>> 16);\n\t    this[offset + 1] = (value >>> 8);\n\t    this[offset] = (value & 0xff);\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true);\n\t  }\n\t  return offset + 4\n\t};\n\n\tBuffer$3.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24);\n\t    this[offset + 1] = (value >>> 16);\n\t    this[offset + 2] = (value >>> 8);\n\t    this[offset + 3] = (value & 0xff);\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false);\n\t  }\n\t  return offset + 4\n\t};\n\n\tBuffer$3.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1);\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n\t  }\n\n\t  var i = 0;\n\t  var mul = 1;\n\t  var sub = 0;\n\t  this[offset] = value & 0xFF;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n\t      sub = 1;\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer$3.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1);\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n\t  }\n\n\t  var i = byteLength - 1;\n\t  var mul = 1;\n\t  var sub = 0;\n\t  this[offset + i] = value & 0xFF;\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n\t      sub = 1;\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer$3.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n\t  if (!Buffer$3.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n\t  if (value < 0) value = 0xff + value + 1;\n\t  this[offset] = (value & 0xff);\n\t  return offset + 1\n\t};\n\n\tBuffer$3.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff);\n\t    this[offset + 1] = (value >>> 8);\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true);\n\t  }\n\t  return offset + 2\n\t};\n\n\tBuffer$3.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8);\n\t    this[offset + 1] = (value & 0xff);\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false);\n\t  }\n\t  return offset + 2\n\t};\n\n\tBuffer$3.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff);\n\t    this[offset + 1] = (value >>> 8);\n\t    this[offset + 2] = (value >>> 16);\n\t    this[offset + 3] = (value >>> 24);\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true);\n\t  }\n\t  return offset + 4\n\t};\n\n\tBuffer$3.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset | 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\t  if (value < 0) value = 0xffffffff + value + 1;\n\t  if (Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24);\n\t    this[offset + 1] = (value >>> 16);\n\t    this[offset + 2] = (value >>> 8);\n\t    this[offset + 3] = (value & 0xff);\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false);\n\t  }\n\t  return offset + 4\n\t};\n\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t  if (offset < 0) throw new RangeError('Index out of range')\n\t}\n\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4);\n\t  }\n\t  write(buf, value, offset, littleEndian, 23, 4);\n\t  return offset + 4\n\t}\n\n\tBuffer$3.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t};\n\n\tBuffer$3.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t};\n\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8);\n\t  }\n\t  write(buf, value, offset, littleEndian, 52, 8);\n\t  return offset + 8\n\t}\n\n\tBuffer$3.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t};\n\n\tBuffer$3.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t};\n\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer$3.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0;\n\t  if (!end && end !== 0) end = this.length;\n\t  if (targetStart >= target.length) targetStart = target.length;\n\t  if (!targetStart) targetStart = 0;\n\t  if (end > 0 && end < start) end = start;\n\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length;\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start;\n\t  }\n\n\t  var len = end - start;\n\t  var i;\n\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; --i) {\n\t      target[i + targetStart] = this[i + start];\n\t    }\n\t  } else if (len < 1000 || !Buffer$3.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; ++i) {\n\t      target[i + targetStart] = this[i + start];\n\t    }\n\t  } else {\n\t    Uint8Array.prototype.set.call(\n\t      target,\n\t      this.subarray(start, start + len),\n\t      targetStart\n\t    );\n\t  }\n\n\t  return len\n\t};\n\n\t// Usage:\n\t//    buffer.fill(number[, offset[, end]])\n\t//    buffer.fill(buffer[, offset[, end]])\n\t//    buffer.fill(string[, offset[, end]][, encoding])\n\tBuffer$3.prototype.fill = function fill (val, start, end, encoding) {\n\t  // Handle string cases:\n\t  if (typeof val === 'string') {\n\t    if (typeof start === 'string') {\n\t      encoding = start;\n\t      start = 0;\n\t      end = this.length;\n\t    } else if (typeof end === 'string') {\n\t      encoding = end;\n\t      end = this.length;\n\t    }\n\t    if (val.length === 1) {\n\t      var code = val.charCodeAt(0);\n\t      if (code < 256) {\n\t        val = code;\n\t      }\n\t    }\n\t    if (encoding !== undefined && typeof encoding !== 'string') {\n\t      throw new TypeError('encoding must be a string')\n\t    }\n\t    if (typeof encoding === 'string' && !Buffer$3.isEncoding(encoding)) {\n\t      throw new TypeError('Unknown encoding: ' + encoding)\n\t    }\n\t  } else if (typeof val === 'number') {\n\t    val = val & 255;\n\t  }\n\n\t  // Invalid ranges are not set to a default, so can range check early.\n\t  if (start < 0 || this.length < start || this.length < end) {\n\t    throw new RangeError('Out of range index')\n\t  }\n\n\t  if (end <= start) {\n\t    return this\n\t  }\n\n\t  start = start >>> 0;\n\t  end = end === undefined ? this.length : end >>> 0;\n\n\t  if (!val) val = 0;\n\n\t  var i;\n\t  if (typeof val === 'number') {\n\t    for (i = start; i < end; ++i) {\n\t      this[i] = val;\n\t    }\n\t  } else {\n\t    var bytes = internalIsBuffer(val)\n\t      ? val\n\t      : utf8ToBytes(new Buffer$3(val, encoding).toString());\n\t    var len = bytes.length;\n\t    for (i = 0; i < end - start; ++i) {\n\t      this[i + start] = bytes[i % len];\n\t    }\n\t  }\n\n\t  return this\n\t};\n\n\t// HELPER FUNCTIONS\n\t// ================\n\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '=';\n\t  }\n\t  return str\n\t}\n\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity;\n\t  var codePoint;\n\t  var length = string.length;\n\t  var leadSurrogate = null;\n\t  var bytes = [];\n\n\t  for (var i = 0; i < length; ++i) {\n\t    codePoint = string.charCodeAt(i);\n\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t          continue\n\t        }\n\n\t        // valid lead\n\t        leadSurrogate = codePoint;\n\n\t        continue\n\t      }\n\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t        leadSurrogate = codePoint;\n\t        continue\n\t      }\n\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t    }\n\n\t    leadSurrogate = null;\n\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint);\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      );\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      );\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      );\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\n\t  return bytes\n\t}\n\n\tfunction asciiToBytes (str) {\n\t  var byteArray = [];\n\t  for (var i = 0; i < str.length; ++i) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF);\n\t  }\n\t  return byteArray\n\t}\n\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo;\n\t  var byteArray = [];\n\t  for (var i = 0; i < str.length; ++i) {\n\t    if ((units -= 2) < 0) break\n\n\t    c = str.charCodeAt(i);\n\t    hi = c >> 8;\n\t    lo = c % 256;\n\t    byteArray.push(lo);\n\t    byteArray.push(hi);\n\t  }\n\n\t  return byteArray\n\t}\n\n\n\tfunction base64ToBytes (str) {\n\t  return toByteArray(base64clean(str))\n\t}\n\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; ++i) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i];\n\t  }\n\t  return i\n\t}\n\n\tfunction isnan (val) {\n\t  return val !== val // eslint-disable-line no-self-compare\n\t}\n\n\n\t// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n\t// The _isBuffer check is for Safari 5-7 support, because it's missing\n\t// Object.prototype.constructor. Remove this eventually\n\tfunction isBuffer$3(obj) {\n\t  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n\t}\n\n\tfunction isFastBuffer (obj) {\n\t  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n\t}\n\n\t// For Node v0.10 support. Remove this eventually.\n\tfunction isSlowBuffer (obj) {\n\t  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n\t}\n\n\t// shim for using process in browser\n\t// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\tvar cachedSetTimeout = defaultSetTimout;\n\tvar cachedClearTimeout = defaultClearTimeout;\n\tif (typeof global$1.setTimeout === 'function') {\n\t    cachedSetTimeout = setTimeout;\n\t}\n\tif (typeof global$1.clearTimeout === 'function') {\n\t    cachedClearTimeout = clearTimeout;\n\t}\n\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\n\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\n\n\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\tfunction nextTick(fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t}\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tvar title = 'browser';\n\tvar platform = 'browser';\n\tvar browser = true;\n\tvar env = {};\n\tvar argv = [];\n\tvar version = ''; // empty string to avoid regexp issues\n\tvar versions = {};\n\tvar release = {};\n\tvar config = {};\n\n\tfunction noop$1() {}\n\n\tvar on = noop$1;\n\tvar addListener = noop$1;\n\tvar once = noop$1;\n\tvar off = noop$1;\n\tvar removeListener = noop$1;\n\tvar removeAllListeners = noop$1;\n\tvar emit = noop$1;\n\n\tfunction binding(name) {\n\t    throw new Error('process.binding is not supported');\n\t}\n\n\tfunction cwd () { return '/' }\n\tfunction chdir (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t}function umask() { return 0; }\n\n\t// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\n\tvar performance = global$1.performance || {};\n\tvar performanceNow =\n\t  performance.now        ||\n\t  performance.mozNow     ||\n\t  performance.msNow      ||\n\t  performance.oNow       ||\n\t  performance.webkitNow  ||\n\t  function(){ return (new Date()).getTime() };\n\n\t// generate timestamp or delta\n\t// see http://nodejs.org/api/process.html#process_process_hrtime\n\tfunction hrtime(previousTimestamp){\n\t  var clocktime = performanceNow.call(performance)*1e-3;\n\t  var seconds = Math.floor(clocktime);\n\t  var nanoseconds = Math.floor((clocktime%1)*1e9);\n\t  if (previousTimestamp) {\n\t    seconds = seconds - previousTimestamp[0];\n\t    nanoseconds = nanoseconds - previousTimestamp[1];\n\t    if (nanoseconds<0) {\n\t      seconds--;\n\t      nanoseconds += 1e9;\n\t    }\n\t  }\n\t  return [seconds,nanoseconds]\n\t}\n\n\tvar startTime = new Date();\n\tfunction uptime() {\n\t  var currentTime = new Date();\n\t  var dif = currentTime - startTime;\n\t  return dif / 1000;\n\t}\n\n\tvar browser$1 = {\n\t  nextTick: nextTick,\n\t  title: title,\n\t  browser: browser,\n\t  env: env,\n\t  argv: argv,\n\t  version: version,\n\t  versions: versions,\n\t  on: on,\n\t  addListener: addListener,\n\t  once: once,\n\t  off: off,\n\t  removeListener: removeListener,\n\t  removeAllListeners: removeAllListeners,\n\t  emit: emit,\n\t  binding: binding,\n\t  cwd: cwd,\n\t  chdir: chdir,\n\t  umask: umask,\n\t  hrtime: hrtime,\n\t  platform: platform,\n\t  release: release,\n\t  config: config,\n\t  uptime: uptime\n\t};\n\n\tvar inherits;\n\tif (typeof Object.create === 'function'){\n\t  inherits = function inherits(ctor, superCtor) {\n\t    // implementation from standard node.js 'util' module\n\t    ctor.super_ = superCtor;\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  inherits = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor;\n\t    var TempCtor = function () {};\n\t    TempCtor.prototype = superCtor.prototype;\n\t    ctor.prototype = new TempCtor();\n\t    ctor.prototype.constructor = ctor;\n\t  };\n\t}\n\tvar inherits$1 = inherits;\n\n\tvar formatRegExp = /%[sdj%]/g;\n\tfunction format(f) {\n\t  if (!isString$1(f)) {\n\t    var objects = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      objects.push(inspect$1(arguments[i]));\n\t    }\n\t    return objects.join(' ');\n\t  }\n\n\t  var i = 1;\n\t  var args = arguments;\n\t  var len = args.length;\n\t  var str = String(f).replace(formatRegExp, function(x) {\n\t    if (x === '%%') return '%';\n\t    if (i >= len) return x;\n\t    switch (x) {\n\t      case '%s': return String(args[i++]);\n\t      case '%d': return Number(args[i++]);\n\t      case '%j':\n\t        try {\n\t          return JSON.stringify(args[i++]);\n\t        } catch (_) {\n\t          return '[Circular]';\n\t        }\n\t      default:\n\t        return x;\n\t    }\n\t  });\n\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t    if (isNull(x) || !isObject$2(x)) {\n\t      str += ' ' + x;\n\t    } else {\n\t      str += ' ' + inspect$1(x);\n\t    }\n\t  }\n\t  return str;\n\t}\n\n\t// Mark that a method should not be used.\n\t// Returns a modified function which warns once by default.\n\t// If --no-deprecation is set, then it is a no-op.\n\tfunction deprecate(fn, msg) {\n\t  // Allow for deprecating things in the process of starting up.\n\t  if (isUndefined(global$1.process)) {\n\t    return function() {\n\t      return deprecate(fn, msg).apply(this, arguments);\n\t    };\n\t  }\n\n\t  if (browser$1.noDeprecation === true) {\n\t    return fn;\n\t  }\n\n\t  var warned = false;\n\t  function deprecated() {\n\t    if (!warned) {\n\t      if (browser$1.throwDeprecation) {\n\t        throw new Error(msg);\n\t      } else if (browser$1.traceDeprecation) {\n\t        console.trace(msg);\n\t      } else {\n\t        console.error(msg);\n\t      }\n\t      warned = true;\n\t    }\n\t    return fn.apply(this, arguments);\n\t  }\n\n\t  return deprecated;\n\t}\n\n\tvar debugs = {};\n\tvar debugEnviron;\n\tfunction debuglog(set) {\n\t  if (isUndefined(debugEnviron))\n\t    debugEnviron = browser$1.env.NODE_DEBUG || '';\n\t  set = set.toUpperCase();\n\t  if (!debugs[set]) {\n\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t      var pid = 0;\n\t      debugs[set] = function() {\n\t        var msg = format.apply(null, arguments);\n\t        console.error('%s %d: %s', set, pid, msg);\n\t      };\n\t    } else {\n\t      debugs[set] = function() {};\n\t    }\n\t  }\n\t  return debugs[set];\n\t}\n\n\t/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Object} opts Optional options object that alters the output.\n\t */\n\t/* legacy: obj, showHidden, depth, colors*/\n\tfunction inspect$1(obj, opts) {\n\t  // default options\n\t  var ctx = {\n\t    seen: [],\n\t    stylize: stylizeNoColor\n\t  };\n\t  // legacy...\n\t  if (arguments.length >= 3) ctx.depth = arguments[2];\n\t  if (arguments.length >= 4) ctx.colors = arguments[3];\n\t  if (isBoolean$1(opts)) {\n\t    // legacy...\n\t    ctx.showHidden = opts;\n\t  } else if (opts) {\n\t    // got an \"options\" object\n\t    _extend(ctx, opts);\n\t  }\n\t  // set default options\n\t  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n\t  if (isUndefined(ctx.depth)) ctx.depth = 2;\n\t  if (isUndefined(ctx.colors)) ctx.colors = false;\n\t  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n\t  if (ctx.colors) ctx.stylize = stylizeWithColor;\n\t  return formatValue(ctx, obj, ctx.depth);\n\t}\n\n\t// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\tinspect$1.colors = {\n\t  'bold' : [1, 22],\n\t  'italic' : [3, 23],\n\t  'underline' : [4, 24],\n\t  'inverse' : [7, 27],\n\t  'white' : [37, 39],\n\t  'grey' : [90, 39],\n\t  'black' : [30, 39],\n\t  'blue' : [34, 39],\n\t  'cyan' : [36, 39],\n\t  'green' : [32, 39],\n\t  'magenta' : [35, 39],\n\t  'red' : [31, 39],\n\t  'yellow' : [33, 39]\n\t};\n\n\t// Don't use 'blue' not visible on cmd.exe\n\tinspect$1.styles = {\n\t  'special': 'cyan',\n\t  'number': 'yellow',\n\t  'boolean': 'yellow',\n\t  'undefined': 'grey',\n\t  'null': 'bold',\n\t  'string': 'green',\n\t  'date': 'magenta',\n\t  // \"name\": intentionally not styling\n\t  'regexp': 'red'\n\t};\n\n\n\tfunction stylizeWithColor(str, styleType) {\n\t  var style = inspect$1.styles[styleType];\n\n\t  if (style) {\n\t    return '\\u001b[' + inspect$1.colors[style][0] + 'm' + str +\n\t           '\\u001b[' + inspect$1.colors[style][1] + 'm';\n\t  } else {\n\t    return str;\n\t  }\n\t}\n\n\n\tfunction stylizeNoColor(str, styleType) {\n\t  return str;\n\t}\n\n\n\tfunction arrayToHash(array) {\n\t  var hash = {};\n\n\t  array.forEach(function(val, idx) {\n\t    hash[val] = true;\n\t  });\n\n\t  return hash;\n\t}\n\n\n\tfunction formatValue(ctx, value, recurseTimes) {\n\t  // Provide a hook for user-specified inspect functions.\n\t  // Check that value is an object with an inspect function on it\n\t  if (ctx.customInspect &&\n\t      value &&\n\t      isFunction$2(value.inspect) &&\n\t      // Filter out the util module, it's inspect function is special\n\t      value.inspect !== inspect$1 &&\n\t      // Also filter out any prototype objects using the circular check.\n\t      !(value.constructor && value.constructor.prototype === value)) {\n\t    var ret = value.inspect(recurseTimes, ctx);\n\t    if (!isString$1(ret)) {\n\t      ret = formatValue(ctx, ret, recurseTimes);\n\t    }\n\t    return ret;\n\t  }\n\n\t  // Primitive types cannot have properties\n\t  var primitive = formatPrimitive(ctx, value);\n\t  if (primitive) {\n\t    return primitive;\n\t  }\n\n\t  // Look up the keys of the object.\n\t  var keys = Object.keys(value);\n\t  var visibleKeys = arrayToHash(keys);\n\n\t  if (ctx.showHidden) {\n\t    keys = Object.getOwnPropertyNames(value);\n\t  }\n\n\t  // IE doesn't make error fields non-enumerable\n\t  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\t  if (isError$1(value)\n\t      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n\t    return formatError(value);\n\t  }\n\n\t  // Some type of object without properties can be shortcutted.\n\t  if (keys.length === 0) {\n\t    if (isFunction$2(value)) {\n\t      var name = value.name ? ': ' + value.name : '';\n\t      return ctx.stylize('[Function' + name + ']', 'special');\n\t    }\n\t    if (isRegExp$2(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    }\n\t    if (isDate$1(value)) {\n\t      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n\t    }\n\t    if (isError$1(value)) {\n\t      return formatError(value);\n\t    }\n\t  }\n\n\t  var base = '', array = false, braces = ['{', '}'];\n\n\t  // Make Array say that they are Array\n\t  if (isArray$5(value)) {\n\t    array = true;\n\t    braces = ['[', ']'];\n\t  }\n\n\t  // Make functions say that they are functions\n\t  if (isFunction$2(value)) {\n\t    var n = value.name ? ': ' + value.name : '';\n\t    base = ' [Function' + n + ']';\n\t  }\n\n\t  // Make RegExps say that they are RegExps\n\t  if (isRegExp$2(value)) {\n\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t  }\n\n\t  // Make dates with properties first say the date\n\t  if (isDate$1(value)) {\n\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t  }\n\n\t  // Make error with message first say the error\n\t  if (isError$1(value)) {\n\t    base = ' ' + formatError(value);\n\t  }\n\n\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t    return braces[0] + base + braces[1];\n\t  }\n\n\t  if (recurseTimes < 0) {\n\t    if (isRegExp$2(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    } else {\n\t      return ctx.stylize('[Object]', 'special');\n\t    }\n\t  }\n\n\t  ctx.seen.push(value);\n\n\t  var output;\n\t  if (array) {\n\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t  } else {\n\t    output = keys.map(function(key) {\n\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t    });\n\t  }\n\n\t  ctx.seen.pop();\n\n\t  return reduceToSingleString(output, base, braces);\n\t}\n\n\n\tfunction formatPrimitive(ctx, value) {\n\t  if (isUndefined(value))\n\t    return ctx.stylize('undefined', 'undefined');\n\t  if (isString$1(value)) {\n\t    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t                                             .replace(/'/g, \"\\\\'\")\n\t                                             .replace(/\\\\\"/g, '\"') + '\\'';\n\t    return ctx.stylize(simple, 'string');\n\t  }\n\t  if (isNumber$1(value))\n\t    return ctx.stylize('' + value, 'number');\n\t  if (isBoolean$1(value))\n\t    return ctx.stylize('' + value, 'boolean');\n\t  // For some reason typeof null is \"object\", so special case here.\n\t  if (isNull(value))\n\t    return ctx.stylize('null', 'null');\n\t}\n\n\n\tfunction formatError(value) {\n\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t}\n\n\n\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t  var output = [];\n\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t    if (hasOwnProperty$d(value, String(i))) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          String(i), true));\n\t    } else {\n\t      output.push('');\n\t    }\n\t  }\n\t  keys.forEach(function(key) {\n\t    if (!key.match(/^\\d+$/)) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          key, true));\n\t    }\n\t  });\n\t  return output;\n\t}\n\n\n\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t  var name, str, desc;\n\t  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n\t  if (desc.get) {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Getter/Setter]', 'special');\n\t    } else {\n\t      str = ctx.stylize('[Getter]', 'special');\n\t    }\n\t  } else {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Setter]', 'special');\n\t    }\n\t  }\n\t  if (!hasOwnProperty$d(visibleKeys, key)) {\n\t    name = '[' + key + ']';\n\t  }\n\t  if (!str) {\n\t    if (ctx.seen.indexOf(desc.value) < 0) {\n\t      if (isNull(recurseTimes)) {\n\t        str = formatValue(ctx, desc.value, null);\n\t      } else {\n\t        str = formatValue(ctx, desc.value, recurseTimes - 1);\n\t      }\n\t      if (str.indexOf('\\n') > -1) {\n\t        if (array) {\n\t          str = str.split('\\n').map(function(line) {\n\t            return '  ' + line;\n\t          }).join('\\n').substr(2);\n\t        } else {\n\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t            return '   ' + line;\n\t          }).join('\\n');\n\t        }\n\t      }\n\t    } else {\n\t      str = ctx.stylize('[Circular]', 'special');\n\t    }\n\t  }\n\t  if (isUndefined(name)) {\n\t    if (array && key.match(/^\\d+$/)) {\n\t      return str;\n\t    }\n\t    name = JSON.stringify('' + key);\n\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t      name = name.substr(1, name.length - 2);\n\t      name = ctx.stylize(name, 'name');\n\t    } else {\n\t      name = name.replace(/'/g, \"\\\\'\")\n\t                 .replace(/\\\\\"/g, '\"')\n\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t      name = ctx.stylize(name, 'string');\n\t    }\n\t  }\n\n\t  return name + ': ' + str;\n\t}\n\n\n\tfunction reduceToSingleString(output, base, braces) {\n\t  var length = output.reduce(function(prev, cur) {\n\t    if (cur.indexOf('\\n') >= 0) ;\n\t    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n\t  }, 0);\n\n\t  if (length > 60) {\n\t    return braces[0] +\n\t           (base === '' ? '' : base + '\\n ') +\n\t           ' ' +\n\t           output.join(',\\n  ') +\n\t           ' ' +\n\t           braces[1];\n\t  }\n\n\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t}\n\n\n\t// NOTE: These type checking functions intentionally don't use `instanceof`\n\t// because it is fragile and can be easily faked with `Object.create()`.\n\tfunction isArray$5(ar) {\n\t  return Array.isArray(ar);\n\t}\n\n\tfunction isBoolean$1(arg) {\n\t  return typeof arg === 'boolean';\n\t}\n\n\tfunction isNull(arg) {\n\t  return arg === null;\n\t}\n\n\tfunction isNullOrUndefined(arg) {\n\t  return arg == null;\n\t}\n\n\tfunction isNumber$1(arg) {\n\t  return typeof arg === 'number';\n\t}\n\n\tfunction isString$1(arg) {\n\t  return typeof arg === 'string';\n\t}\n\n\tfunction isSymbol$2(arg) {\n\t  return typeof arg === 'symbol';\n\t}\n\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\n\tfunction isRegExp$2(re) {\n\t  return isObject$2(re) && objectToString$2(re) === '[object RegExp]';\n\t}\n\n\tfunction isObject$2(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\n\tfunction isDate$1(d) {\n\t  return isObject$2(d) && objectToString$2(d) === '[object Date]';\n\t}\n\n\tfunction isError$1(e) {\n\t  return isObject$2(e) &&\n\t      (objectToString$2(e) === '[object Error]' || e instanceof Error);\n\t}\n\n\tfunction isFunction$2(arg) {\n\t  return typeof arg === 'function';\n\t}\n\n\tfunction isPrimitive(arg) {\n\t  return arg === null ||\n\t         typeof arg === 'boolean' ||\n\t         typeof arg === 'number' ||\n\t         typeof arg === 'string' ||\n\t         typeof arg === 'symbol' ||  // ES6 symbol\n\t         typeof arg === 'undefined';\n\t}\n\n\tfunction isBuffer$2(maybeBuf) {\n\t  return Buffer$3.isBuffer(maybeBuf);\n\t}\n\n\tfunction objectToString$2(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\n\n\tfunction pad(n) {\n\t  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n\t}\n\n\n\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t              'Oct', 'Nov', 'Dec'];\n\n\t// 26 Feb 16:19:34\n\tfunction timestamp() {\n\t  var d = new Date();\n\t  var time = [pad(d.getHours()),\n\t              pad(d.getMinutes()),\n\t              pad(d.getSeconds())].join(':');\n\t  return [d.getDate(), months[d.getMonth()], time].join(' ');\n\t}\n\n\n\t// log is just a thin wrapper to console.log that prepends a timestamp\n\tfunction log() {\n\t  console.log('%s - %s', timestamp(), format.apply(null, arguments));\n\t}\n\n\tfunction _extend(origin, add) {\n\t  // Don't do anything if add isn't an object\n\t  if (!add || !isObject$2(add)) return origin;\n\n\t  var keys = Object.keys(add);\n\t  var i = keys.length;\n\t  while (i--) {\n\t    origin[keys[i]] = add[keys[i]];\n\t  }\n\t  return origin;\n\t}\n\tfunction hasOwnProperty$d(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\n\tvar _polyfillNode_util = {\n\t  inherits: inherits$1,\n\t  _extend: _extend,\n\t  log: log,\n\t  isBuffer: isBuffer$2,\n\t  isPrimitive: isPrimitive,\n\t  isFunction: isFunction$2,\n\t  isError: isError$1,\n\t  isDate: isDate$1,\n\t  isObject: isObject$2,\n\t  isRegExp: isRegExp$2,\n\t  isUndefined: isUndefined,\n\t  isSymbol: isSymbol$2,\n\t  isString: isString$1,\n\t  isNumber: isNumber$1,\n\t  isNullOrUndefined: isNullOrUndefined,\n\t  isNull: isNull,\n\t  isBoolean: isBoolean$1,\n\t  isArray: isArray$5,\n\t  inspect: inspect$1,\n\t  deprecate: deprecate,\n\t  format: format,\n\t  debuglog: debuglog\n\t};\n\n\tvar _polyfillNode_util$1 = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tformat: format,\n\t\tdeprecate: deprecate,\n\t\tdebuglog: debuglog,\n\t\tinspect: inspect$1,\n\t\tisArray: isArray$5,\n\t\tisBoolean: isBoolean$1,\n\t\tisNull: isNull,\n\t\tisNullOrUndefined: isNullOrUndefined,\n\t\tisNumber: isNumber$1,\n\t\tisString: isString$1,\n\t\tisSymbol: isSymbol$2,\n\t\tisUndefined: isUndefined,\n\t\tisRegExp: isRegExp$2,\n\t\tisObject: isObject$2,\n\t\tisDate: isDate$1,\n\t\tisError: isError$1,\n\t\tisFunction: isFunction$2,\n\t\tisPrimitive: isPrimitive,\n\t\tisBuffer: isBuffer$2,\n\t\tlog: log,\n\t\tinherits: inherits$1,\n\t\t_extend: _extend,\n\t\t'default': _polyfillNode_util\n\t});\n\n\tvar require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_util$1);\n\n\tvar util_inspect = require$$0.inspect;\n\n\tvar hasMap = typeof Map === 'function' && Map.prototype;\n\tvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\n\tvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\n\tvar mapForEach = hasMap && Map.prototype.forEach;\n\tvar hasSet = typeof Set === 'function' && Set.prototype;\n\tvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\n\tvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\n\tvar setForEach = hasSet && Set.prototype.forEach;\n\tvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\n\tvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\n\tvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\n\tvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\n\tvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\n\tvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\n\tvar booleanValueOf = Boolean.prototype.valueOf;\n\tvar objectToString$1 = Object.prototype.toString;\n\tvar functionToString = Function.prototype.toString;\n\tvar match = String.prototype.match;\n\tvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\n\tvar gOPS = Object.getOwnPropertySymbols;\n\tvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\n\tvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n\tvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\n\tvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n\t    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n\t        ? function (O) {\n\t            return O.__proto__; // eslint-disable-line no-proto\n\t        }\n\t        : null\n\t);\n\n\tvar inspectCustom = util_inspect.custom;\n\tvar inspectSymbol = inspectCustom && isSymbol$1(inspectCustom) ? inspectCustom : null;\n\tvar toStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag !== 'undefined' ? Symbol.toStringTag : null;\n\n\tvar objectInspect = function inspect_(obj, options, depth, seen) {\n\t    var opts = options || {};\n\n\t    if (has$3(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {\n\t        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n\t    }\n\t    if (\n\t        has$3(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n\t            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n\t            : opts.maxStringLength !== null\n\t        )\n\t    ) {\n\t        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n\t    }\n\t    var customInspect = has$3(opts, 'customInspect') ? opts.customInspect : true;\n\t    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n\t        throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n\t    }\n\n\t    if (\n\t        has$3(opts, 'indent')\n\t        && opts.indent !== null\n\t        && opts.indent !== '\\t'\n\t        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n\t    ) {\n\t        throw new TypeError('options \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n\t    }\n\n\t    if (typeof obj === 'undefined') {\n\t        return 'undefined';\n\t    }\n\t    if (obj === null) {\n\t        return 'null';\n\t    }\n\t    if (typeof obj === 'boolean') {\n\t        return obj ? 'true' : 'false';\n\t    }\n\n\t    if (typeof obj === 'string') {\n\t        return inspectString(obj, opts);\n\t    }\n\t    if (typeof obj === 'number') {\n\t        if (obj === 0) {\n\t            return Infinity / obj > 0 ? '0' : '-0';\n\t        }\n\t        return String(obj);\n\t    }\n\t    if (typeof obj === 'bigint') {\n\t        return String(obj) + 'n';\n\t    }\n\n\t    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n\t    if (typeof depth === 'undefined') { depth = 0; }\n\t    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n\t        return isArray$4(obj) ? '[Array]' : '[Object]';\n\t    }\n\n\t    var indent = getIndent(opts, depth);\n\n\t    if (typeof seen === 'undefined') {\n\t        seen = [];\n\t    } else if (indexOf(seen, obj) >= 0) {\n\t        return '[Circular]';\n\t    }\n\n\t    function inspect(value, from, noIndent) {\n\t        if (from) {\n\t            seen = seen.slice();\n\t            seen.push(from);\n\t        }\n\t        if (noIndent) {\n\t            var newOpts = {\n\t                depth: opts.depth\n\t            };\n\t            if (has$3(opts, 'quoteStyle')) {\n\t                newOpts.quoteStyle = opts.quoteStyle;\n\t            }\n\t            return inspect_(value, newOpts, depth + 1, seen);\n\t        }\n\t        return inspect_(value, opts, depth + 1, seen);\n\t    }\n\n\t    if (typeof obj === 'function') {\n\t        var name = nameOf(obj);\n\t        var keys = arrObjKeys(obj, inspect);\n\t        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');\n\t    }\n\t    if (isSymbol$1(obj)) {\n\t        var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n\t        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n\t    }\n\t    if (isElement(obj)) {\n\t        var s = '<' + String(obj.nodeName).toLowerCase();\n\t        var attrs = obj.attributes || [];\n\t        for (var i = 0; i < attrs.length; i++) {\n\t            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n\t        }\n\t        s += '>';\n\t        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n\t        s += '</' + String(obj.nodeName).toLowerCase() + '>';\n\t        return s;\n\t    }\n\t    if (isArray$4(obj)) {\n\t        if (obj.length === 0) { return '[]'; }\n\t        var xs = arrObjKeys(obj, inspect);\n\t        if (indent && !singleLineValues(xs)) {\n\t            return '[' + indentedJoin(xs, indent) + ']';\n\t        }\n\t        return '[ ' + xs.join(', ') + ' ]';\n\t    }\n\t    if (isError(obj)) {\n\t        var parts = arrObjKeys(obj, inspect);\n\t        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n\t        return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';\n\t    }\n\t    if (typeof obj === 'object' && customInspect) {\n\t        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {\n\t            return obj[inspectSymbol]();\n\t        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n\t            return obj.inspect();\n\t        }\n\t    }\n\t    if (isMap$1(obj)) {\n\t        var mapParts = [];\n\t        mapForEach.call(obj, function (value, key) {\n\t            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n\t        });\n\t        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n\t    }\n\t    if (isSet$1(obj)) {\n\t        var setParts = [];\n\t        setForEach.call(obj, function (value) {\n\t            setParts.push(inspect(value, obj));\n\t        });\n\t        return collectionOf('Set', setSize.call(obj), setParts, indent);\n\t    }\n\t    if (isWeakMap(obj)) {\n\t        return weakCollectionOf('WeakMap');\n\t    }\n\t    if (isWeakSet(obj)) {\n\t        return weakCollectionOf('WeakSet');\n\t    }\n\t    if (isWeakRef(obj)) {\n\t        return weakCollectionOf('WeakRef');\n\t    }\n\t    if (isNumber(obj)) {\n\t        return markBoxed(inspect(Number(obj)));\n\t    }\n\t    if (isBigInt(obj)) {\n\t        return markBoxed(inspect(bigIntValueOf.call(obj)));\n\t    }\n\t    if (isBoolean(obj)) {\n\t        return markBoxed(booleanValueOf.call(obj));\n\t    }\n\t    if (isString(obj)) {\n\t        return markBoxed(inspect(String(obj)));\n\t    }\n\t    if (!isDate(obj) && !isRegExp$1(obj)) {\n\t        var ys = arrObjKeys(obj, inspect);\n\t        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n\t        var protoTag = obj instanceof Object ? '' : 'null prototype';\n\t        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr(obj).slice(8, -1) : protoTag ? 'Object' : '';\n\t        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n\t        var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');\n\t        if (ys.length === 0) { return tag + '{}'; }\n\t        if (indent) {\n\t            return tag + '{' + indentedJoin(ys, indent) + '}';\n\t        }\n\t        return tag + '{ ' + ys.join(', ') + ' }';\n\t    }\n\t    return String(obj);\n\t};\n\n\tfunction wrapQuotes(s, defaultStyle, opts) {\n\t    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n\t    return quoteChar + s + quoteChar;\n\t}\n\n\tfunction quote(s) {\n\t    return String(s).replace(/\"/g, '&quot;');\n\t}\n\n\tfunction isArray$4(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\tfunction isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\tfunction isRegExp$1(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\tfunction isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\tfunction isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\tfunction isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\tfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\n\t// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\n\tfunction isSymbol$1(obj) {\n\t    if (hasShammedSymbols) {\n\t        return obj && typeof obj === 'object' && obj instanceof Symbol;\n\t    }\n\t    if (typeof obj === 'symbol') {\n\t        return true;\n\t    }\n\t    if (!obj || typeof obj !== 'object' || !symToString) {\n\t        return false;\n\t    }\n\t    try {\n\t        symToString.call(obj);\n\t        return true;\n\t    } catch (e) {}\n\t    return false;\n\t}\n\n\tfunction isBigInt(obj) {\n\t    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n\t        return false;\n\t    }\n\t    try {\n\t        bigIntValueOf.call(obj);\n\t        return true;\n\t    } catch (e) {}\n\t    return false;\n\t}\n\n\tvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\n\tfunction has$3(obj, key) {\n\t    return hasOwn.call(obj, key);\n\t}\n\n\tfunction toStr(obj) {\n\t    return objectToString$1.call(obj);\n\t}\n\n\tfunction nameOf(f) {\n\t    if (f.name) { return f.name; }\n\t    var m = match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n\t    if (m) { return m[1]; }\n\t    return null;\n\t}\n\n\tfunction indexOf(xs, x) {\n\t    if (xs.indexOf) { return xs.indexOf(x); }\n\t    for (var i = 0, l = xs.length; i < l; i++) {\n\t        if (xs[i] === x) { return i; }\n\t    }\n\t    return -1;\n\t}\n\n\tfunction isMap$1(x) {\n\t    if (!mapSize || !x || typeof x !== 'object') {\n\t        return false;\n\t    }\n\t    try {\n\t        mapSize.call(x);\n\t        try {\n\t            setSize.call(x);\n\t        } catch (s) {\n\t            return true;\n\t        }\n\t        return x instanceof Map; // core-js workaround, pre-v2.5.0\n\t    } catch (e) {}\n\t    return false;\n\t}\n\n\tfunction isWeakMap(x) {\n\t    if (!weakMapHas || !x || typeof x !== 'object') {\n\t        return false;\n\t    }\n\t    try {\n\t        weakMapHas.call(x, weakMapHas);\n\t        try {\n\t            weakSetHas.call(x, weakSetHas);\n\t        } catch (s) {\n\t            return true;\n\t        }\n\t        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n\t    } catch (e) {}\n\t    return false;\n\t}\n\n\tfunction isWeakRef(x) {\n\t    if (!weakRefDeref || !x || typeof x !== 'object') {\n\t        return false;\n\t    }\n\t    try {\n\t        weakRefDeref.call(x);\n\t        return true;\n\t    } catch (e) {}\n\t    return false;\n\t}\n\n\tfunction isSet$1(x) {\n\t    if (!setSize || !x || typeof x !== 'object') {\n\t        return false;\n\t    }\n\t    try {\n\t        setSize.call(x);\n\t        try {\n\t            mapSize.call(x);\n\t        } catch (m) {\n\t            return true;\n\t        }\n\t        return x instanceof Set; // core-js workaround, pre-v2.5.0\n\t    } catch (e) {}\n\t    return false;\n\t}\n\n\tfunction isWeakSet(x) {\n\t    if (!weakSetHas || !x || typeof x !== 'object') {\n\t        return false;\n\t    }\n\t    try {\n\t        weakSetHas.call(x, weakSetHas);\n\t        try {\n\t            weakMapHas.call(x, weakMapHas);\n\t        } catch (s) {\n\t            return true;\n\t        }\n\t        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n\t    } catch (e) {}\n\t    return false;\n\t}\n\n\tfunction isElement(x) {\n\t    if (!x || typeof x !== 'object') { return false; }\n\t    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n\t        return true;\n\t    }\n\t    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n\t}\n\n\tfunction inspectString(str, opts) {\n\t    if (str.length > opts.maxStringLength) {\n\t        var remaining = str.length - opts.maxStringLength;\n\t        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n\t        return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;\n\t    }\n\t    // eslint-disable-next-line no-control-regex\n\t    var s = str.replace(/(['\\\\])/g, '\\\\$1').replace(/[\\x00-\\x1f]/g, lowbyte);\n\t    return wrapQuotes(s, 'single', opts);\n\t}\n\n\tfunction lowbyte(c) {\n\t    var n = c.charCodeAt(0);\n\t    var x = {\n\t        8: 'b',\n\t        9: 't',\n\t        10: 'n',\n\t        12: 'f',\n\t        13: 'r'\n\t    }[n];\n\t    if (x) { return '\\\\' + x; }\n\t    return '\\\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();\n\t}\n\n\tfunction markBoxed(str) {\n\t    return 'Object(' + str + ')';\n\t}\n\n\tfunction weakCollectionOf(type) {\n\t    return type + ' { ? }';\n\t}\n\n\tfunction collectionOf(type, size, entries, indent) {\n\t    var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');\n\t    return type + ' (' + size + ') {' + joinedEntries + '}';\n\t}\n\n\tfunction singleLineValues(xs) {\n\t    for (var i = 0; i < xs.length; i++) {\n\t        if (indexOf(xs[i], '\\n') >= 0) {\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t}\n\n\tfunction getIndent(opts, depth) {\n\t    var baseIndent;\n\t    if (opts.indent === '\\t') {\n\t        baseIndent = '\\t';\n\t    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n\t        baseIndent = Array(opts.indent + 1).join(' ');\n\t    } else {\n\t        return null;\n\t    }\n\t    return {\n\t        base: baseIndent,\n\t        prev: Array(depth + 1).join(baseIndent)\n\t    };\n\t}\n\n\tfunction indentedJoin(xs, indent) {\n\t    if (xs.length === 0) { return ''; }\n\t    var lineJoiner = '\\n' + indent.prev + indent.base;\n\t    return lineJoiner + xs.join(',' + lineJoiner) + '\\n' + indent.prev;\n\t}\n\n\tfunction arrObjKeys(obj, inspect) {\n\t    var isArr = isArray$4(obj);\n\t    var xs = [];\n\t    if (isArr) {\n\t        xs.length = obj.length;\n\t        for (var i = 0; i < obj.length; i++) {\n\t            xs[i] = has$3(obj, i) ? inspect(obj[i], obj) : '';\n\t        }\n\t    }\n\t    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n\t    var symMap;\n\t    if (hasShammedSymbols) {\n\t        symMap = {};\n\t        for (var k = 0; k < syms.length; k++) {\n\t            symMap['$' + syms[k]] = syms[k];\n\t        }\n\t    }\n\n\t    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n\t        if (!has$3(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n\t        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n\t        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n\t            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n\t            continue; // eslint-disable-line no-restricted-syntax, no-continue\n\t        } else if ((/[^\\w$]/).test(key)) {\n\t            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n\t        } else {\n\t            xs.push(key + ': ' + inspect(obj[key], obj));\n\t        }\n\t    }\n\t    if (typeof gOPS === 'function') {\n\t        for (var j = 0; j < syms.length; j++) {\n\t            if (isEnumerable.call(obj, syms[j])) {\n\t                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n\t            }\n\t        }\n\t    }\n\t    return xs;\n\t}\n\n\tvar GetIntrinsic = getIntrinsic;\n\tvar callBound = callBound$1;\n\tvar inspect = objectInspect;\n\n\tvar $TypeError = GetIntrinsic('%TypeError%');\n\tvar $WeakMap = GetIntrinsic('%WeakMap%', true);\n\tvar $Map = GetIntrinsic('%Map%', true);\n\n\tvar $weakMapGet = callBound('WeakMap.prototype.get', true);\n\tvar $weakMapSet = callBound('WeakMap.prototype.set', true);\n\tvar $weakMapHas = callBound('WeakMap.prototype.has', true);\n\tvar $mapGet = callBound('Map.prototype.get', true);\n\tvar $mapSet = callBound('Map.prototype.set', true);\n\tvar $mapHas = callBound('Map.prototype.has', true);\n\n\t/*\n\t * This function traverses the list returning the node corresponding to the\n\t * given key.\n\t *\n\t * That node is also moved to the head of the list, so that if it's accessed\n\t * again we don't need to traverse the whole list. By doing so, all the recently\n\t * used nodes can be accessed relatively quickly.\n\t */\n\tvar listGetNode = function (list, key) { // eslint-disable-line consistent-return\n\t\tfor (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {\n\t\t\tif (curr.key === key) {\n\t\t\t\tprev.next = curr.next;\n\t\t\t\tcurr.next = list.next;\n\t\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\t\treturn curr;\n\t\t\t}\n\t\t}\n\t};\n\n\tvar listGet = function (objects, key) {\n\t\tvar node = listGetNode(objects, key);\n\t\treturn node && node.value;\n\t};\n\tvar listSet = function (objects, key, value) {\n\t\tvar node = listGetNode(objects, key);\n\t\tif (node) {\n\t\t\tnode.value = value;\n\t\t} else {\n\t\t\t// Prepend the new node to the beginning of the list\n\t\t\tobjects.next = { // eslint-disable-line no-param-reassign\n\t\t\t\tkey: key,\n\t\t\t\tnext: objects.next,\n\t\t\t\tvalue: value\n\t\t\t};\n\t\t}\n\t};\n\tvar listHas = function (objects, key) {\n\t\treturn !!listGetNode(objects, key);\n\t};\n\n\tvar sideChannel = function getSideChannel() {\n\t\tvar $wm;\n\t\tvar $m;\n\t\tvar $o;\n\t\tvar channel = {\n\t\t\tassert: function (key) {\n\t\t\t\tif (!channel.has(key)) {\n\t\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif ($wm) {\n\t\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t\t}\n\t\t\t\t} else if ($Map) {\n\t\t\t\t\tif ($m) {\n\t\t\t\t\t\treturn $mapGet($m, key);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\t\treturn listGet($o, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\thas: function (key) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif ($wm) {\n\t\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t\t}\n\t\t\t\t} else if ($Map) {\n\t\t\t\t\tif ($m) {\n\t\t\t\t\t\treturn $mapHas($m, key);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\t\treturn listHas($o, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function (key, value) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif (!$wm) {\n\t\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t\t}\n\t\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t\t} else if ($Map) {\n\t\t\t\t\tif (!$m) {\n\t\t\t\t\t\t$m = new $Map();\n\t\t\t\t\t}\n\t\t\t\t\t$mapSet($m, key, value);\n\t\t\t\t} else {\n\t\t\t\t\tif (!$o) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Initialize the linked list as an empty node, so that we don't have\n\t\t\t\t\t\t * to special-case handling of the first node: we can always refer to\n\t\t\t\t\t\t * it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$o = { key: {}, next: null };\n\t\t\t\t\t}\n\t\t\t\t\tlistSet($o, key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn channel;\n\t};\n\n\tvar replace = String.prototype.replace;\n\tvar percentTwenties = /%20/g;\n\n\tvar Format = {\n\t    RFC1738: 'RFC1738',\n\t    RFC3986: 'RFC3986'\n\t};\n\n\tvar formats$3 = {\n\t    'default': Format.RFC3986,\n\t    formatters: {\n\t        RFC1738: function (value) {\n\t            return replace.call(value, percentTwenties, '+');\n\t        },\n\t        RFC3986: function (value) {\n\t            return String(value);\n\t        }\n\t    },\n\t    RFC1738: Format.RFC1738,\n\t    RFC3986: Format.RFC3986\n\t};\n\n\tvar formats$2 = formats$3;\n\n\tvar has$2 = Object.prototype.hasOwnProperty;\n\tvar isArray$3 = Array.isArray;\n\n\tvar hexTable = (function () {\n\t    var array = [];\n\t    for (var i = 0; i < 256; ++i) {\n\t        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n\t    }\n\n\t    return array;\n\t}());\n\n\tvar compactQueue = function compactQueue(queue) {\n\t    while (queue.length > 1) {\n\t        var item = queue.pop();\n\t        var obj = item.obj[item.prop];\n\n\t        if (isArray$3(obj)) {\n\t            var compacted = [];\n\n\t            for (var j = 0; j < obj.length; ++j) {\n\t                if (typeof obj[j] !== 'undefined') {\n\t                    compacted.push(obj[j]);\n\t                }\n\t            }\n\n\t            item.obj[item.prop] = compacted;\n\t        }\n\t    }\n\t};\n\n\tvar arrayToObject = function arrayToObject(source, options) {\n\t    var obj = options && options.plainObjects ? Object.create(null) : {};\n\t    for (var i = 0; i < source.length; ++i) {\n\t        if (typeof source[i] !== 'undefined') {\n\t            obj[i] = source[i];\n\t        }\n\t    }\n\n\t    return obj;\n\t};\n\n\tvar merge$1 = function merge(target, source, options) {\n\t    /* eslint no-param-reassign: 0 */\n\t    if (!source) {\n\t        return target;\n\t    }\n\n\t    if (typeof source !== 'object') {\n\t        if (isArray$3(target)) {\n\t            target.push(source);\n\t        } else if (target && typeof target === 'object') {\n\t            if ((options && (options.plainObjects || options.allowPrototypes)) || !has$2.call(Object.prototype, source)) {\n\t                target[source] = true;\n\t            }\n\t        } else {\n\t            return [target, source];\n\t        }\n\n\t        return target;\n\t    }\n\n\t    if (!target || typeof target !== 'object') {\n\t        return [target].concat(source);\n\t    }\n\n\t    var mergeTarget = target;\n\t    if (isArray$3(target) && !isArray$3(source)) {\n\t        mergeTarget = arrayToObject(target, options);\n\t    }\n\n\t    if (isArray$3(target) && isArray$3(source)) {\n\t        source.forEach(function (item, i) {\n\t            if (has$2.call(target, i)) {\n\t                var targetItem = target[i];\n\t                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n\t                    target[i] = merge(targetItem, item, options);\n\t                } else {\n\t                    target.push(item);\n\t                }\n\t            } else {\n\t                target[i] = item;\n\t            }\n\t        });\n\t        return target;\n\t    }\n\n\t    return Object.keys(source).reduce(function (acc, key) {\n\t        var value = source[key];\n\n\t        if (has$2.call(acc, key)) {\n\t            acc[key] = merge(acc[key], value, options);\n\t        } else {\n\t            acc[key] = value;\n\t        }\n\t        return acc;\n\t    }, mergeTarget);\n\t};\n\n\tvar assign = function assignSingleSource(target, source) {\n\t    return Object.keys(source).reduce(function (acc, key) {\n\t        acc[key] = source[key];\n\t        return acc;\n\t    }, target);\n\t};\n\n\tvar decode = function (str, decoder, charset) {\n\t    var strWithoutPlus = str.replace(/\\+/g, ' ');\n\t    if (charset === 'iso-8859-1') {\n\t        // unescape never throws, no try...catch needed:\n\t        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n\t    }\n\t    // utf-8\n\t    try {\n\t        return decodeURIComponent(strWithoutPlus);\n\t    } catch (e) {\n\t        return strWithoutPlus;\n\t    }\n\t};\n\n\tvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n\t    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n\t    // It has been adapted here for stricter adherence to RFC 3986\n\t    if (str.length === 0) {\n\t        return str;\n\t    }\n\n\t    var string = str;\n\t    if (typeof str === 'symbol') {\n\t        string = Symbol.prototype.toString.call(str);\n\t    } else if (typeof str !== 'string') {\n\t        string = String(str);\n\t    }\n\n\t    if (charset === 'iso-8859-1') {\n\t        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n\t            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n\t        });\n\t    }\n\n\t    var out = '';\n\t    for (var i = 0; i < string.length; ++i) {\n\t        var c = string.charCodeAt(i);\n\n\t        if (\n\t            c === 0x2D // -\n\t            || c === 0x2E // .\n\t            || c === 0x5F // _\n\t            || c === 0x7E // ~\n\t            || (c >= 0x30 && c <= 0x39) // 0-9\n\t            || (c >= 0x41 && c <= 0x5A) // a-z\n\t            || (c >= 0x61 && c <= 0x7A) // A-Z\n\t            || (format === formats$2.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n\t        ) {\n\t            out += string.charAt(i);\n\t            continue;\n\t        }\n\n\t        if (c < 0x80) {\n\t            out = out + hexTable[c];\n\t            continue;\n\t        }\n\n\t        if (c < 0x800) {\n\t            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);\n\t            continue;\n\t        }\n\n\t        if (c < 0xD800 || c >= 0xE000) {\n\t            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);\n\t            continue;\n\t        }\n\n\t        i += 1;\n\t        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));\n\t        /* eslint operator-linebreak: [2, \"before\"] */\n\t        out += hexTable[0xF0 | (c >> 18)]\n\t            + hexTable[0x80 | ((c >> 12) & 0x3F)]\n\t            + hexTable[0x80 | ((c >> 6) & 0x3F)]\n\t            + hexTable[0x80 | (c & 0x3F)];\n\t    }\n\n\t    return out;\n\t};\n\n\tvar compact = function compact(value) {\n\t    var queue = [{ obj: { o: value }, prop: 'o' }];\n\t    var refs = [];\n\n\t    for (var i = 0; i < queue.length; ++i) {\n\t        var item = queue[i];\n\t        var obj = item.obj[item.prop];\n\n\t        var keys = Object.keys(obj);\n\t        for (var j = 0; j < keys.length; ++j) {\n\t            var key = keys[j];\n\t            var val = obj[key];\n\t            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n\t                queue.push({ obj: obj, prop: key });\n\t                refs.push(val);\n\t            }\n\t        }\n\t    }\n\n\t    compactQueue(queue);\n\n\t    return value;\n\t};\n\n\tvar isRegExp = function isRegExp(obj) {\n\t    return Object.prototype.toString.call(obj) === '[object RegExp]';\n\t};\n\n\tvar isBuffer$1 = function isBuffer(obj) {\n\t    if (!obj || typeof obj !== 'object') {\n\t        return false;\n\t    }\n\n\t    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n\t};\n\n\tvar combine = function combine(a, b) {\n\t    return [].concat(a, b);\n\t};\n\n\tvar maybeMap = function maybeMap(val, fn) {\n\t    if (isArray$3(val)) {\n\t        var mapped = [];\n\t        for (var i = 0; i < val.length; i += 1) {\n\t            mapped.push(fn(val[i]));\n\t        }\n\t        return mapped;\n\t    }\n\t    return fn(val);\n\t};\n\n\tvar utils$3 = {\n\t    arrayToObject: arrayToObject,\n\t    assign: assign,\n\t    combine: combine,\n\t    compact: compact,\n\t    decode: decode,\n\t    encode: encode,\n\t    isBuffer: isBuffer$1,\n\t    isRegExp: isRegExp,\n\t    maybeMap: maybeMap,\n\t    merge: merge$1\n\t};\n\n\tvar getSideChannel = sideChannel;\n\tvar utils$2 = utils$3;\n\tvar formats$1 = formats$3;\n\tvar has$1 = Object.prototype.hasOwnProperty;\n\n\tvar arrayPrefixGenerators = {\n\t    brackets: function brackets(prefix) {\n\t        return prefix + '[]';\n\t    },\n\t    comma: 'comma',\n\t    indices: function indices(prefix, key) {\n\t        return prefix + '[' + key + ']';\n\t    },\n\t    repeat: function repeat(prefix) {\n\t        return prefix;\n\t    }\n\t};\n\n\tvar isArray$2 = Array.isArray;\n\tvar split = String.prototype.split;\n\tvar push = Array.prototype.push;\n\tvar pushToArray = function (arr, valueOrArray) {\n\t    push.apply(arr, isArray$2(valueOrArray) ? valueOrArray : [valueOrArray]);\n\t};\n\n\tvar toISO = Date.prototype.toISOString;\n\n\tvar defaultFormat = formats$1['default'];\n\tvar defaults$1 = {\n\t    addQueryPrefix: false,\n\t    allowDots: false,\n\t    charset: 'utf-8',\n\t    charsetSentinel: false,\n\t    delimiter: '&',\n\t    encode: true,\n\t    encoder: utils$2.encode,\n\t    encodeValuesOnly: false,\n\t    format: defaultFormat,\n\t    formatter: formats$1.formatters[defaultFormat],\n\t    // deprecated\n\t    indices: false,\n\t    serializeDate: function serializeDate(date) {\n\t        return toISO.call(date);\n\t    },\n\t    skipNulls: false,\n\t    strictNullHandling: false\n\t};\n\n\tvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n\t    return typeof v === 'string'\n\t        || typeof v === 'number'\n\t        || typeof v === 'boolean'\n\t        || typeof v === 'symbol'\n\t        || typeof v === 'bigint';\n\t};\n\n\tvar sentinel = {};\n\n\tvar stringify$1 = function stringify(\n\t    object,\n\t    prefix,\n\t    generateArrayPrefix,\n\t    strictNullHandling,\n\t    skipNulls,\n\t    encoder,\n\t    filter,\n\t    sort,\n\t    allowDots,\n\t    serializeDate,\n\t    format,\n\t    formatter,\n\t    encodeValuesOnly,\n\t    charset,\n\t    sideChannel\n\t) {\n\t    var obj = object;\n\n\t    var tmpSc = sideChannel;\n\t    var step = 0;\n\t    var findFlag = false;\n\t    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n\t        // Where object last appeared in the ref tree\n\t        var pos = tmpSc.get(object);\n\t        step += 1;\n\t        if (typeof pos !== 'undefined') {\n\t            if (pos === step) {\n\t                throw new RangeError('Cyclic object value');\n\t            } else {\n\t                findFlag = true; // Break while\n\t            }\n\t        }\n\t        if (typeof tmpSc.get(sentinel) === 'undefined') {\n\t            step = 0;\n\t        }\n\t    }\n\n\t    if (typeof filter === 'function') {\n\t        obj = filter(prefix, obj);\n\t    } else if (obj instanceof Date) {\n\t        obj = serializeDate(obj);\n\t    } else if (generateArrayPrefix === 'comma' && isArray$2(obj)) {\n\t        obj = utils$2.maybeMap(obj, function (value) {\n\t            if (value instanceof Date) {\n\t                return serializeDate(value);\n\t            }\n\t            return value;\n\t        });\n\t    }\n\n\t    if (obj === null) {\n\t        if (strictNullHandling) {\n\t            return encoder && !encodeValuesOnly ? encoder(prefix, defaults$1.encoder, charset, 'key', format) : prefix;\n\t        }\n\n\t        obj = '';\n\t    }\n\n\t    if (isNonNullishPrimitive(obj) || utils$2.isBuffer(obj)) {\n\t        if (encoder) {\n\t            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$1.encoder, charset, 'key', format);\n\t            if (generateArrayPrefix === 'comma' && encodeValuesOnly) {\n\t                var valuesArray = split.call(String(obj), ',');\n\t                var valuesJoined = '';\n\t                for (var i = 0; i < valuesArray.length; ++i) {\n\t                    valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults$1.encoder, charset, 'value', format));\n\t                }\n\t                return [formatter(keyValue) + '=' + valuesJoined];\n\t            }\n\t            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults$1.encoder, charset, 'value', format))];\n\t        }\n\t        return [formatter(prefix) + '=' + formatter(String(obj))];\n\t    }\n\n\t    var values = [];\n\n\t    if (typeof obj === 'undefined') {\n\t        return values;\n\t    }\n\n\t    var objKeys;\n\t    if (generateArrayPrefix === 'comma' && isArray$2(obj)) {\n\t        // we need to join elements in\n\t        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n\t    } else if (isArray$2(filter)) {\n\t        objKeys = filter;\n\t    } else {\n\t        var keys = Object.keys(obj);\n\t        objKeys = sort ? keys.sort(sort) : keys;\n\t    }\n\n\t    for (var j = 0; j < objKeys.length; ++j) {\n\t        var key = objKeys[j];\n\t        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n\t        if (skipNulls && value === null) {\n\t            continue;\n\t        }\n\n\t        var keyPrefix = isArray$2(obj)\n\t            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix\n\t            : prefix + (allowDots ? '.' + key : '[' + key + ']');\n\n\t        sideChannel.set(object, step);\n\t        var valueSideChannel = getSideChannel();\n\t        valueSideChannel.set(sentinel, sideChannel);\n\t        pushToArray(values, stringify(\n\t            value,\n\t            keyPrefix,\n\t            generateArrayPrefix,\n\t            strictNullHandling,\n\t            skipNulls,\n\t            encoder,\n\t            filter,\n\t            sort,\n\t            allowDots,\n\t            serializeDate,\n\t            format,\n\t            formatter,\n\t            encodeValuesOnly,\n\t            charset,\n\t            valueSideChannel\n\t        ));\n\t    }\n\n\t    return values;\n\t};\n\n\tvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n\t    if (!opts) {\n\t        return defaults$1;\n\t    }\n\n\t    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n\t        throw new TypeError('Encoder has to be a function.');\n\t    }\n\n\t    var charset = opts.charset || defaults$1.charset;\n\t    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n\t        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n\t    }\n\n\t    var format = formats$1['default'];\n\t    if (typeof opts.format !== 'undefined') {\n\t        if (!has$1.call(formats$1.formatters, opts.format)) {\n\t            throw new TypeError('Unknown format option provided.');\n\t        }\n\t        format = opts.format;\n\t    }\n\t    var formatter = formats$1.formatters[format];\n\n\t    var filter = defaults$1.filter;\n\t    if (typeof opts.filter === 'function' || isArray$2(opts.filter)) {\n\t        filter = opts.filter;\n\t    }\n\n\t    return {\n\t        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults$1.addQueryPrefix,\n\t        allowDots: typeof opts.allowDots === 'undefined' ? defaults$1.allowDots : !!opts.allowDots,\n\t        charset: charset,\n\t        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$1.charsetSentinel,\n\t        delimiter: typeof opts.delimiter === 'undefined' ? defaults$1.delimiter : opts.delimiter,\n\t        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults$1.encode,\n\t        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults$1.encoder,\n\t        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults$1.encodeValuesOnly,\n\t        filter: filter,\n\t        format: format,\n\t        formatter: formatter,\n\t        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults$1.serializeDate,\n\t        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults$1.skipNulls,\n\t        sort: typeof opts.sort === 'function' ? opts.sort : null,\n\t        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$1.strictNullHandling\n\t    };\n\t};\n\n\tvar stringify_1 = function (object, opts) {\n\t    var obj = object;\n\t    var options = normalizeStringifyOptions(opts);\n\n\t    var objKeys;\n\t    var filter;\n\n\t    if (typeof options.filter === 'function') {\n\t        filter = options.filter;\n\t        obj = filter('', obj);\n\t    } else if (isArray$2(options.filter)) {\n\t        filter = options.filter;\n\t        objKeys = filter;\n\t    }\n\n\t    var keys = [];\n\n\t    if (typeof obj !== 'object' || obj === null) {\n\t        return '';\n\t    }\n\n\t    var arrayFormat;\n\t    if (opts && opts.arrayFormat in arrayPrefixGenerators) {\n\t        arrayFormat = opts.arrayFormat;\n\t    } else if (opts && 'indices' in opts) {\n\t        arrayFormat = opts.indices ? 'indices' : 'repeat';\n\t    } else {\n\t        arrayFormat = 'indices';\n\t    }\n\n\t    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n\n\t    if (!objKeys) {\n\t        objKeys = Object.keys(obj);\n\t    }\n\n\t    if (options.sort) {\n\t        objKeys.sort(options.sort);\n\t    }\n\n\t    var sideChannel = getSideChannel();\n\t    for (var i = 0; i < objKeys.length; ++i) {\n\t        var key = objKeys[i];\n\n\t        if (options.skipNulls && obj[key] === null) {\n\t            continue;\n\t        }\n\t        pushToArray(keys, stringify$1(\n\t            obj[key],\n\t            key,\n\t            generateArrayPrefix,\n\t            options.strictNullHandling,\n\t            options.skipNulls,\n\t            options.encode ? options.encoder : null,\n\t            options.filter,\n\t            options.sort,\n\t            options.allowDots,\n\t            options.serializeDate,\n\t            options.format,\n\t            options.formatter,\n\t            options.encodeValuesOnly,\n\t            options.charset,\n\t            sideChannel\n\t        ));\n\t    }\n\n\t    var joined = keys.join(options.delimiter);\n\t    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n\t    if (options.charsetSentinel) {\n\t        if (options.charset === 'iso-8859-1') {\n\t            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n\t            prefix += 'utf8=%26%2310003%3B&';\n\t        } else {\n\t            // encodeURIComponent('✓')\n\t            prefix += 'utf8=%E2%9C%93&';\n\t        }\n\t    }\n\n\t    return joined.length > 0 ? prefix + joined : '';\n\t};\n\n\tvar utils$1 = utils$3;\n\n\tvar has = Object.prototype.hasOwnProperty;\n\tvar isArray$1 = Array.isArray;\n\n\tvar defaults = {\n\t    allowDots: false,\n\t    allowPrototypes: false,\n\t    allowSparse: false,\n\t    arrayLimit: 20,\n\t    charset: 'utf-8',\n\t    charsetSentinel: false,\n\t    comma: false,\n\t    decoder: utils$1.decode,\n\t    delimiter: '&',\n\t    depth: 5,\n\t    ignoreQueryPrefix: false,\n\t    interpretNumericEntities: false,\n\t    parameterLimit: 1000,\n\t    parseArrays: true,\n\t    plainObjects: false,\n\t    strictNullHandling: false\n\t};\n\n\tvar interpretNumericEntities = function (str) {\n\t    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n\t        return String.fromCharCode(parseInt(numberStr, 10));\n\t    });\n\t};\n\n\tvar parseArrayValue = function (val, options) {\n\t    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n\t        return val.split(',');\n\t    }\n\n\t    return val;\n\t};\n\n\t// This is what browsers will submit when the ✓ character occurs in an\n\t// application/x-www-form-urlencoded body and the encoding of the page containing\n\t// the form is iso-8859-1, or when the submitted form has an accept-charset\n\t// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n\t// the ✓ character, such as us-ascii.\n\tvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n\t// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\n\tvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\n\tvar parseValues = function parseQueryStringValues(str, options) {\n\t    var obj = {};\n\t    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n\t    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n\t    var parts = cleanStr.split(options.delimiter, limit);\n\t    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n\t    var i;\n\n\t    var charset = options.charset;\n\t    if (options.charsetSentinel) {\n\t        for (i = 0; i < parts.length; ++i) {\n\t            if (parts[i].indexOf('utf8=') === 0) {\n\t                if (parts[i] === charsetSentinel) {\n\t                    charset = 'utf-8';\n\t                } else if (parts[i] === isoSentinel) {\n\t                    charset = 'iso-8859-1';\n\t                }\n\t                skipIndex = i;\n\t                i = parts.length; // The eslint settings do not allow break;\n\t            }\n\t        }\n\t    }\n\n\t    for (i = 0; i < parts.length; ++i) {\n\t        if (i === skipIndex) {\n\t            continue;\n\t        }\n\t        var part = parts[i];\n\n\t        var bracketEqualsPos = part.indexOf(']=');\n\t        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n\t        var key, val;\n\t        if (pos === -1) {\n\t            key = options.decoder(part, defaults.decoder, charset, 'key');\n\t            val = options.strictNullHandling ? null : '';\n\t        } else {\n\t            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n\t            val = utils$1.maybeMap(\n\t                parseArrayValue(part.slice(pos + 1), options),\n\t                function (encodedVal) {\n\t                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n\t                }\n\t            );\n\t        }\n\n\t        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n\t            val = interpretNumericEntities(val);\n\t        }\n\n\t        if (part.indexOf('[]=') > -1) {\n\t            val = isArray$1(val) ? [val] : val;\n\t        }\n\n\t        if (has.call(obj, key)) {\n\t            obj[key] = utils$1.combine(obj[key], val);\n\t        } else {\n\t            obj[key] = val;\n\t        }\n\t    }\n\n\t    return obj;\n\t};\n\n\tvar parseObject = function (chain, val, options, valuesParsed) {\n\t    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n\t    for (var i = chain.length - 1; i >= 0; --i) {\n\t        var obj;\n\t        var root = chain[i];\n\n\t        if (root === '[]' && options.parseArrays) {\n\t            obj = [].concat(leaf);\n\t        } else {\n\t            obj = options.plainObjects ? Object.create(null) : {};\n\t            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n\t            var index = parseInt(cleanRoot, 10);\n\t            if (!options.parseArrays && cleanRoot === '') {\n\t                obj = { 0: leaf };\n\t            } else if (\n\t                !isNaN(index)\n\t                && root !== cleanRoot\n\t                && String(index) === cleanRoot\n\t                && index >= 0\n\t                && (options.parseArrays && index <= options.arrayLimit)\n\t            ) {\n\t                obj = [];\n\t                obj[index] = leaf;\n\t            } else if (cleanRoot !== '__proto__') {\n\t                obj[cleanRoot] = leaf;\n\t            }\n\t        }\n\n\t        leaf = obj;\n\t    }\n\n\t    return leaf;\n\t};\n\n\tvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n\t    if (!givenKey) {\n\t        return;\n\t    }\n\n\t    // Transform dot notation to bracket notation\n\t    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n\t    // The regex chunks\n\n\t    var brackets = /(\\[[^[\\]]*])/;\n\t    var child = /(\\[[^[\\]]*])/g;\n\n\t    // Get the parent\n\n\t    var segment = options.depth > 0 && brackets.exec(key);\n\t    var parent = segment ? key.slice(0, segment.index) : key;\n\n\t    // Stash the parent if it exists\n\n\t    var keys = [];\n\t    if (parent) {\n\t        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n\t        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n\t            if (!options.allowPrototypes) {\n\t                return;\n\t            }\n\t        }\n\n\t        keys.push(parent);\n\t    }\n\n\t    // Loop through children appending to the array until we hit depth\n\n\t    var i = 0;\n\t    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n\t        i += 1;\n\t        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n\t            if (!options.allowPrototypes) {\n\t                return;\n\t            }\n\t        }\n\t        keys.push(segment[1]);\n\t    }\n\n\t    // If there's a remainder, just add whatever is left\n\n\t    if (segment) {\n\t        keys.push('[' + key.slice(segment.index) + ']');\n\t    }\n\n\t    return parseObject(keys, val, options, valuesParsed);\n\t};\n\n\tvar normalizeParseOptions = function normalizeParseOptions(opts) {\n\t    if (!opts) {\n\t        return defaults;\n\t    }\n\n\t    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {\n\t        throw new TypeError('Decoder has to be a function.');\n\t    }\n\n\t    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n\t        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n\t    }\n\t    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n\t    return {\n\t        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n\t        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n\t        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n\t        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n\t        charset: charset,\n\t        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n\t        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n\t        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n\t        delimiter: typeof opts.delimiter === 'string' || utils$1.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n\t        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n\t        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n\t        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n\t        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n\t        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n\t        parseArrays: opts.parseArrays !== false,\n\t        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n\t        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n\t    };\n\t};\n\n\tvar parse$1 = function (str, opts) {\n\t    var options = normalizeParseOptions(opts);\n\n\t    if (str === '' || str === null || typeof str === 'undefined') {\n\t        return options.plainObjects ? Object.create(null) : {};\n\t    }\n\n\t    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n\t    var obj = options.plainObjects ? Object.create(null) : {};\n\n\t    // Iterate over the keys and setup the new object\n\n\t    var keys = Object.keys(tempObj);\n\t    for (var i = 0; i < keys.length; ++i) {\n\t        var key = keys[i];\n\t        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n\t        obj = utils$1.merge(obj, newObj, options);\n\t    }\n\n\t    if (options.allowSparse === true) {\n\t        return obj;\n\t    }\n\n\t    return utils$1.compact(obj);\n\t};\n\n\tvar stringify = stringify_1;\n\tvar parse = parse$1;\n\tvar formats = formats$3;\n\n\tvar lib = {\n\t    formats: formats,\n\t    parse: parse,\n\t    stringify: stringify\n\t};\n\n\t/** Detect free variable `global` from Node.js. */\n\tvar freeGlobal = typeof global$1 == 'object' && global$1 && global$1.Object === Object && global$1;\n\n\t/** Detect free variable `self`. */\n\tvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n\t/** Used as a reference to the global object. */\n\tvar root = freeGlobal || freeSelf || Function('return this')();\n\n\t/** Built-in value references. */\n\tvar Symbol$1 = root.Symbol;\n\n\t/** Used for built-in method references. */\n\tvar objectProto$f = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$c = objectProto$f.hasOwnProperty;\n\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar nativeObjectToString$1 = objectProto$f.toString;\n\n\t/** Built-in value references. */\n\tvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n\t/**\n\t * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the raw `toStringTag`.\n\t */\n\tfunction getRawTag(value) {\n\t  var isOwn = hasOwnProperty$c.call(value, symToStringTag$1),\n\t      tag = value[symToStringTag$1];\n\n\t  try {\n\t    value[symToStringTag$1] = undefined;\n\t    var unmasked = true;\n\t  } catch (e) {}\n\n\t  var result = nativeObjectToString$1.call(value);\n\t  if (unmasked) {\n\t    if (isOwn) {\n\t      value[symToStringTag$1] = tag;\n\t    } else {\n\t      delete value[symToStringTag$1];\n\t    }\n\t  }\n\t  return result;\n\t}\n\n\t/** Used for built-in method references. */\n\tvar objectProto$e = Object.prototype;\n\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar nativeObjectToString = objectProto$e.toString;\n\n\t/**\n\t * Converts `value` to a string using `Object.prototype.toString`.\n\t *\n\t * @private\n\t * @param {*} value The value to convert.\n\t * @returns {string} Returns the converted string.\n\t */\n\tfunction objectToString(value) {\n\t  return nativeObjectToString.call(value);\n\t}\n\n\t/** `Object#toString` result references. */\n\tvar nullTag = '[object Null]',\n\t    undefinedTag = '[object Undefined]';\n\n\t/** Built-in value references. */\n\tvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n\t/**\n\t * The base implementation of `getTag` without fallbacks for buggy environments.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the `toStringTag`.\n\t */\n\tfunction baseGetTag(value) {\n\t  if (value == null) {\n\t    return value === undefined ? undefinedTag : nullTag;\n\t  }\n\t  return (symToStringTag && symToStringTag in Object(value))\n\t    ? getRawTag(value)\n\t    : objectToString(value);\n\t}\n\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject$1(value) {\n\t  var type = typeof value;\n\t  return value != null && (type == 'object' || type == 'function');\n\t}\n\n\t/** `Object#toString` result references. */\n\tvar asyncTag = '[object AsyncFunction]',\n\t    funcTag$2 = '[object Function]',\n\t    genTag$1 = '[object GeneratorFunction]',\n\t    proxyTag = '[object Proxy]';\n\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction$1(value) {\n\t  if (!isObject$1(value)) {\n\t    return false;\n\t  }\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\t  var tag = baseGetTag(value);\n\t  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;\n\t}\n\n\t/** Used to detect overreaching core-js shims. */\n\tvar coreJsData = root['__core-js_shared__'];\n\n\t/** Used to detect methods masquerading as native. */\n\tvar maskSrcKey = (function() {\n\t  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n\t  return uid ? ('Symbol(src)_1.' + uid) : '';\n\t}());\n\n\t/**\n\t * Checks if `func` has its source masked.\n\t *\n\t * @private\n\t * @param {Function} func The function to check.\n\t * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n\t */\n\tfunction isMasked(func) {\n\t  return !!maskSrcKey && (maskSrcKey in func);\n\t}\n\n\t/** Used for built-in method references. */\n\tvar funcProto$1 = Function.prototype;\n\n\t/** Used to resolve the decompiled source of functions. */\n\tvar funcToString$1 = funcProto$1.toString;\n\n\t/**\n\t * Converts `func` to its source code.\n\t *\n\t * @private\n\t * @param {Function} func The function to convert.\n\t * @returns {string} Returns the source code.\n\t */\n\tfunction toSource(func) {\n\t  if (func != null) {\n\t    try {\n\t      return funcToString$1.call(func);\n\t    } catch (e) {}\n\t    try {\n\t      return (func + '');\n\t    } catch (e) {}\n\t  }\n\t  return '';\n\t}\n\n\t/**\n\t * Used to match `RegExp`\n\t * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n\t */\n\tvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n\t/** Used to detect host constructors (Safari). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n\t/** Used for built-in method references. */\n\tvar funcProto = Function.prototype,\n\t    objectProto$d = Object.prototype;\n\n\t/** Used to resolve the decompiled source of functions. */\n\tvar funcToString = funcProto.toString;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$b = objectProto$d.hasOwnProperty;\n\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  funcToString.call(hasOwnProperty$b).replace(reRegExpChar, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\n\t/**\n\t * The base implementation of `_.isNative` without bad shim checks.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function,\n\t *  else `false`.\n\t */\n\tfunction baseIsNative(value) {\n\t  if (!isObject$1(value) || isMasked(value)) {\n\t    return false;\n\t  }\n\t  var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;\n\t  return pattern.test(toSource(value));\n\t}\n\n\t/**\n\t * Gets the value at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} [object] The object to query.\n\t * @param {string} key The key of the property to get.\n\t * @returns {*} Returns the property value.\n\t */\n\tfunction getValue(object, key) {\n\t  return object == null ? undefined : object[key];\n\t}\n\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = getValue(object, key);\n\t  return baseIsNative(value) ? value : undefined;\n\t}\n\n\tvar defineProperty = (function() {\n\t  try {\n\t    var func = getNative(Object, 'defineProperty');\n\t    func({}, '', {});\n\t    return func;\n\t  } catch (e) {}\n\t}());\n\n\t/**\n\t * The base implementation of `assignValue` and `assignMergeValue` without\n\t * value checks.\n\t *\n\t * @private\n\t * @param {Object} object The object to modify.\n\t * @param {string} key The key of the property to assign.\n\t * @param {*} value The value to assign.\n\t */\n\tfunction baseAssignValue(object, key, value) {\n\t  if (key == '__proto__' && defineProperty) {\n\t    defineProperty(object, key, {\n\t      'configurable': true,\n\t      'enumerable': true,\n\t      'value': value,\n\t      'writable': true\n\t    });\n\t  } else {\n\t    object[key] = value;\n\t  }\n\t}\n\n\t/**\n\t * Performs a\n\t * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t * comparison between two values to determine if they are equivalent.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to compare.\n\t * @param {*} other The other value to compare.\n\t * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t * @example\n\t *\n\t * var object = { 'a': 1 };\n\t * var other = { 'a': 1 };\n\t *\n\t * _.eq(object, object);\n\t * // => true\n\t *\n\t * _.eq(object, other);\n\t * // => false\n\t *\n\t * _.eq('a', 'a');\n\t * // => true\n\t *\n\t * _.eq('a', Object('a'));\n\t * // => false\n\t *\n\t * _.eq(NaN, NaN);\n\t * // => true\n\t */\n\tfunction eq(value, other) {\n\t  return value === other || (value !== value && other !== other);\n\t}\n\n\t/** Used for built-in method references. */\n\tvar objectProto$c = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$a = objectProto$c.hasOwnProperty;\n\n\t/**\n\t * Assigns `value` to `key` of `object` if the existing value is not equivalent\n\t * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t * for equality comparisons.\n\t *\n\t * @private\n\t * @param {Object} object The object to modify.\n\t * @param {string} key The key of the property to assign.\n\t * @param {*} value The value to assign.\n\t */\n\tfunction assignValue(object, key, value) {\n\t  var objValue = object[key];\n\t  if (!(hasOwnProperty$a.call(object, key) && eq(objValue, value)) ||\n\t      (value === undefined && !(key in object))) {\n\t    baseAssignValue(object, key, value);\n\t  }\n\t}\n\n\t/**\n\t * Checks if `value` is classified as an `Array` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n\t * @example\n\t *\n\t * _.isArray([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArray(document.body.children);\n\t * // => false\n\t *\n\t * _.isArray('abc');\n\t * // => false\n\t *\n\t * _.isArray(_.noop);\n\t * // => false\n\t */\n\tvar isArray = Array.isArray;\n\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return value != null && typeof value == 'object';\n\t}\n\n\t/** `Object#toString` result references. */\n\tvar symbolTag$3 = '[object Symbol]';\n\n\t/**\n\t * Checks if `value` is classified as a `Symbol` primitive or object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n\t * @example\n\t *\n\t * _.isSymbol(Symbol.iterator);\n\t * // => true\n\t *\n\t * _.isSymbol('abc');\n\t * // => false\n\t */\n\tfunction isSymbol(value) {\n\t  return typeof value == 'symbol' ||\n\t    (isObjectLike(value) && baseGetTag(value) == symbolTag$3);\n\t}\n\n\t/** Used to match property names within property paths. */\n\tvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n\t    reIsPlainProp = /^\\w*$/;\n\n\t/**\n\t * Checks if `value` is a property name and not a property path.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {Object} [object] The object to query keys on.\n\t * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n\t */\n\tfunction isKey(value, object) {\n\t  if (isArray(value)) {\n\t    return false;\n\t  }\n\t  var type = typeof value;\n\t  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n\t      value == null || isSymbol(value)) {\n\t    return true;\n\t  }\n\t  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n\t    (object != null && value in Object(object));\n\t}\n\n\t/* Built-in method references that are verified to be native. */\n\tvar nativeCreate = getNative(Object, 'create');\n\n\t/**\n\t * Removes all key-value entries from the hash.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf Hash\n\t */\n\tfunction hashClear() {\n\t  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n\t  this.size = 0;\n\t}\n\n\t/**\n\t * Removes `key` and its value from the hash.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf Hash\n\t * @param {Object} hash The hash to modify.\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction hashDelete(key) {\n\t  var result = this.has(key) && delete this.__data__[key];\n\t  this.size -= result ? 1 : 0;\n\t  return result;\n\t}\n\n\t/** Used to stand-in for `undefined` hash values. */\n\tvar HASH_UNDEFINED$2 = '__lodash_hash_undefined__';\n\n\t/** Used for built-in method references. */\n\tvar objectProto$b = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$9 = objectProto$b.hasOwnProperty;\n\n\t/**\n\t * Gets the hash value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf Hash\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction hashGet(key) {\n\t  var data = this.__data__;\n\t  if (nativeCreate) {\n\t    var result = data[key];\n\t    return result === HASH_UNDEFINED$2 ? undefined : result;\n\t  }\n\t  return hasOwnProperty$9.call(data, key) ? data[key] : undefined;\n\t}\n\n\t/** Used for built-in method references. */\n\tvar objectProto$a = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$8 = objectProto$a.hasOwnProperty;\n\n\t/**\n\t * Checks if a hash value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf Hash\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction hashHas(key) {\n\t  var data = this.__data__;\n\t  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$8.call(data, key);\n\t}\n\n\t/** Used to stand-in for `undefined` hash values. */\n\tvar HASH_UNDEFINED$1 = '__lodash_hash_undefined__';\n\n\t/**\n\t * Sets the hash `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf Hash\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the hash instance.\n\t */\n\tfunction hashSet(key, value) {\n\t  var data = this.__data__;\n\t  this.size += this.has(key) ? 0 : 1;\n\t  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;\n\t  return this;\n\t}\n\n\t/**\n\t * Creates a hash object.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction Hash(entries) {\n\t  var index = -1,\n\t      length = entries == null ? 0 : entries.length;\n\n\t  this.clear();\n\t  while (++index < length) {\n\t    var entry = entries[index];\n\t    this.set(entry[0], entry[1]);\n\t  }\n\t}\n\n\t// Add methods to `Hash`.\n\tHash.prototype.clear = hashClear;\n\tHash.prototype['delete'] = hashDelete;\n\tHash.prototype.get = hashGet;\n\tHash.prototype.has = hashHas;\n\tHash.prototype.set = hashSet;\n\n\t/**\n\t * Removes all key-value entries from the list cache.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf ListCache\n\t */\n\tfunction listCacheClear() {\n\t  this.__data__ = [];\n\t  this.size = 0;\n\t}\n\n\t/**\n\t * Gets the index at which the `key` is found in `array` of key-value pairs.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {*} key The key to search for.\n\t * @returns {number} Returns the index of the matched value, else `-1`.\n\t */\n\tfunction assocIndexOf(array, key) {\n\t  var length = array.length;\n\t  while (length--) {\n\t    if (eq(array[length][0], key)) {\n\t      return length;\n\t    }\n\t  }\n\t  return -1;\n\t}\n\n\t/** Used for built-in method references. */\n\tvar arrayProto = Array.prototype;\n\n\t/** Built-in value references. */\n\tvar splice = arrayProto.splice;\n\n\t/**\n\t * Removes `key` and its value from the list cache.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf ListCache\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction listCacheDelete(key) {\n\t  var data = this.__data__,\n\t      index = assocIndexOf(data, key);\n\n\t  if (index < 0) {\n\t    return false;\n\t  }\n\t  var lastIndex = data.length - 1;\n\t  if (index == lastIndex) {\n\t    data.pop();\n\t  } else {\n\t    splice.call(data, index, 1);\n\t  }\n\t  --this.size;\n\t  return true;\n\t}\n\n\t/**\n\t * Gets the list cache value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf ListCache\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction listCacheGet(key) {\n\t  var data = this.__data__,\n\t      index = assocIndexOf(data, key);\n\n\t  return index < 0 ? undefined : data[index][1];\n\t}\n\n\t/**\n\t * Checks if a list cache value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf ListCache\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction listCacheHas(key) {\n\t  return assocIndexOf(this.__data__, key) > -1;\n\t}\n\n\t/**\n\t * Sets the list cache `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf ListCache\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the list cache instance.\n\t */\n\tfunction listCacheSet(key, value) {\n\t  var data = this.__data__,\n\t      index = assocIndexOf(data, key);\n\n\t  if (index < 0) {\n\t    ++this.size;\n\t    data.push([key, value]);\n\t  } else {\n\t    data[index][1] = value;\n\t  }\n\t  return this;\n\t}\n\n\t/**\n\t * Creates an list cache object.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction ListCache(entries) {\n\t  var index = -1,\n\t      length = entries == null ? 0 : entries.length;\n\n\t  this.clear();\n\t  while (++index < length) {\n\t    var entry = entries[index];\n\t    this.set(entry[0], entry[1]);\n\t  }\n\t}\n\n\t// Add methods to `ListCache`.\n\tListCache.prototype.clear = listCacheClear;\n\tListCache.prototype['delete'] = listCacheDelete;\n\tListCache.prototype.get = listCacheGet;\n\tListCache.prototype.has = listCacheHas;\n\tListCache.prototype.set = listCacheSet;\n\n\t/* Built-in method references that are verified to be native. */\n\tvar Map$1 = getNative(root, 'Map');\n\n\t/**\n\t * Removes all key-value entries from the map.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf MapCache\n\t */\n\tfunction mapCacheClear() {\n\t  this.size = 0;\n\t  this.__data__ = {\n\t    'hash': new Hash,\n\t    'map': new (Map$1 || ListCache),\n\t    'string': new Hash\n\t  };\n\t}\n\n\t/**\n\t * Checks if `value` is suitable for use as unique object key.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n\t */\n\tfunction isKeyable(value) {\n\t  var type = typeof value;\n\t  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n\t    ? (value !== '__proto__')\n\t    : (value === null);\n\t}\n\n\t/**\n\t * Gets the data for `map`.\n\t *\n\t * @private\n\t * @param {Object} map The map to query.\n\t * @param {string} key The reference key.\n\t * @returns {*} Returns the map data.\n\t */\n\tfunction getMapData(map, key) {\n\t  var data = map.__data__;\n\t  return isKeyable(key)\n\t    ? data[typeof key == 'string' ? 'string' : 'hash']\n\t    : data.map;\n\t}\n\n\t/**\n\t * Removes `key` and its value from the map.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf MapCache\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction mapCacheDelete(key) {\n\t  var result = getMapData(this, key)['delete'](key);\n\t  this.size -= result ? 1 : 0;\n\t  return result;\n\t}\n\n\t/**\n\t * Gets the map value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf MapCache\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction mapCacheGet(key) {\n\t  return getMapData(this, key).get(key);\n\t}\n\n\t/**\n\t * Checks if a map value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf MapCache\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction mapCacheHas(key) {\n\t  return getMapData(this, key).has(key);\n\t}\n\n\t/**\n\t * Sets the map `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf MapCache\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the map cache instance.\n\t */\n\tfunction mapCacheSet(key, value) {\n\t  var data = getMapData(this, key),\n\t      size = data.size;\n\n\t  data.set(key, value);\n\t  this.size += data.size == size ? 0 : 1;\n\t  return this;\n\t}\n\n\t/**\n\t * Creates a map cache object to store key-value pairs.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction MapCache(entries) {\n\t  var index = -1,\n\t      length = entries == null ? 0 : entries.length;\n\n\t  this.clear();\n\t  while (++index < length) {\n\t    var entry = entries[index];\n\t    this.set(entry[0], entry[1]);\n\t  }\n\t}\n\n\t// Add methods to `MapCache`.\n\tMapCache.prototype.clear = mapCacheClear;\n\tMapCache.prototype['delete'] = mapCacheDelete;\n\tMapCache.prototype.get = mapCacheGet;\n\tMapCache.prototype.has = mapCacheHas;\n\tMapCache.prototype.set = mapCacheSet;\n\n\t/** Error message constants. */\n\tvar FUNC_ERROR_TEXT = 'Expected a function';\n\n\t/**\n\t * Creates a function that memoizes the result of `func`. If `resolver` is\n\t * provided, it determines the cache key for storing the result based on the\n\t * arguments provided to the memoized function. By default, the first argument\n\t * provided to the memoized function is used as the map cache key. The `func`\n\t * is invoked with the `this` binding of the memoized function.\n\t *\n\t * **Note:** The cache is exposed as the `cache` property on the memoized\n\t * function. Its creation may be customized by replacing the `_.memoize.Cache`\n\t * constructor with one whose instances implement the\n\t * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n\t * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Function\n\t * @param {Function} func The function to have its output memoized.\n\t * @param {Function} [resolver] The function to resolve the cache key.\n\t * @returns {Function} Returns the new memoized function.\n\t * @example\n\t *\n\t * var object = { 'a': 1, 'b': 2 };\n\t * var other = { 'c': 3, 'd': 4 };\n\t *\n\t * var values = _.memoize(_.values);\n\t * values(object);\n\t * // => [1, 2]\n\t *\n\t * values(other);\n\t * // => [3, 4]\n\t *\n\t * object.a = 2;\n\t * values(object);\n\t * // => [1, 2]\n\t *\n\t * // Modify the result cache.\n\t * values.cache.set(object, ['a', 'b']);\n\t * values(object);\n\t * // => ['a', 'b']\n\t *\n\t * // Replace `_.memoize.Cache`.\n\t * _.memoize.Cache = WeakMap;\n\t */\n\tfunction memoize(func, resolver) {\n\t  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n\t    throw new TypeError(FUNC_ERROR_TEXT);\n\t  }\n\t  var memoized = function() {\n\t    var args = arguments,\n\t        key = resolver ? resolver.apply(this, args) : args[0],\n\t        cache = memoized.cache;\n\n\t    if (cache.has(key)) {\n\t      return cache.get(key);\n\t    }\n\t    var result = func.apply(this, args);\n\t    memoized.cache = cache.set(key, result) || cache;\n\t    return result;\n\t  };\n\t  memoized.cache = new (memoize.Cache || MapCache);\n\t  return memoized;\n\t}\n\n\t// Expose `MapCache`.\n\tmemoize.Cache = MapCache;\n\n\t/** Used as the maximum memoize cache size. */\n\tvar MAX_MEMOIZE_SIZE = 500;\n\n\t/**\n\t * A specialized version of `_.memoize` which clears the memoized function's\n\t * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n\t *\n\t * @private\n\t * @param {Function} func The function to have its output memoized.\n\t * @returns {Function} Returns the new memoized function.\n\t */\n\tfunction memoizeCapped(func) {\n\t  var result = memoize(func, function(key) {\n\t    if (cache.size === MAX_MEMOIZE_SIZE) {\n\t      cache.clear();\n\t    }\n\t    return key;\n\t  });\n\n\t  var cache = result.cache;\n\t  return result;\n\t}\n\n\t/** Used to match property names within property paths. */\n\tvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n\t/** Used to match backslashes in property paths. */\n\tvar reEscapeChar = /\\\\(\\\\)?/g;\n\n\t/**\n\t * Converts `string` to a property path array.\n\t *\n\t * @private\n\t * @param {string} string The string to convert.\n\t * @returns {Array} Returns the property path array.\n\t */\n\tvar stringToPath = memoizeCapped(function(string) {\n\t  var result = [];\n\t  if (string.charCodeAt(0) === 46 /* . */) {\n\t    result.push('');\n\t  }\n\t  string.replace(rePropName, function(match, number, quote, subString) {\n\t    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n\t  });\n\t  return result;\n\t});\n\n\t/**\n\t * A specialized version of `_.map` for arrays without support for iteratee\n\t * shorthands.\n\t *\n\t * @private\n\t * @param {Array} [array] The array to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array} Returns the new mapped array.\n\t */\n\tfunction arrayMap(array, iteratee) {\n\t  var index = -1,\n\t      length = array == null ? 0 : array.length,\n\t      result = Array(length);\n\n\t  while (++index < length) {\n\t    result[index] = iteratee(array[index], index, array);\n\t  }\n\t  return result;\n\t}\n\n\t/** Used as references for various `Number` constants. */\n\tvar INFINITY$3 = 1 / 0;\n\n\t/** Used to convert symbols to primitives and strings. */\n\tvar symbolProto$2 = Symbol$1 ? Symbol$1.prototype : undefined,\n\t    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;\n\n\t/**\n\t * The base implementation of `_.toString` which doesn't convert nullish\n\t * values to empty strings.\n\t *\n\t * @private\n\t * @param {*} value The value to process.\n\t * @returns {string} Returns the string.\n\t */\n\tfunction baseToString(value) {\n\t  // Exit early for strings to avoid a performance hit in some environments.\n\t  if (typeof value == 'string') {\n\t    return value;\n\t  }\n\t  if (isArray(value)) {\n\t    // Recursively convert values (susceptible to call stack limits).\n\t    return arrayMap(value, baseToString) + '';\n\t  }\n\t  if (isSymbol(value)) {\n\t    return symbolToString ? symbolToString.call(value) : '';\n\t  }\n\t  var result = (value + '');\n\t  return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;\n\t}\n\n\t/**\n\t * Converts `value` to a string. An empty string is returned for `null`\n\t * and `undefined` values. The sign of `-0` is preserved.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to convert.\n\t * @returns {string} Returns the converted string.\n\t * @example\n\t *\n\t * _.toString(null);\n\t * // => ''\n\t *\n\t * _.toString(-0);\n\t * // => '-0'\n\t *\n\t * _.toString([1, 2, 3]);\n\t * // => '1,2,3'\n\t */\n\tfunction toString(value) {\n\t  return value == null ? '' : baseToString(value);\n\t}\n\n\t/**\n\t * Casts `value` to a path array if it's not one.\n\t *\n\t * @private\n\t * @param {*} value The value to inspect.\n\t * @param {Object} [object] The object to query keys on.\n\t * @returns {Array} Returns the cast property path array.\n\t */\n\tfunction castPath(value, object) {\n\t  if (isArray(value)) {\n\t    return value;\n\t  }\n\t  return isKey(value, object) ? [value] : stringToPath(toString(value));\n\t}\n\n\t/** Used as references for various `Number` constants. */\n\tvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n\t/** Used to detect unsigned integer values. */\n\tvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n\t/**\n\t * Checks if `value` is a valid array-like index.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t */\n\tfunction isIndex(value, length) {\n\t  var type = typeof value;\n\t  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n\n\t  return !!length &&\n\t    (type == 'number' ||\n\t      (type != 'symbol' && reIsUint.test(value))) &&\n\t        (value > -1 && value % 1 == 0 && value < length);\n\t}\n\n\t/** Used as references for various `Number` constants. */\n\tvar INFINITY$2 = 1 / 0;\n\n\t/**\n\t * Converts `value` to a string key if it's not a string or symbol.\n\t *\n\t * @private\n\t * @param {*} value The value to inspect.\n\t * @returns {string|symbol} Returns the key.\n\t */\n\tfunction toKey(value) {\n\t  if (typeof value == 'string' || isSymbol(value)) {\n\t    return value;\n\t  }\n\t  var result = (value + '');\n\t  return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;\n\t}\n\n\t/**\n\t * The base implementation of `_.set`.\n\t *\n\t * @private\n\t * @param {Object} object The object to modify.\n\t * @param {Array|string} path The path of the property to set.\n\t * @param {*} value The value to set.\n\t * @param {Function} [customizer] The function to customize path creation.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseSet(object, path, value, customizer) {\n\t  if (!isObject$1(object)) {\n\t    return object;\n\t  }\n\t  path = castPath(path, object);\n\n\t  var index = -1,\n\t      length = path.length,\n\t      lastIndex = length - 1,\n\t      nested = object;\n\n\t  while (nested != null && ++index < length) {\n\t    var key = toKey(path[index]),\n\t        newValue = value;\n\n\t    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n\t      return object;\n\t    }\n\n\t    if (index != lastIndex) {\n\t      var objValue = nested[key];\n\t      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n\t      if (newValue === undefined) {\n\t        newValue = isObject$1(objValue)\n\t          ? objValue\n\t          : (isIndex(path[index + 1]) ? [] : {});\n\t      }\n\t    }\n\t    assignValue(nested, key, newValue);\n\t    nested = nested[key];\n\t  }\n\t  return object;\n\t}\n\n\t/**\n\t * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n\t * it's created. Arrays are created for missing index properties while objects\n\t * are created for all other missing properties. Use `_.setWith` to customize\n\t * `path` creation.\n\t *\n\t * **Note:** This method mutates `object`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 3.7.0\n\t * @category Object\n\t * @param {Object} object The object to modify.\n\t * @param {Array|string} path The path of the property to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns `object`.\n\t * @example\n\t *\n\t * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\t *\n\t * _.set(object, 'a[0].b.c', 4);\n\t * console.log(object.a[0].b.c);\n\t * // => 4\n\t *\n\t * _.set(object, ['x', '0', 'y', 'z'], 5);\n\t * console.log(object.x[0].y.z);\n\t * // => 5\n\t */\n\tfunction set(object, path, value) {\n\t  return object == null ? object : baseSet(object, path, value);\n\t}\n\n\t/**\n\t * The base implementation of `_.get` without support for default values.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {Array|string} path The path of the property to get.\n\t * @returns {*} Returns the resolved value.\n\t */\n\tfunction baseGet(object, path) {\n\t  path = castPath(path, object);\n\n\t  var index = 0,\n\t      length = path.length;\n\n\t  while (object != null && index < length) {\n\t    object = object[toKey(path[index++])];\n\t  }\n\t  return (index && index == length) ? object : undefined;\n\t}\n\n\t/**\n\t * Gets the value at `path` of `object`. If the resolved value is\n\t * `undefined`, the `defaultValue` is returned in its place.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 3.7.0\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @param {Array|string} path The path of the property to get.\n\t * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n\t * @returns {*} Returns the resolved value.\n\t * @example\n\t *\n\t * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\t *\n\t * _.get(object, 'a[0].b.c');\n\t * // => 3\n\t *\n\t * _.get(object, ['a', '0', 'b', 'c']);\n\t * // => 3\n\t *\n\t * _.get(object, 'a.b.c', 'default');\n\t * // => 'default'\n\t */\n\tfunction get(object, path, defaultValue) {\n\t  var result = object == null ? undefined : baseGet(object, path);\n\t  return result === undefined ? defaultValue : result;\n\t}\n\n\t/** Used to stand-in for `undefined` hash values. */\n\tvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n\t/**\n\t * Adds `value` to the array cache.\n\t *\n\t * @private\n\t * @name add\n\t * @memberOf SetCache\n\t * @alias push\n\t * @param {*} value The value to cache.\n\t * @returns {Object} Returns the cache instance.\n\t */\n\tfunction setCacheAdd(value) {\n\t  this.__data__.set(value, HASH_UNDEFINED);\n\t  return this;\n\t}\n\n\t/**\n\t * Checks if `value` is in the array cache.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf SetCache\n\t * @param {*} value The value to search for.\n\t * @returns {number} Returns `true` if `value` is found, else `false`.\n\t */\n\tfunction setCacheHas(value) {\n\t  return this.__data__.has(value);\n\t}\n\n\t/**\n\t *\n\t * Creates an array cache object to store unique values.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [values] The values to cache.\n\t */\n\tfunction SetCache(values) {\n\t  var index = -1,\n\t      length = values == null ? 0 : values.length;\n\n\t  this.__data__ = new MapCache;\n\t  while (++index < length) {\n\t    this.add(values[index]);\n\t  }\n\t}\n\n\t// Add methods to `SetCache`.\n\tSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n\tSetCache.prototype.has = setCacheHas;\n\n\t/**\n\t * The base implementation of `_.findIndex` and `_.findLastIndex` without\n\t * support for iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {Function} predicate The function invoked per iteration.\n\t * @param {number} fromIndex The index to search from.\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {number} Returns the index of the matched value, else `-1`.\n\t */\n\tfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n\t  var length = array.length,\n\t      index = fromIndex + (fromRight ? 1 : -1);\n\n\t  while ((fromRight ? index-- : ++index < length)) {\n\t    if (predicate(array[index], index, array)) {\n\t      return index;\n\t    }\n\t  }\n\t  return -1;\n\t}\n\n\t/**\n\t * The base implementation of `_.isNaN` without support for number objects.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n\t */\n\tfunction baseIsNaN(value) {\n\t  return value !== value;\n\t}\n\n\t/**\n\t * A specialized version of `_.indexOf` which performs strict equality\n\t * comparisons of values, i.e. `===`.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {*} value The value to search for.\n\t * @param {number} fromIndex The index to search from.\n\t * @returns {number} Returns the index of the matched value, else `-1`.\n\t */\n\tfunction strictIndexOf(array, value, fromIndex) {\n\t  var index = fromIndex - 1,\n\t      length = array.length;\n\n\t  while (++index < length) {\n\t    if (array[index] === value) {\n\t      return index;\n\t    }\n\t  }\n\t  return -1;\n\t}\n\n\t/**\n\t * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {*} value The value to search for.\n\t * @param {number} fromIndex The index to search from.\n\t * @returns {number} Returns the index of the matched value, else `-1`.\n\t */\n\tfunction baseIndexOf(array, value, fromIndex) {\n\t  return value === value\n\t    ? strictIndexOf(array, value, fromIndex)\n\t    : baseFindIndex(array, baseIsNaN, fromIndex);\n\t}\n\n\t/**\n\t * A specialized version of `_.includes` for arrays without support for\n\t * specifying an index to search from.\n\t *\n\t * @private\n\t * @param {Array} [array] The array to inspect.\n\t * @param {*} target The value to search for.\n\t * @returns {boolean} Returns `true` if `target` is found, else `false`.\n\t */\n\tfunction arrayIncludes(array, value) {\n\t  var length = array == null ? 0 : array.length;\n\t  return !!length && baseIndexOf(array, value, 0) > -1;\n\t}\n\n\t/**\n\t * This function is like `arrayIncludes` except that it accepts a comparator.\n\t *\n\t * @private\n\t * @param {Array} [array] The array to inspect.\n\t * @param {*} target The value to search for.\n\t * @param {Function} comparator The comparator invoked per element.\n\t * @returns {boolean} Returns `true` if `target` is found, else `false`.\n\t */\n\tfunction arrayIncludesWith(array, value, comparator) {\n\t  var index = -1,\n\t      length = array == null ? 0 : array.length;\n\n\t  while (++index < length) {\n\t    if (comparator(value, array[index])) {\n\t      return true;\n\t    }\n\t  }\n\t  return false;\n\t}\n\n\t/**\n\t * Checks if a `cache` value for `key` exists.\n\t *\n\t * @private\n\t * @param {Object} cache The cache to query.\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction cacheHas(cache, key) {\n\t  return cache.has(key);\n\t}\n\n\t/* Built-in method references that are verified to be native. */\n\tvar Set$1 = getNative(root, 'Set');\n\n\t/**\n\t * This method returns `undefined`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 2.3.0\n\t * @category Util\n\t * @example\n\t *\n\t * _.times(2, _.noop);\n\t * // => [undefined, undefined]\n\t */\n\tfunction noop() {\n\t  // No operation performed.\n\t}\n\n\t/**\n\t * Converts `set` to an array of its values.\n\t *\n\t * @private\n\t * @param {Object} set The set to convert.\n\t * @returns {Array} Returns the values.\n\t */\n\tfunction setToArray(set) {\n\t  var index = -1,\n\t      result = Array(set.size);\n\n\t  set.forEach(function(value) {\n\t    result[++index] = value;\n\t  });\n\t  return result;\n\t}\n\n\t/** Used as references for various `Number` constants. */\n\tvar INFINITY$1 = 1 / 0;\n\n\t/**\n\t * Creates a set object of `values`.\n\t *\n\t * @private\n\t * @param {Array} values The values to add to the set.\n\t * @returns {Object} Returns the new set.\n\t */\n\tvar createSet = !(Set$1 && (1 / setToArray(new Set$1([,-0]))[1]) == INFINITY$1) ? noop : function(values) {\n\t  return new Set$1(values);\n\t};\n\n\t/** Used as the size to enable large array optimizations. */\n\tvar LARGE_ARRAY_SIZE$1 = 200;\n\n\t/**\n\t * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {Function} [iteratee] The iteratee invoked per element.\n\t * @param {Function} [comparator] The comparator invoked per element.\n\t * @returns {Array} Returns the new duplicate free array.\n\t */\n\tfunction baseUniq(array, iteratee, comparator) {\n\t  var index = -1,\n\t      includes = arrayIncludes,\n\t      length = array.length,\n\t      isCommon = true,\n\t      result = [],\n\t      seen = result;\n\n\t  if (comparator) {\n\t    isCommon = false;\n\t    includes = arrayIncludesWith;\n\t  }\n\t  else if (length >= LARGE_ARRAY_SIZE$1) {\n\t    var set = iteratee ? null : createSet(array);\n\t    if (set) {\n\t      return setToArray(set);\n\t    }\n\t    isCommon = false;\n\t    includes = cacheHas;\n\t    seen = new SetCache;\n\t  }\n\t  else {\n\t    seen = iteratee ? [] : result;\n\t  }\n\t  outer:\n\t  while (++index < length) {\n\t    var value = array[index],\n\t        computed = iteratee ? iteratee(value) : value;\n\n\t    value = (comparator || value !== 0) ? value : 0;\n\t    if (isCommon && computed === computed) {\n\t      var seenIndex = seen.length;\n\t      while (seenIndex--) {\n\t        if (seen[seenIndex] === computed) {\n\t          continue outer;\n\t        }\n\t      }\n\t      if (iteratee) {\n\t        seen.push(computed);\n\t      }\n\t      result.push(value);\n\t    }\n\t    else if (!includes(seen, computed, comparator)) {\n\t      if (seen !== result) {\n\t        seen.push(computed);\n\t      }\n\t      result.push(value);\n\t    }\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * Creates a duplicate-free version of an array, using\n\t * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t * for equality comparisons, in which only the first occurrence of each element\n\t * is kept. The order of result values is determined by the order they occur\n\t * in the array.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Array\n\t * @param {Array} array The array to inspect.\n\t * @returns {Array} Returns the new duplicate free array.\n\t * @example\n\t *\n\t * _.uniq([2, 1, 2]);\n\t * // => [2, 1]\n\t */\n\tfunction uniq(array) {\n\t  return (array && array.length) ? baseUniq(array) : [];\n\t}\n\n\t/**\n\t * Removes all key-value entries from the stack.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf Stack\n\t */\n\tfunction stackClear() {\n\t  this.__data__ = new ListCache;\n\t  this.size = 0;\n\t}\n\n\t/**\n\t * Removes `key` and its value from the stack.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf Stack\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction stackDelete(key) {\n\t  var data = this.__data__,\n\t      result = data['delete'](key);\n\n\t  this.size = data.size;\n\t  return result;\n\t}\n\n\t/**\n\t * Gets the stack value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf Stack\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction stackGet(key) {\n\t  return this.__data__.get(key);\n\t}\n\n\t/**\n\t * Checks if a stack value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf Stack\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction stackHas(key) {\n\t  return this.__data__.has(key);\n\t}\n\n\t/** Used as the size to enable large array optimizations. */\n\tvar LARGE_ARRAY_SIZE = 200;\n\n\t/**\n\t * Sets the stack `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf Stack\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the stack cache instance.\n\t */\n\tfunction stackSet(key, value) {\n\t  var data = this.__data__;\n\t  if (data instanceof ListCache) {\n\t    var pairs = data.__data__;\n\t    if (!Map$1 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n\t      pairs.push([key, value]);\n\t      this.size = ++data.size;\n\t      return this;\n\t    }\n\t    data = this.__data__ = new MapCache(pairs);\n\t  }\n\t  data.set(key, value);\n\t  this.size = data.size;\n\t  return this;\n\t}\n\n\t/**\n\t * Creates a stack cache object to store key-value pairs.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction Stack(entries) {\n\t  var data = this.__data__ = new ListCache(entries);\n\t  this.size = data.size;\n\t}\n\n\t// Add methods to `Stack`.\n\tStack.prototype.clear = stackClear;\n\tStack.prototype['delete'] = stackDelete;\n\tStack.prototype.get = stackGet;\n\tStack.prototype.has = stackHas;\n\tStack.prototype.set = stackSet;\n\n\t/**\n\t * A specialized version of `_.some` for arrays without support for iteratee\n\t * shorthands.\n\t *\n\t * @private\n\t * @param {Array} [array] The array to iterate over.\n\t * @param {Function} predicate The function invoked per iteration.\n\t * @returns {boolean} Returns `true` if any element passes the predicate check,\n\t *  else `false`.\n\t */\n\tfunction arraySome(array, predicate) {\n\t  var index = -1,\n\t      length = array == null ? 0 : array.length;\n\n\t  while (++index < length) {\n\t    if (predicate(array[index], index, array)) {\n\t      return true;\n\t    }\n\t  }\n\t  return false;\n\t}\n\n\t/** Used to compose bitmasks for value comparisons. */\n\tvar COMPARE_PARTIAL_FLAG$5 = 1,\n\t    COMPARE_UNORDERED_FLAG$3 = 2;\n\n\t/**\n\t * A specialized version of `baseIsEqualDeep` for arrays with support for\n\t * partial deep comparisons.\n\t *\n\t * @private\n\t * @param {Array} array The array to compare.\n\t * @param {Array} other The other array to compare.\n\t * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t * @param {Function} customizer The function to customize comparisons.\n\t * @param {Function} equalFunc The function to determine equivalents of values.\n\t * @param {Object} stack Tracks traversed `array` and `other` objects.\n\t * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n\t */\n\tfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n\t  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,\n\t      arrLength = array.length,\n\t      othLength = other.length;\n\n\t  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n\t    return false;\n\t  }\n\t  // Check that cyclic values are equal.\n\t  var arrStacked = stack.get(array);\n\t  var othStacked = stack.get(other);\n\t  if (arrStacked && othStacked) {\n\t    return arrStacked == other && othStacked == array;\n\t  }\n\t  var index = -1,\n\t      result = true,\n\t      seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache : undefined;\n\n\t  stack.set(array, other);\n\t  stack.set(other, array);\n\n\t  // Ignore non-index properties.\n\t  while (++index < arrLength) {\n\t    var arrValue = array[index],\n\t        othValue = other[index];\n\n\t    if (customizer) {\n\t      var compared = isPartial\n\t        ? customizer(othValue, arrValue, index, other, array, stack)\n\t        : customizer(arrValue, othValue, index, array, other, stack);\n\t    }\n\t    if (compared !== undefined) {\n\t      if (compared) {\n\t        continue;\n\t      }\n\t      result = false;\n\t      break;\n\t    }\n\t    // Recursively compare arrays (susceptible to call stack limits).\n\t    if (seen) {\n\t      if (!arraySome(other, function(othValue, othIndex) {\n\t            if (!cacheHas(seen, othIndex) &&\n\t                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n\t              return seen.push(othIndex);\n\t            }\n\t          })) {\n\t        result = false;\n\t        break;\n\t      }\n\t    } else if (!(\n\t          arrValue === othValue ||\n\t            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n\t        )) {\n\t      result = false;\n\t      break;\n\t    }\n\t  }\n\t  stack['delete'](array);\n\t  stack['delete'](other);\n\t  return result;\n\t}\n\n\t/** Built-in value references. */\n\tvar Uint8Array$1 = root.Uint8Array;\n\n\t/**\n\t * Converts `map` to its key-value pairs.\n\t *\n\t * @private\n\t * @param {Object} map The map to convert.\n\t * @returns {Array} Returns the key-value pairs.\n\t */\n\tfunction mapToArray(map) {\n\t  var index = -1,\n\t      result = Array(map.size);\n\n\t  map.forEach(function(value, key) {\n\t    result[++index] = [key, value];\n\t  });\n\t  return result;\n\t}\n\n\t/** Used to compose bitmasks for value comparisons. */\n\tvar COMPARE_PARTIAL_FLAG$4 = 1,\n\t    COMPARE_UNORDERED_FLAG$2 = 2;\n\n\t/** `Object#toString` result references. */\n\tvar boolTag$3 = '[object Boolean]',\n\t    dateTag$3 = '[object Date]',\n\t    errorTag$2 = '[object Error]',\n\t    mapTag$6 = '[object Map]',\n\t    numberTag$3 = '[object Number]',\n\t    regexpTag$3 = '[object RegExp]',\n\t    setTag$6 = '[object Set]',\n\t    stringTag$3 = '[object String]',\n\t    symbolTag$2 = '[object Symbol]';\n\n\tvar arrayBufferTag$3 = '[object ArrayBuffer]',\n\t    dataViewTag$4 = '[object DataView]';\n\n\t/** Used to convert symbols to primitives and strings. */\n\tvar symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined,\n\t    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;\n\n\t/**\n\t * A specialized version of `baseIsEqualDeep` for comparing objects of\n\t * the same `toStringTag`.\n\t *\n\t * **Note:** This function only supports comparing values with tags of\n\t * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n\t *\n\t * @private\n\t * @param {Object} object The object to compare.\n\t * @param {Object} other The other object to compare.\n\t * @param {string} tag The `toStringTag` of the objects to compare.\n\t * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t * @param {Function} customizer The function to customize comparisons.\n\t * @param {Function} equalFunc The function to determine equivalents of values.\n\t * @param {Object} stack Tracks traversed `object` and `other` objects.\n\t * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n\t */\n\tfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n\t  switch (tag) {\n\t    case dataViewTag$4:\n\t      if ((object.byteLength != other.byteLength) ||\n\t          (object.byteOffset != other.byteOffset)) {\n\t        return false;\n\t      }\n\t      object = object.buffer;\n\t      other = other.buffer;\n\n\t    case arrayBufferTag$3:\n\t      if ((object.byteLength != other.byteLength) ||\n\t          !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {\n\t        return false;\n\t      }\n\t      return true;\n\n\t    case boolTag$3:\n\t    case dateTag$3:\n\t    case numberTag$3:\n\t      // Coerce booleans to `1` or `0` and dates to milliseconds.\n\t      // Invalid dates are coerced to `NaN`.\n\t      return eq(+object, +other);\n\n\t    case errorTag$2:\n\t      return object.name == other.name && object.message == other.message;\n\n\t    case regexpTag$3:\n\t    case stringTag$3:\n\t      // Coerce regexes to strings and treat strings, primitives and objects,\n\t      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n\t      // for more details.\n\t      return object == (other + '');\n\n\t    case mapTag$6:\n\t      var convert = mapToArray;\n\n\t    case setTag$6:\n\t      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;\n\t      convert || (convert = setToArray);\n\n\t      if (object.size != other.size && !isPartial) {\n\t        return false;\n\t      }\n\t      // Assume cyclic values are equal.\n\t      var stacked = stack.get(object);\n\t      if (stacked) {\n\t        return stacked == other;\n\t      }\n\t      bitmask |= COMPARE_UNORDERED_FLAG$2;\n\n\t      // Recursively compare objects (susceptible to call stack limits).\n\t      stack.set(object, other);\n\t      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n\t      stack['delete'](object);\n\t      return result;\n\n\t    case symbolTag$2:\n\t      if (symbolValueOf$1) {\n\t        return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);\n\t      }\n\t  }\n\t  return false;\n\t}\n\n\t/**\n\t * Appends the elements of `values` to `array`.\n\t *\n\t * @private\n\t * @param {Array} array The array to modify.\n\t * @param {Array} values The values to append.\n\t * @returns {Array} Returns `array`.\n\t */\n\tfunction arrayPush(array, values) {\n\t  var index = -1,\n\t      length = values.length,\n\t      offset = array.length;\n\n\t  while (++index < length) {\n\t    array[offset + index] = values[index];\n\t  }\n\t  return array;\n\t}\n\n\t/**\n\t * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n\t * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n\t * symbols of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {Function} keysFunc The function to get the keys of `object`.\n\t * @param {Function} symbolsFunc The function to get the symbols of `object`.\n\t * @returns {Array} Returns the array of property names and symbols.\n\t */\n\tfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n\t  var result = keysFunc(object);\n\t  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n\t}\n\n\t/**\n\t * A specialized version of `_.filter` for arrays without support for\n\t * iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Array} [array] The array to iterate over.\n\t * @param {Function} predicate The function invoked per iteration.\n\t * @returns {Array} Returns the new filtered array.\n\t */\n\tfunction arrayFilter(array, predicate) {\n\t  var index = -1,\n\t      length = array == null ? 0 : array.length,\n\t      resIndex = 0,\n\t      result = [];\n\n\t  while (++index < length) {\n\t    var value = array[index];\n\t    if (predicate(value, index, array)) {\n\t      result[resIndex++] = value;\n\t    }\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * This method returns a new empty array.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.13.0\n\t * @category Util\n\t * @returns {Array} Returns the new empty array.\n\t * @example\n\t *\n\t * var arrays = _.times(2, _.stubArray);\n\t *\n\t * console.log(arrays);\n\t * // => [[], []]\n\t *\n\t * console.log(arrays[0] === arrays[1]);\n\t * // => false\n\t */\n\tfunction stubArray() {\n\t  return [];\n\t}\n\n\t/** Used for built-in method references. */\n\tvar objectProto$9 = Object.prototype;\n\n\t/** Built-in value references. */\n\tvar propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;\n\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeGetSymbols$1 = Object.getOwnPropertySymbols;\n\n\t/**\n\t * Creates an array of the own enumerable symbols of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of symbols.\n\t */\n\tvar getSymbols = !nativeGetSymbols$1 ? stubArray : function(object) {\n\t  if (object == null) {\n\t    return [];\n\t  }\n\t  object = Object(object);\n\t  return arrayFilter(nativeGetSymbols$1(object), function(symbol) {\n\t    return propertyIsEnumerable$1.call(object, symbol);\n\t  });\n\t};\n\n\t/**\n\t * The base implementation of `_.times` without support for iteratee shorthands\n\t * or max array length checks.\n\t *\n\t * @private\n\t * @param {number} n The number of times to invoke `iteratee`.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array} Returns the array of results.\n\t */\n\tfunction baseTimes(n, iteratee) {\n\t  var index = -1,\n\t      result = Array(n);\n\n\t  while (++index < n) {\n\t    result[index] = iteratee(index);\n\t  }\n\t  return result;\n\t}\n\n\t/** `Object#toString` result references. */\n\tvar argsTag$3 = '[object Arguments]';\n\n\t/**\n\t * The base implementation of `_.isArguments`.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t */\n\tfunction baseIsArguments(value) {\n\t  return isObjectLike(value) && baseGetTag(value) == argsTag$3;\n\t}\n\n\t/** Used for built-in method references. */\n\tvar objectProto$8 = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$7 = objectProto$8.hasOwnProperty;\n\n\t/** Built-in value references. */\n\tvar propertyIsEnumerable = objectProto$8.propertyIsEnumerable;\n\n\t/**\n\t * Checks if `value` is likely an `arguments` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArguments(function() { return arguments; }());\n\t * // => true\n\t *\n\t * _.isArguments([1, 2, 3]);\n\t * // => false\n\t */\n\tvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n\t  return isObjectLike(value) && hasOwnProperty$7.call(value, 'callee') &&\n\t    !propertyIsEnumerable.call(value, 'callee');\n\t};\n\n\t/**\n\t * This method returns `false`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.13.0\n\t * @category Util\n\t * @returns {boolean} Returns `false`.\n\t * @example\n\t *\n\t * _.times(2, _.stubFalse);\n\t * // => [false, false]\n\t */\n\tfunction stubFalse() {\n\t  return false;\n\t}\n\n\t/** Detect free variable `exports`. */\n\tvar freeExports$2 =  true && exports && !exports.nodeType && exports;\n\n\t/** Detect free variable `module`. */\n\tvar freeModule$2 = freeExports$2 && \"object\" == 'object' && module && !module.nodeType && module;\n\n\t/** Detect the popular CommonJS extension `module.exports`. */\n\tvar moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;\n\n\t/** Built-in value references. */\n\tvar Buffer$2 = moduleExports$2 ? root.Buffer : undefined;\n\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeIsBuffer = Buffer$2 ? Buffer$2.isBuffer : undefined;\n\n\t/**\n\t * Checks if `value` is a buffer.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.3.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n\t * @example\n\t *\n\t * _.isBuffer(new Buffer(2));\n\t * // => true\n\t *\n\t * _.isBuffer(new Uint8Array(2));\n\t * // => false\n\t */\n\tvar isBuffer = nativeIsBuffer || stubFalse;\n\n\t/** Used as references for various `Number` constants. */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This method is loosely based on\n\t * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t * @example\n\t *\n\t * _.isLength(3);\n\t * // => true\n\t *\n\t * _.isLength(Number.MIN_VALUE);\n\t * // => false\n\t *\n\t * _.isLength(Infinity);\n\t * // => false\n\t *\n\t * _.isLength('3');\n\t * // => false\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' &&\n\t    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\n\t/** `Object#toString` result references. */\n\tvar argsTag$2 = '[object Arguments]',\n\t    arrayTag$2 = '[object Array]',\n\t    boolTag$2 = '[object Boolean]',\n\t    dateTag$2 = '[object Date]',\n\t    errorTag$1 = '[object Error]',\n\t    funcTag$1 = '[object Function]',\n\t    mapTag$5 = '[object Map]',\n\t    numberTag$2 = '[object Number]',\n\t    objectTag$3 = '[object Object]',\n\t    regexpTag$2 = '[object RegExp]',\n\t    setTag$5 = '[object Set]',\n\t    stringTag$2 = '[object String]',\n\t    weakMapTag$2 = '[object WeakMap]';\n\n\tvar arrayBufferTag$2 = '[object ArrayBuffer]',\n\t    dataViewTag$3 = '[object DataView]',\n\t    float32Tag$2 = '[object Float32Array]',\n\t    float64Tag$2 = '[object Float64Array]',\n\t    int8Tag$2 = '[object Int8Array]',\n\t    int16Tag$2 = '[object Int16Array]',\n\t    int32Tag$2 = '[object Int32Array]',\n\t    uint8Tag$2 = '[object Uint8Array]',\n\t    uint8ClampedTag$2 = '[object Uint8ClampedArray]',\n\t    uint16Tag$2 = '[object Uint16Array]',\n\t    uint32Tag$2 = '[object Uint32Array]';\n\n\t/** Used to identify `toStringTag` values of typed arrays. */\n\tvar typedArrayTags = {};\n\ttypedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =\n\ttypedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =\n\ttypedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =\n\ttypedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =\n\ttypedArrayTags[uint32Tag$2] = true;\n\ttypedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =\n\ttypedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] =\n\ttypedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] =\n\ttypedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =\n\ttypedArrayTags[mapTag$5] = typedArrayTags[numberTag$2] =\n\ttypedArrayTags[objectTag$3] = typedArrayTags[regexpTag$2] =\n\ttypedArrayTags[setTag$5] = typedArrayTags[stringTag$2] =\n\ttypedArrayTags[weakMapTag$2] = false;\n\n\t/**\n\t * The base implementation of `_.isTypedArray` without Node.js optimizations.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n\t */\n\tfunction baseIsTypedArray(value) {\n\t  return isObjectLike(value) &&\n\t    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n\t}\n\n\t/**\n\t * The base implementation of `_.unary` without support for storing metadata.\n\t *\n\t * @private\n\t * @param {Function} func The function to cap arguments for.\n\t * @returns {Function} Returns the new capped function.\n\t */\n\tfunction baseUnary(func) {\n\t  return function(value) {\n\t    return func(value);\n\t  };\n\t}\n\n\t/** Detect free variable `exports`. */\n\tvar freeExports$1 =  true && exports && !exports.nodeType && exports;\n\n\t/** Detect free variable `module`. */\n\tvar freeModule$1 = freeExports$1 && \"object\" == 'object' && module && !module.nodeType && module;\n\n\t/** Detect the popular CommonJS extension `module.exports`. */\n\tvar moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n\n\t/** Detect free variable `process` from Node.js. */\n\tvar freeProcess = moduleExports$1 && freeGlobal.process;\n\n\t/** Used to access faster Node.js helpers. */\n\tvar nodeUtil = (function() {\n\t  try {\n\t    // Use `util.types` for Node.js 10+.\n\t    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\n\n\t    if (types) {\n\t      return types;\n\t    }\n\n\t    // Legacy `process.binding('util')` for Node.js < 10.\n\t    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n\t  } catch (e) {}\n\t}());\n\n\t/* Node.js helper references. */\n\tvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n\t/**\n\t * Checks if `value` is classified as a typed array.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 3.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n\t * @example\n\t *\n\t * _.isTypedArray(new Uint8Array);\n\t * // => true\n\t *\n\t * _.isTypedArray([]);\n\t * // => false\n\t */\n\tvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n\t/** Used for built-in method references. */\n\tvar objectProto$7 = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$6 = objectProto$7.hasOwnProperty;\n\n\t/**\n\t * Creates an array of the enumerable property names of the array-like `value`.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @param {boolean} inherited Specify returning inherited property names.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction arrayLikeKeys(value, inherited) {\n\t  var isArr = isArray(value),\n\t      isArg = !isArr && isArguments(value),\n\t      isBuff = !isArr && !isArg && isBuffer(value),\n\t      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n\t      skipIndexes = isArr || isArg || isBuff || isType,\n\t      result = skipIndexes ? baseTimes(value.length, String) : [],\n\t      length = result.length;\n\n\t  for (var key in value) {\n\t    if ((inherited || hasOwnProperty$6.call(value, key)) &&\n\t        !(skipIndexes && (\n\t           // Safari 9 has enumerable `arguments.length` in strict mode.\n\t           key == 'length' ||\n\t           // Node.js 0.10 has enumerable non-index properties on buffers.\n\t           (isBuff && (key == 'offset' || key == 'parent')) ||\n\t           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n\t           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n\t           // Skip index properties.\n\t           isIndex(key, length)\n\t        ))) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\n\t/** Used for built-in method references. */\n\tvar objectProto$6 = Object.prototype;\n\n\t/**\n\t * Checks if `value` is likely a prototype object.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n\t */\n\tfunction isPrototype(value) {\n\t  var Ctor = value && value.constructor,\n\t      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$6;\n\n\t  return value === proto;\n\t}\n\n\t/**\n\t * Creates a unary function that invokes `func` with its argument transformed.\n\t *\n\t * @private\n\t * @param {Function} func The function to wrap.\n\t * @param {Function} transform The argument transform.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction overArg(func, transform) {\n\t  return function(arg) {\n\t    return func(transform(arg));\n\t  };\n\t}\n\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeKeys = overArg(Object.keys, Object);\n\n\t/** Used for built-in method references. */\n\tvar objectProto$5 = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$5 = objectProto$5.hasOwnProperty;\n\n\t/**\n\t * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction baseKeys(object) {\n\t  if (!isPrototype(object)) {\n\t    return nativeKeys(object);\n\t  }\n\t  var result = [];\n\t  for (var key in Object(object)) {\n\t    if (hasOwnProperty$5.call(object, key) && key != 'constructor') {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * Checks if `value` is array-like. A value is considered array-like if it's\n\t * not a function and has a `value.length` that's an integer greater than or\n\t * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t * @example\n\t *\n\t * _.isArrayLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLike(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLike('abc');\n\t * // => true\n\t *\n\t * _.isArrayLike(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(value.length) && !isFunction$1(value);\n\t}\n\n\t/**\n\t * Creates an array of the own enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects. See the\n\t * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n\t * for more details.\n\t *\n\t * @static\n\t * @since 0.1.0\n\t * @memberOf _\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keys(new Foo);\n\t * // => ['a', 'b'] (iteration order is not guaranteed)\n\t *\n\t * _.keys('hi');\n\t * // => ['0', '1']\n\t */\n\tfunction keys(object) {\n\t  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n\t}\n\n\t/**\n\t * Creates an array of own enumerable property names and symbols of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names and symbols.\n\t */\n\tfunction getAllKeys(object) {\n\t  return baseGetAllKeys(object, keys, getSymbols);\n\t}\n\n\t/** Used to compose bitmasks for value comparisons. */\n\tvar COMPARE_PARTIAL_FLAG$3 = 1;\n\n\t/** Used for built-in method references. */\n\tvar objectProto$4 = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$4 = objectProto$4.hasOwnProperty;\n\n\t/**\n\t * A specialized version of `baseIsEqualDeep` for objects with support for\n\t * partial deep comparisons.\n\t *\n\t * @private\n\t * @param {Object} object The object to compare.\n\t * @param {Object} other The other object to compare.\n\t * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t * @param {Function} customizer The function to customize comparisons.\n\t * @param {Function} equalFunc The function to determine equivalents of values.\n\t * @param {Object} stack Tracks traversed `object` and `other` objects.\n\t * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n\t */\n\tfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n\t  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,\n\t      objProps = getAllKeys(object),\n\t      objLength = objProps.length,\n\t      othProps = getAllKeys(other),\n\t      othLength = othProps.length;\n\n\t  if (objLength != othLength && !isPartial) {\n\t    return false;\n\t  }\n\t  var index = objLength;\n\t  while (index--) {\n\t    var key = objProps[index];\n\t    if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {\n\t      return false;\n\t    }\n\t  }\n\t  // Check that cyclic values are equal.\n\t  var objStacked = stack.get(object);\n\t  var othStacked = stack.get(other);\n\t  if (objStacked && othStacked) {\n\t    return objStacked == other && othStacked == object;\n\t  }\n\t  var result = true;\n\t  stack.set(object, other);\n\t  stack.set(other, object);\n\n\t  var skipCtor = isPartial;\n\t  while (++index < objLength) {\n\t    key = objProps[index];\n\t    var objValue = object[key],\n\t        othValue = other[key];\n\n\t    if (customizer) {\n\t      var compared = isPartial\n\t        ? customizer(othValue, objValue, key, other, object, stack)\n\t        : customizer(objValue, othValue, key, object, other, stack);\n\t    }\n\t    // Recursively compare objects (susceptible to call stack limits).\n\t    if (!(compared === undefined\n\t          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n\t          : compared\n\t        )) {\n\t      result = false;\n\t      break;\n\t    }\n\t    skipCtor || (skipCtor = key == 'constructor');\n\t  }\n\t  if (result && !skipCtor) {\n\t    var objCtor = object.constructor,\n\t        othCtor = other.constructor;\n\n\t    // Non `Object` object instances with different constructors are not equal.\n\t    if (objCtor != othCtor &&\n\t        ('constructor' in object && 'constructor' in other) &&\n\t        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n\t          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n\t      result = false;\n\t    }\n\t  }\n\t  stack['delete'](object);\n\t  stack['delete'](other);\n\t  return result;\n\t}\n\n\t/* Built-in method references that are verified to be native. */\n\tvar DataView$1 = getNative(root, 'DataView');\n\n\t/* Built-in method references that are verified to be native. */\n\tvar Promise$1 = getNative(root, 'Promise');\n\n\t/* Built-in method references that are verified to be native. */\n\tvar WeakMap$1 = getNative(root, 'WeakMap');\n\n\t/** `Object#toString` result references. */\n\tvar mapTag$4 = '[object Map]',\n\t    objectTag$2 = '[object Object]',\n\t    promiseTag = '[object Promise]',\n\t    setTag$4 = '[object Set]',\n\t    weakMapTag$1 = '[object WeakMap]';\n\n\tvar dataViewTag$2 = '[object DataView]';\n\n\t/** Used to detect maps, sets, and weakmaps. */\n\tvar dataViewCtorString = toSource(DataView$1),\n\t    mapCtorString = toSource(Map$1),\n\t    promiseCtorString = toSource(Promise$1),\n\t    setCtorString = toSource(Set$1),\n\t    weakMapCtorString = toSource(WeakMap$1);\n\n\t/**\n\t * Gets the `toStringTag` of `value`.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the `toStringTag`.\n\t */\n\tvar getTag = baseGetTag;\n\n\t// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n\tif ((DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$2) ||\n\t    (Map$1 && getTag(new Map$1) != mapTag$4) ||\n\t    (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||\n\t    (Set$1 && getTag(new Set$1) != setTag$4) ||\n\t    (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag$1)) {\n\t  getTag = function(value) {\n\t    var result = baseGetTag(value),\n\t        Ctor = result == objectTag$2 ? value.constructor : undefined,\n\t        ctorString = Ctor ? toSource(Ctor) : '';\n\n\t    if (ctorString) {\n\t      switch (ctorString) {\n\t        case dataViewCtorString: return dataViewTag$2;\n\t        case mapCtorString: return mapTag$4;\n\t        case promiseCtorString: return promiseTag;\n\t        case setCtorString: return setTag$4;\n\t        case weakMapCtorString: return weakMapTag$1;\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t}\n\n\tvar getTag$1 = getTag;\n\n\t/** Used to compose bitmasks for value comparisons. */\n\tvar COMPARE_PARTIAL_FLAG$2 = 1;\n\n\t/** `Object#toString` result references. */\n\tvar argsTag$1 = '[object Arguments]',\n\t    arrayTag$1 = '[object Array]',\n\t    objectTag$1 = '[object Object]';\n\n\t/** Used for built-in method references. */\n\tvar objectProto$3 = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$3 = objectProto$3.hasOwnProperty;\n\n\t/**\n\t * A specialized version of `baseIsEqual` for arrays and objects which performs\n\t * deep comparisons and tracks traversed objects enabling objects with circular\n\t * references to be compared.\n\t *\n\t * @private\n\t * @param {Object} object The object to compare.\n\t * @param {Object} other The other object to compare.\n\t * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t * @param {Function} customizer The function to customize comparisons.\n\t * @param {Function} equalFunc The function to determine equivalents of values.\n\t * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n\t * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n\t */\n\tfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n\t  var objIsArr = isArray(object),\n\t      othIsArr = isArray(other),\n\t      objTag = objIsArr ? arrayTag$1 : getTag$1(object),\n\t      othTag = othIsArr ? arrayTag$1 : getTag$1(other);\n\n\t  objTag = objTag == argsTag$1 ? objectTag$1 : objTag;\n\t  othTag = othTag == argsTag$1 ? objectTag$1 : othTag;\n\n\t  var objIsObj = objTag == objectTag$1,\n\t      othIsObj = othTag == objectTag$1,\n\t      isSameTag = objTag == othTag;\n\n\t  if (isSameTag && isBuffer(object)) {\n\t    if (!isBuffer(other)) {\n\t      return false;\n\t    }\n\t    objIsArr = true;\n\t    objIsObj = false;\n\t  }\n\t  if (isSameTag && !objIsObj) {\n\t    stack || (stack = new Stack);\n\t    return (objIsArr || isTypedArray(object))\n\t      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n\t      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n\t  }\n\t  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {\n\t    var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, '__wrapped__'),\n\t        othIsWrapped = othIsObj && hasOwnProperty$3.call(other, '__wrapped__');\n\n\t    if (objIsWrapped || othIsWrapped) {\n\t      var objUnwrapped = objIsWrapped ? object.value() : object,\n\t          othUnwrapped = othIsWrapped ? other.value() : other;\n\n\t      stack || (stack = new Stack);\n\t      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n\t    }\n\t  }\n\t  if (!isSameTag) {\n\t    return false;\n\t  }\n\t  stack || (stack = new Stack);\n\t  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n\t}\n\n\t/**\n\t * The base implementation of `_.isEqual` which supports partial comparisons\n\t * and tracks traversed objects.\n\t *\n\t * @private\n\t * @param {*} value The value to compare.\n\t * @param {*} other The other value to compare.\n\t * @param {boolean} bitmask The bitmask flags.\n\t *  1 - Unordered comparison\n\t *  2 - Partial comparison\n\t * @param {Function} [customizer] The function to customize comparisons.\n\t * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n\t * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t */\n\tfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n\t  if (value === other) {\n\t    return true;\n\t  }\n\t  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n\t    return value !== value && other !== other;\n\t  }\n\t  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n\t}\n\n\t/** Used to compose bitmasks for value comparisons. */\n\tvar COMPARE_PARTIAL_FLAG$1 = 1,\n\t    COMPARE_UNORDERED_FLAG$1 = 2;\n\n\t/**\n\t * The base implementation of `_.isMatch` without support for iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Object} object The object to inspect.\n\t * @param {Object} source The object of property values to match.\n\t * @param {Array} matchData The property names, values, and compare flags to match.\n\t * @param {Function} [customizer] The function to customize comparisons.\n\t * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n\t */\n\tfunction baseIsMatch(object, source, matchData, customizer) {\n\t  var index = matchData.length,\n\t      length = index,\n\t      noCustomizer = !customizer;\n\n\t  if (object == null) {\n\t    return !length;\n\t  }\n\t  object = Object(object);\n\t  while (index--) {\n\t    var data = matchData[index];\n\t    if ((noCustomizer && data[2])\n\t          ? data[1] !== object[data[0]]\n\t          : !(data[0] in object)\n\t        ) {\n\t      return false;\n\t    }\n\t  }\n\t  while (++index < length) {\n\t    data = matchData[index];\n\t    var key = data[0],\n\t        objValue = object[key],\n\t        srcValue = data[1];\n\n\t    if (noCustomizer && data[2]) {\n\t      if (objValue === undefined && !(key in object)) {\n\t        return false;\n\t      }\n\t    } else {\n\t      var stack = new Stack;\n\t      if (customizer) {\n\t        var result = customizer(objValue, srcValue, key, object, source, stack);\n\t      }\n\t      if (!(result === undefined\n\t            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)\n\t            : result\n\t          )) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t  return true;\n\t}\n\n\t/**\n\t * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` if suitable for strict\n\t *  equality comparisons, else `false`.\n\t */\n\tfunction isStrictComparable(value) {\n\t  return value === value && !isObject$1(value);\n\t}\n\n\t/**\n\t * Gets the property names, values, and compare flags of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the match data of `object`.\n\t */\n\tfunction getMatchData(object) {\n\t  var result = keys(object),\n\t      length = result.length;\n\n\t  while (length--) {\n\t    var key = result[length],\n\t        value = object[key];\n\n\t    result[length] = [key, value, isStrictComparable(value)];\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * A specialized version of `matchesProperty` for source values suitable\n\t * for strict equality comparisons, i.e. `===`.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @param {*} srcValue The value to match.\n\t * @returns {Function} Returns the new spec function.\n\t */\n\tfunction matchesStrictComparable(key, srcValue) {\n\t  return function(object) {\n\t    if (object == null) {\n\t      return false;\n\t    }\n\t    return object[key] === srcValue &&\n\t      (srcValue !== undefined || (key in Object(object)));\n\t  };\n\t}\n\n\t/**\n\t * The base implementation of `_.matches` which doesn't clone `source`.\n\t *\n\t * @private\n\t * @param {Object} source The object of property values to match.\n\t * @returns {Function} Returns the new spec function.\n\t */\n\tfunction baseMatches(source) {\n\t  var matchData = getMatchData(source);\n\t  if (matchData.length == 1 && matchData[0][2]) {\n\t    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n\t  }\n\t  return function(object) {\n\t    return object === source || baseIsMatch(object, source, matchData);\n\t  };\n\t}\n\n\t/**\n\t * The base implementation of `_.hasIn` without support for deep paths.\n\t *\n\t * @private\n\t * @param {Object} [object] The object to query.\n\t * @param {Array|string} key The key to check.\n\t * @returns {boolean} Returns `true` if `key` exists, else `false`.\n\t */\n\tfunction baseHasIn(object, key) {\n\t  return object != null && key in Object(object);\n\t}\n\n\t/**\n\t * Checks if `path` exists on `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {Array|string} path The path to check.\n\t * @param {Function} hasFunc The function to check properties.\n\t * @returns {boolean} Returns `true` if `path` exists, else `false`.\n\t */\n\tfunction hasPath(object, path, hasFunc) {\n\t  path = castPath(path, object);\n\n\t  var index = -1,\n\t      length = path.length,\n\t      result = false;\n\n\t  while (++index < length) {\n\t    var key = toKey(path[index]);\n\t    if (!(result = object != null && hasFunc(object, key))) {\n\t      break;\n\t    }\n\t    object = object[key];\n\t  }\n\t  if (result || ++index != length) {\n\t    return result;\n\t  }\n\t  length = object == null ? 0 : object.length;\n\t  return !!length && isLength(length) && isIndex(key, length) &&\n\t    (isArray(object) || isArguments(object));\n\t}\n\n\t/**\n\t * Checks if `path` is a direct or inherited property of `object`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @param {Array|string} path The path to check.\n\t * @returns {boolean} Returns `true` if `path` exists, else `false`.\n\t * @example\n\t *\n\t * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n\t *\n\t * _.hasIn(object, 'a');\n\t * // => true\n\t *\n\t * _.hasIn(object, 'a.b');\n\t * // => true\n\t *\n\t * _.hasIn(object, ['a', 'b']);\n\t * // => true\n\t *\n\t * _.hasIn(object, 'b');\n\t * // => false\n\t */\n\tfunction hasIn(object, path) {\n\t  return object != null && hasPath(object, path, baseHasIn);\n\t}\n\n\t/** Used to compose bitmasks for value comparisons. */\n\tvar COMPARE_PARTIAL_FLAG = 1,\n\t    COMPARE_UNORDERED_FLAG = 2;\n\n\t/**\n\t * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n\t *\n\t * @private\n\t * @param {string} path The path of the property to get.\n\t * @param {*} srcValue The value to match.\n\t * @returns {Function} Returns the new spec function.\n\t */\n\tfunction baseMatchesProperty(path, srcValue) {\n\t  if (isKey(path) && isStrictComparable(srcValue)) {\n\t    return matchesStrictComparable(toKey(path), srcValue);\n\t  }\n\t  return function(object) {\n\t    var objValue = get(object, path);\n\t    return (objValue === undefined && objValue === srcValue)\n\t      ? hasIn(object, path)\n\t      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n\t  };\n\t}\n\n\t/**\n\t * This method returns the first argument it receives.\n\t *\n\t * @static\n\t * @since 0.1.0\n\t * @memberOf _\n\t * @category Util\n\t * @param {*} value Any value.\n\t * @returns {*} Returns `value`.\n\t * @example\n\t *\n\t * var object = { 'a': 1 };\n\t *\n\t * console.log(_.identity(object) === object);\n\t * // => true\n\t */\n\tfunction identity(value) {\n\t  return value;\n\t}\n\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new accessor function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\n\t/**\n\t * A specialized version of `baseProperty` which supports deep paths.\n\t *\n\t * @private\n\t * @param {Array|string} path The path of the property to get.\n\t * @returns {Function} Returns the new accessor function.\n\t */\n\tfunction basePropertyDeep(path) {\n\t  return function(object) {\n\t    return baseGet(object, path);\n\t  };\n\t}\n\n\t/**\n\t * Creates a function that returns the value at `path` of a given object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 2.4.0\n\t * @category Util\n\t * @param {Array|string} path The path of the property to get.\n\t * @returns {Function} Returns the new accessor function.\n\t * @example\n\t *\n\t * var objects = [\n\t *   { 'a': { 'b': 2 } },\n\t *   { 'a': { 'b': 1 } }\n\t * ];\n\t *\n\t * _.map(objects, _.property('a.b'));\n\t * // => [2, 1]\n\t *\n\t * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n\t * // => [1, 2]\n\t */\n\tfunction property(path) {\n\t  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n\t}\n\n\t/**\n\t * The base implementation of `_.iteratee`.\n\t *\n\t * @private\n\t * @param {*} [value=_.identity] The value to convert to an iteratee.\n\t * @returns {Function} Returns the iteratee.\n\t */\n\tfunction baseIteratee(value) {\n\t  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n\t  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n\t  if (typeof value == 'function') {\n\t    return value;\n\t  }\n\t  if (value == null) {\n\t    return identity;\n\t  }\n\t  if (typeof value == 'object') {\n\t    return isArray(value)\n\t      ? baseMatchesProperty(value[0], value[1])\n\t      : baseMatches(value);\n\t  }\n\t  return property(value);\n\t}\n\n\t/**\n\t * Creates a `_.find` or `_.findLast` function.\n\t *\n\t * @private\n\t * @param {Function} findIndexFunc The function to find the collection index.\n\t * @returns {Function} Returns the new find function.\n\t */\n\tfunction createFind(findIndexFunc) {\n\t  return function(collection, predicate, fromIndex) {\n\t    var iterable = Object(collection);\n\t    if (!isArrayLike(collection)) {\n\t      var iteratee = baseIteratee(predicate);\n\t      collection = keys(collection);\n\t      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n\t    }\n\t    var index = findIndexFunc(collection, predicate, fromIndex);\n\t    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n\t  };\n\t}\n\n\t/** Used to match a single whitespace character. */\n\tvar reWhitespace = /\\s/;\n\n\t/**\n\t * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n\t * character of `string`.\n\t *\n\t * @private\n\t * @param {string} string The string to inspect.\n\t * @returns {number} Returns the index of the last non-whitespace character.\n\t */\n\tfunction trimmedEndIndex(string) {\n\t  var index = string.length;\n\n\t  while (index-- && reWhitespace.test(string.charAt(index))) {}\n\t  return index;\n\t}\n\n\t/** Used to match leading whitespace. */\n\tvar reTrimStart = /^\\s+/;\n\n\t/**\n\t * The base implementation of `_.trim`.\n\t *\n\t * @private\n\t * @param {string} string The string to trim.\n\t * @returns {string} Returns the trimmed string.\n\t */\n\tfunction baseTrim(string) {\n\t  return string\n\t    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n\t    : string;\n\t}\n\n\t/** Used as references for various `Number` constants. */\n\tvar NAN = 0 / 0;\n\n\t/** Used to detect bad signed hexadecimal string values. */\n\tvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n\t/** Used to detect binary string values. */\n\tvar reIsBinary = /^0b[01]+$/i;\n\n\t/** Used to detect octal string values. */\n\tvar reIsOctal = /^0o[0-7]+$/i;\n\n\t/** Built-in method references without a dependency on `root`. */\n\tvar freeParseInt = parseInt;\n\n\t/**\n\t * Converts `value` to a number.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to process.\n\t * @returns {number} Returns the number.\n\t * @example\n\t *\n\t * _.toNumber(3.2);\n\t * // => 3.2\n\t *\n\t * _.toNumber(Number.MIN_VALUE);\n\t * // => 5e-324\n\t *\n\t * _.toNumber(Infinity);\n\t * // => Infinity\n\t *\n\t * _.toNumber('3.2');\n\t * // => 3.2\n\t */\n\tfunction toNumber(value) {\n\t  if (typeof value == 'number') {\n\t    return value;\n\t  }\n\t  if (isSymbol(value)) {\n\t    return NAN;\n\t  }\n\t  if (isObject$1(value)) {\n\t    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n\t    value = isObject$1(other) ? (other + '') : other;\n\t  }\n\t  if (typeof value != 'string') {\n\t    return value === 0 ? value : +value;\n\t  }\n\t  value = baseTrim(value);\n\t  var isBinary = reIsBinary.test(value);\n\t  return (isBinary || reIsOctal.test(value))\n\t    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n\t    : (reIsBadHex.test(value) ? NAN : +value);\n\t}\n\n\t/** Used as references for various `Number` constants. */\n\tvar INFINITY = 1 / 0,\n\t    MAX_INTEGER = 1.7976931348623157e+308;\n\n\t/**\n\t * Converts `value` to a finite number.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.12.0\n\t * @category Lang\n\t * @param {*} value The value to convert.\n\t * @returns {number} Returns the converted number.\n\t * @example\n\t *\n\t * _.toFinite(3.2);\n\t * // => 3.2\n\t *\n\t * _.toFinite(Number.MIN_VALUE);\n\t * // => 5e-324\n\t *\n\t * _.toFinite(Infinity);\n\t * // => 1.7976931348623157e+308\n\t *\n\t * _.toFinite('3.2');\n\t * // => 3.2\n\t */\n\tfunction toFinite(value) {\n\t  if (!value) {\n\t    return value === 0 ? value : 0;\n\t  }\n\t  value = toNumber(value);\n\t  if (value === INFINITY || value === -INFINITY) {\n\t    var sign = (value < 0 ? -1 : 1);\n\t    return sign * MAX_INTEGER;\n\t  }\n\t  return value === value ? value : 0;\n\t}\n\n\t/**\n\t * Converts `value` to an integer.\n\t *\n\t * **Note:** This method is loosely based on\n\t * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to convert.\n\t * @returns {number} Returns the converted integer.\n\t * @example\n\t *\n\t * _.toInteger(3.2);\n\t * // => 3\n\t *\n\t * _.toInteger(Number.MIN_VALUE);\n\t * // => 0\n\t *\n\t * _.toInteger(Infinity);\n\t * // => 1.7976931348623157e+308\n\t *\n\t * _.toInteger('3.2');\n\t * // => 3\n\t */\n\tfunction toInteger(value) {\n\t  var result = toFinite(value),\n\t      remainder = result % 1;\n\n\t  return result === result ? (remainder ? result - remainder : result) : 0;\n\t}\n\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeMax = Math.max;\n\n\t/**\n\t * This method is like `_.find` except that it returns the index of the first\n\t * element `predicate` returns truthy for instead of the element itself.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 1.1.0\n\t * @category Array\n\t * @param {Array} array The array to inspect.\n\t * @param {Function} [predicate=_.identity] The function invoked per iteration.\n\t * @param {number} [fromIndex=0] The index to search from.\n\t * @returns {number} Returns the index of the found element, else `-1`.\n\t * @example\n\t *\n\t * var users = [\n\t *   { 'user': 'barney',  'active': false },\n\t *   { 'user': 'fred',    'active': false },\n\t *   { 'user': 'pebbles', 'active': true }\n\t * ];\n\t *\n\t * _.findIndex(users, function(o) { return o.user == 'barney'; });\n\t * // => 0\n\t *\n\t * // The `_.matches` iteratee shorthand.\n\t * _.findIndex(users, { 'user': 'fred', 'active': false });\n\t * // => 1\n\t *\n\t * // The `_.matchesProperty` iteratee shorthand.\n\t * _.findIndex(users, ['active', false]);\n\t * // => 0\n\t *\n\t * // The `_.property` iteratee shorthand.\n\t * _.findIndex(users, 'active');\n\t * // => 2\n\t */\n\tfunction findIndex(array, predicate, fromIndex) {\n\t  var length = array == null ? 0 : array.length;\n\t  if (!length) {\n\t    return -1;\n\t  }\n\t  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n\t  if (index < 0) {\n\t    index = nativeMax(length + index, 0);\n\t  }\n\t  return baseFindIndex(array, baseIteratee(predicate), index);\n\t}\n\n\t/**\n\t * Iterates over elements of `collection`, returning the first element\n\t * `predicate` returns truthy for. The predicate is invoked with three\n\t * arguments: (value, index|key, collection).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Collection\n\t * @param {Array|Object} collection The collection to inspect.\n\t * @param {Function} [predicate=_.identity] The function invoked per iteration.\n\t * @param {number} [fromIndex=0] The index to search from.\n\t * @returns {*} Returns the matched element, else `undefined`.\n\t * @example\n\t *\n\t * var users = [\n\t *   { 'user': 'barney',  'age': 36, 'active': true },\n\t *   { 'user': 'fred',    'age': 40, 'active': false },\n\t *   { 'user': 'pebbles', 'age': 1,  'active': true }\n\t * ];\n\t *\n\t * _.find(users, function(o) { return o.age < 40; });\n\t * // => object for 'barney'\n\t *\n\t * // The `_.matches` iteratee shorthand.\n\t * _.find(users, { 'age': 1, 'active': true });\n\t * // => object for 'pebbles'\n\t *\n\t * // The `_.matchesProperty` iteratee shorthand.\n\t * _.find(users, ['active', false]);\n\t * // => object for 'fred'\n\t *\n\t * // The `_.property` iteratee shorthand.\n\t * _.find(users, 'active');\n\t * // => object for 'barney'\n\t */\n\tvar find = createFind(findIndex);\n\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeIsFinite = root.isFinite,\n\t    nativeMin = Math.min;\n\n\t/**\n\t * Creates a function like `_.round`.\n\t *\n\t * @private\n\t * @param {string} methodName The name of the `Math` method to use when rounding.\n\t * @returns {Function} Returns the new round function.\n\t */\n\tfunction createRound(methodName) {\n\t  var func = Math[methodName];\n\t  return function(number, precision) {\n\t    number = toNumber(number);\n\t    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n\t    if (precision && nativeIsFinite(number)) {\n\t      // Shift with exponential notation to avoid floating-point issues.\n\t      // See [MDN](https://mdn.io/round#Examples) for more details.\n\t      var pair = (toString(number) + 'e').split('e'),\n\t          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n\t      pair = (toString(value) + 'e').split('e');\n\t      return +(pair[0] + 'e' + (+pair[1] - precision));\n\t    }\n\t    return func(number);\n\t  };\n\t}\n\n\t/**\n\t * Computes `number` rounded to `precision`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 3.10.0\n\t * @category Math\n\t * @param {number} number The number to round.\n\t * @param {number} [precision=0] The precision to round to.\n\t * @returns {number} Returns the rounded number.\n\t * @example\n\t *\n\t * _.round(4.006);\n\t * // => 4\n\t *\n\t * _.round(4.006, 2);\n\t * // => 4.01\n\t *\n\t * _.round(4060, -2);\n\t * // => 4100\n\t */\n\tvar round = createRound('round');\n\n\t/**\n\t * A specialized version of `_.forEach` for arrays without support for\n\t * iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Array} [array] The array to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array} Returns `array`.\n\t */\n\tfunction arrayEach(array, iteratee) {\n\t  var index = -1,\n\t      length = array == null ? 0 : array.length;\n\n\t  while (++index < length) {\n\t    if (iteratee(array[index], index, array) === false) {\n\t      break;\n\t    }\n\t  }\n\t  return array;\n\t}\n\n\t/**\n\t * Copies properties of `source` to `object`.\n\t *\n\t * @private\n\t * @param {Object} source The object to copy properties from.\n\t * @param {Array} props The property identifiers to copy.\n\t * @param {Object} [object={}] The object to copy properties to.\n\t * @param {Function} [customizer] The function to customize copied values.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction copyObject(source, props, object, customizer) {\n\t  var isNew = !object;\n\t  object || (object = {});\n\n\t  var index = -1,\n\t      length = props.length;\n\n\t  while (++index < length) {\n\t    var key = props[index];\n\n\t    var newValue = customizer\n\t      ? customizer(object[key], source[key], key, object, source)\n\t      : undefined;\n\n\t    if (newValue === undefined) {\n\t      newValue = source[key];\n\t    }\n\t    if (isNew) {\n\t      baseAssignValue(object, key, newValue);\n\t    } else {\n\t      assignValue(object, key, newValue);\n\t    }\n\t  }\n\t  return object;\n\t}\n\n\t/**\n\t * The base implementation of `_.assign` without support for multiple sources\n\t * or `customizer` functions.\n\t *\n\t * @private\n\t * @param {Object} object The destination object.\n\t * @param {Object} source The source object.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseAssign(object, source) {\n\t  return object && copyObject(source, keys(source), object);\n\t}\n\n\t/**\n\t * This function is like\n\t * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n\t * except that it includes inherited enumerable properties.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction nativeKeysIn(object) {\n\t  var result = [];\n\t  if (object != null) {\n\t    for (var key in Object(object)) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\n\t/** Used for built-in method references. */\n\tvar objectProto$2 = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$2 = objectProto$2.hasOwnProperty;\n\n\t/**\n\t * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction baseKeysIn(object) {\n\t  if (!isObject$1(object)) {\n\t    return nativeKeysIn(object);\n\t  }\n\t  var isProto = isPrototype(object),\n\t      result = [];\n\n\t  for (var key in object) {\n\t    if (!(key == 'constructor' && (isProto || !hasOwnProperty$2.call(object, key)))) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * Creates an array of the own and inherited enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 3.0.0\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keysIn(new Foo);\n\t * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n\t */\n\tfunction keysIn(object) {\n\t  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n\t}\n\n\t/**\n\t * The base implementation of `_.assignIn` without support for multiple sources\n\t * or `customizer` functions.\n\t *\n\t * @private\n\t * @param {Object} object The destination object.\n\t * @param {Object} source The source object.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseAssignIn(object, source) {\n\t  return object && copyObject(source, keysIn(source), object);\n\t}\n\n\t/** Detect free variable `exports`. */\n\tvar freeExports =  true && exports && !exports.nodeType && exports;\n\n\t/** Detect free variable `module`. */\n\tvar freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n\t/** Detect the popular CommonJS extension `module.exports`. */\n\tvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n\t/** Built-in value references. */\n\tvar Buffer$1 = moduleExports ? root.Buffer : undefined,\n\t    allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined;\n\n\t/**\n\t * Creates a clone of  `buffer`.\n\t *\n\t * @private\n\t * @param {Buffer} buffer The buffer to clone.\n\t * @param {boolean} [isDeep] Specify a deep clone.\n\t * @returns {Buffer} Returns the cloned buffer.\n\t */\n\tfunction cloneBuffer(buffer, isDeep) {\n\t  if (isDeep) {\n\t    return buffer.slice();\n\t  }\n\t  var length = buffer.length,\n\t      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n\t  buffer.copy(result);\n\t  return result;\n\t}\n\n\t/**\n\t * Copies the values of `source` to `array`.\n\t *\n\t * @private\n\t * @param {Array} source The array to copy values from.\n\t * @param {Array} [array=[]] The array to copy values to.\n\t * @returns {Array} Returns `array`.\n\t */\n\tfunction copyArray(source, array) {\n\t  var index = -1,\n\t      length = source.length;\n\n\t  array || (array = Array(length));\n\t  while (++index < length) {\n\t    array[index] = source[index];\n\t  }\n\t  return array;\n\t}\n\n\t/**\n\t * Copies own symbols of `source` to `object`.\n\t *\n\t * @private\n\t * @param {Object} source The object to copy symbols from.\n\t * @param {Object} [object={}] The object to copy symbols to.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction copySymbols(source, object) {\n\t  return copyObject(source, getSymbols(source), object);\n\t}\n\n\t/** Built-in value references. */\n\tvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n\t/**\n\t * Creates an array of the own and inherited enumerable symbols of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of symbols.\n\t */\n\tvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n\t  var result = [];\n\t  while (object) {\n\t    arrayPush(result, getSymbols(object));\n\t    object = getPrototype(object);\n\t  }\n\t  return result;\n\t};\n\n\t/**\n\t * Copies own and inherited symbols of `source` to `object`.\n\t *\n\t * @private\n\t * @param {Object} source The object to copy symbols from.\n\t * @param {Object} [object={}] The object to copy symbols to.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction copySymbolsIn(source, object) {\n\t  return copyObject(source, getSymbolsIn(source), object);\n\t}\n\n\t/**\n\t * Creates an array of own and inherited enumerable property names and\n\t * symbols of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names and symbols.\n\t */\n\tfunction getAllKeysIn(object) {\n\t  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n\t}\n\n\t/** Used for built-in method references. */\n\tvar objectProto$1 = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n\n\t/**\n\t * Initializes an array clone.\n\t *\n\t * @private\n\t * @param {Array} array The array to clone.\n\t * @returns {Array} Returns the initialized clone.\n\t */\n\tfunction initCloneArray(array) {\n\t  var length = array.length,\n\t      result = new array.constructor(length);\n\n\t  // Add properties assigned by `RegExp#exec`.\n\t  if (length && typeof array[0] == 'string' && hasOwnProperty$1.call(array, 'index')) {\n\t    result.index = array.index;\n\t    result.input = array.input;\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * Creates a clone of `arrayBuffer`.\n\t *\n\t * @private\n\t * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n\t * @returns {ArrayBuffer} Returns the cloned array buffer.\n\t */\n\tfunction cloneArrayBuffer(arrayBuffer) {\n\t  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n\t  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));\n\t  return result;\n\t}\n\n\t/**\n\t * Creates a clone of `dataView`.\n\t *\n\t * @private\n\t * @param {Object} dataView The data view to clone.\n\t * @param {boolean} [isDeep] Specify a deep clone.\n\t * @returns {Object} Returns the cloned data view.\n\t */\n\tfunction cloneDataView(dataView, isDeep) {\n\t  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n\t  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n\t}\n\n\t/** Used to match `RegExp` flags from their coerced string values. */\n\tvar reFlags = /\\w*$/;\n\n\t/**\n\t * Creates a clone of `regexp`.\n\t *\n\t * @private\n\t * @param {Object} regexp The regexp to clone.\n\t * @returns {Object} Returns the cloned regexp.\n\t */\n\tfunction cloneRegExp(regexp) {\n\t  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n\t  result.lastIndex = regexp.lastIndex;\n\t  return result;\n\t}\n\n\t/** Used to convert symbols to primitives and strings. */\n\tvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,\n\t    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n\t/**\n\t * Creates a clone of the `symbol` object.\n\t *\n\t * @private\n\t * @param {Object} symbol The symbol object to clone.\n\t * @returns {Object} Returns the cloned symbol object.\n\t */\n\tfunction cloneSymbol(symbol) {\n\t  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n\t}\n\n\t/**\n\t * Creates a clone of `typedArray`.\n\t *\n\t * @private\n\t * @param {Object} typedArray The typed array to clone.\n\t * @param {boolean} [isDeep] Specify a deep clone.\n\t * @returns {Object} Returns the cloned typed array.\n\t */\n\tfunction cloneTypedArray(typedArray, isDeep) {\n\t  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n\t  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n\t}\n\n\t/** `Object#toString` result references. */\n\tvar boolTag$1 = '[object Boolean]',\n\t    dateTag$1 = '[object Date]',\n\t    mapTag$3 = '[object Map]',\n\t    numberTag$1 = '[object Number]',\n\t    regexpTag$1 = '[object RegExp]',\n\t    setTag$3 = '[object Set]',\n\t    stringTag$1 = '[object String]',\n\t    symbolTag$1 = '[object Symbol]';\n\n\tvar arrayBufferTag$1 = '[object ArrayBuffer]',\n\t    dataViewTag$1 = '[object DataView]',\n\t    float32Tag$1 = '[object Float32Array]',\n\t    float64Tag$1 = '[object Float64Array]',\n\t    int8Tag$1 = '[object Int8Array]',\n\t    int16Tag$1 = '[object Int16Array]',\n\t    int32Tag$1 = '[object Int32Array]',\n\t    uint8Tag$1 = '[object Uint8Array]',\n\t    uint8ClampedTag$1 = '[object Uint8ClampedArray]',\n\t    uint16Tag$1 = '[object Uint16Array]',\n\t    uint32Tag$1 = '[object Uint32Array]';\n\n\t/**\n\t * Initializes an object clone based on its `toStringTag`.\n\t *\n\t * **Note:** This function only supports cloning values with tags of\n\t * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n\t *\n\t * @private\n\t * @param {Object} object The object to clone.\n\t * @param {string} tag The `toStringTag` of the object to clone.\n\t * @param {boolean} [isDeep] Specify a deep clone.\n\t * @returns {Object} Returns the initialized clone.\n\t */\n\tfunction initCloneByTag(object, tag, isDeep) {\n\t  var Ctor = object.constructor;\n\t  switch (tag) {\n\t    case arrayBufferTag$1:\n\t      return cloneArrayBuffer(object);\n\n\t    case boolTag$1:\n\t    case dateTag$1:\n\t      return new Ctor(+object);\n\n\t    case dataViewTag$1:\n\t      return cloneDataView(object, isDeep);\n\n\t    case float32Tag$1: case float64Tag$1:\n\t    case int8Tag$1: case int16Tag$1: case int32Tag$1:\n\t    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:\n\t      return cloneTypedArray(object, isDeep);\n\n\t    case mapTag$3:\n\t      return new Ctor;\n\n\t    case numberTag$1:\n\t    case stringTag$1:\n\t      return new Ctor(object);\n\n\t    case regexpTag$1:\n\t      return cloneRegExp(object);\n\n\t    case setTag$3:\n\t      return new Ctor;\n\n\t    case symbolTag$1:\n\t      return cloneSymbol(object);\n\t  }\n\t}\n\n\t/** Built-in value references. */\n\tvar objectCreate = Object.create;\n\n\t/**\n\t * The base implementation of `_.create` without support for assigning\n\t * properties to the created object.\n\t *\n\t * @private\n\t * @param {Object} proto The object to inherit from.\n\t * @returns {Object} Returns the new object.\n\t */\n\tvar baseCreate = (function() {\n\t  function object() {}\n\t  return function(proto) {\n\t    if (!isObject$1(proto)) {\n\t      return {};\n\t    }\n\t    if (objectCreate) {\n\t      return objectCreate(proto);\n\t    }\n\t    object.prototype = proto;\n\t    var result = new object;\n\t    object.prototype = undefined;\n\t    return result;\n\t  };\n\t}());\n\n\t/**\n\t * Initializes an object clone.\n\t *\n\t * @private\n\t * @param {Object} object The object to clone.\n\t * @returns {Object} Returns the initialized clone.\n\t */\n\tfunction initCloneObject(object) {\n\t  return (typeof object.constructor == 'function' && !isPrototype(object))\n\t    ? baseCreate(getPrototype(object))\n\t    : {};\n\t}\n\n\t/** `Object#toString` result references. */\n\tvar mapTag$2 = '[object Map]';\n\n\t/**\n\t * The base implementation of `_.isMap` without Node.js optimizations.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n\t */\n\tfunction baseIsMap(value) {\n\t  return isObjectLike(value) && getTag$1(value) == mapTag$2;\n\t}\n\n\t/* Node.js helper references. */\n\tvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n\t/**\n\t * Checks if `value` is classified as a `Map` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.3.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n\t * @example\n\t *\n\t * _.isMap(new Map);\n\t * // => true\n\t *\n\t * _.isMap(new WeakMap);\n\t * // => false\n\t */\n\tvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n\t/** `Object#toString` result references. */\n\tvar setTag$2 = '[object Set]';\n\n\t/**\n\t * The base implementation of `_.isSet` without Node.js optimizations.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n\t */\n\tfunction baseIsSet(value) {\n\t  return isObjectLike(value) && getTag$1(value) == setTag$2;\n\t}\n\n\t/* Node.js helper references. */\n\tvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n\t/**\n\t * Checks if `value` is classified as a `Set` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.3.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n\t * @example\n\t *\n\t * _.isSet(new Set);\n\t * // => true\n\t *\n\t * _.isSet(new WeakSet);\n\t * // => false\n\t */\n\tvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n\t/** Used to compose bitmasks for cloning. */\n\tvar CLONE_DEEP_FLAG$1 = 1,\n\t    CLONE_FLAT_FLAG = 2,\n\t    CLONE_SYMBOLS_FLAG$1 = 4;\n\n\t/** `Object#toString` result references. */\n\tvar argsTag = '[object Arguments]',\n\t    arrayTag = '[object Array]',\n\t    boolTag = '[object Boolean]',\n\t    dateTag = '[object Date]',\n\t    errorTag = '[object Error]',\n\t    funcTag = '[object Function]',\n\t    genTag = '[object GeneratorFunction]',\n\t    mapTag$1 = '[object Map]',\n\t    numberTag = '[object Number]',\n\t    objectTag = '[object Object]',\n\t    regexpTag = '[object RegExp]',\n\t    setTag$1 = '[object Set]',\n\t    stringTag = '[object String]',\n\t    symbolTag = '[object Symbol]',\n\t    weakMapTag = '[object WeakMap]';\n\n\tvar arrayBufferTag = '[object ArrayBuffer]',\n\t    dataViewTag = '[object DataView]',\n\t    float32Tag = '[object Float32Array]',\n\t    float64Tag = '[object Float64Array]',\n\t    int8Tag = '[object Int8Array]',\n\t    int16Tag = '[object Int16Array]',\n\t    int32Tag = '[object Int32Array]',\n\t    uint8Tag = '[object Uint8Array]',\n\t    uint8ClampedTag = '[object Uint8ClampedArray]',\n\t    uint16Tag = '[object Uint16Array]',\n\t    uint32Tag = '[object Uint32Array]';\n\n\t/** Used to identify `toStringTag` values supported by `_.clone`. */\n\tvar cloneableTags = {};\n\tcloneableTags[argsTag] = cloneableTags[arrayTag] =\n\tcloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n\tcloneableTags[boolTag] = cloneableTags[dateTag] =\n\tcloneableTags[float32Tag] = cloneableTags[float64Tag] =\n\tcloneableTags[int8Tag] = cloneableTags[int16Tag] =\n\tcloneableTags[int32Tag] = cloneableTags[mapTag$1] =\n\tcloneableTags[numberTag] = cloneableTags[objectTag] =\n\tcloneableTags[regexpTag] = cloneableTags[setTag$1] =\n\tcloneableTags[stringTag] = cloneableTags[symbolTag] =\n\tcloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n\tcloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n\tcloneableTags[errorTag] = cloneableTags[funcTag] =\n\tcloneableTags[weakMapTag] = false;\n\n\t/**\n\t * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n\t * traversed objects.\n\t *\n\t * @private\n\t * @param {*} value The value to clone.\n\t * @param {boolean} bitmask The bitmask flags.\n\t *  1 - Deep clone\n\t *  2 - Flatten inherited properties\n\t *  4 - Clone symbols\n\t * @param {Function} [customizer] The function to customize cloning.\n\t * @param {string} [key] The key of `value`.\n\t * @param {Object} [object] The parent object of `value`.\n\t * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n\t * @returns {*} Returns the cloned value.\n\t */\n\tfunction baseClone(value, bitmask, customizer, key, object, stack) {\n\t  var result,\n\t      isDeep = bitmask & CLONE_DEEP_FLAG$1,\n\t      isFlat = bitmask & CLONE_FLAT_FLAG,\n\t      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;\n\n\t  if (customizer) {\n\t    result = object ? customizer(value, key, object, stack) : customizer(value);\n\t  }\n\t  if (result !== undefined) {\n\t    return result;\n\t  }\n\t  if (!isObject$1(value)) {\n\t    return value;\n\t  }\n\t  var isArr = isArray(value);\n\t  if (isArr) {\n\t    result = initCloneArray(value);\n\t    if (!isDeep) {\n\t      return copyArray(value, result);\n\t    }\n\t  } else {\n\t    var tag = getTag$1(value),\n\t        isFunc = tag == funcTag || tag == genTag;\n\n\t    if (isBuffer(value)) {\n\t      return cloneBuffer(value, isDeep);\n\t    }\n\t    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n\t      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n\t      if (!isDeep) {\n\t        return isFlat\n\t          ? copySymbolsIn(value, baseAssignIn(result, value))\n\t          : copySymbols(value, baseAssign(result, value));\n\t      }\n\t    } else {\n\t      if (!cloneableTags[tag]) {\n\t        return object ? value : {};\n\t      }\n\t      result = initCloneByTag(value, tag, isDeep);\n\t    }\n\t  }\n\t  // Check for circular references and return its corresponding clone.\n\t  stack || (stack = new Stack);\n\t  var stacked = stack.get(value);\n\t  if (stacked) {\n\t    return stacked;\n\t  }\n\t  stack.set(value, result);\n\n\t  if (isSet(value)) {\n\t    value.forEach(function(subValue) {\n\t      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n\t    });\n\t  } else if (isMap(value)) {\n\t    value.forEach(function(subValue, key) {\n\t      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n\t    });\n\t  }\n\n\t  var keysFunc = isFull\n\t    ? (isFlat ? getAllKeysIn : getAllKeys)\n\t    : (isFlat ? keysIn : keys);\n\n\t  var props = isArr ? undefined : keysFunc(value);\n\t  arrayEach(props || value, function(subValue, key) {\n\t    if (props) {\n\t      key = subValue;\n\t      subValue = value[key];\n\t    }\n\t    // Recursively populate clone (susceptible to call stack limits).\n\t    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n\t  });\n\t  return result;\n\t}\n\n\t/** Used to compose bitmasks for cloning. */\n\tvar CLONE_DEEP_FLAG = 1,\n\t    CLONE_SYMBOLS_FLAG = 4;\n\n\t/**\n\t * This method is like `_.clone` except that it recursively clones `value`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 1.0.0\n\t * @category Lang\n\t * @param {*} value The value to recursively clone.\n\t * @returns {*} Returns the deep cloned value.\n\t * @see _.clone\n\t * @example\n\t *\n\t * var objects = [{ 'a': 1 }, { 'b': 2 }];\n\t *\n\t * var deep = _.cloneDeep(objects);\n\t * console.log(deep[0] === objects[0]);\n\t * // => false\n\t */\n\tfunction cloneDeep(value) {\n\t  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n\t}\n\n\t/**\n\t * Performs a deep comparison between two values to determine if they are\n\t * equivalent.\n\t *\n\t * **Note:** This method supports comparing arrays, array buffers, booleans,\n\t * date objects, error objects, maps, numbers, `Object` objects, regexes,\n\t * sets, strings, symbols, and typed arrays. `Object` objects are compared\n\t * by their own, not inherited, enumerable properties. Functions and DOM\n\t * nodes are compared by strict equality, i.e. `===`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to compare.\n\t * @param {*} other The other value to compare.\n\t * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t * @example\n\t *\n\t * var object = { 'a': 1 };\n\t * var other = { 'a': 1 };\n\t *\n\t * _.isEqual(object, other);\n\t * // => true\n\t *\n\t * object === other;\n\t * // => false\n\t */\n\tfunction isEqual(value, other) {\n\t  return baseIsEqual(value, other);\n\t}\n\n\tvar isMergeableObject = function isMergeableObject(value) {\n\t\treturn isNonNullObject(value)\n\t\t\t&& !isSpecial(value)\n\t};\n\n\tfunction isNonNullObject(value) {\n\t\treturn !!value && typeof value === 'object'\n\t}\n\n\tfunction isSpecial(value) {\n\t\tvar stringValue = Object.prototype.toString.call(value);\n\n\t\treturn stringValue === '[object RegExp]'\n\t\t\t|| stringValue === '[object Date]'\n\t\t\t|| isReactElement(value)\n\t}\n\n\t// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\n\tvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\n\tvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\n\tfunction isReactElement(value) {\n\t\treturn value.$$typeof === REACT_ELEMENT_TYPE\n\t}\n\n\tfunction emptyTarget(val) {\n\t\treturn Array.isArray(val) ? [] : {}\n\t}\n\n\tfunction cloneUnlessOtherwiseSpecified(value, options) {\n\t\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t\t: value\n\t}\n\n\tfunction defaultArrayMerge(target, source, options) {\n\t\treturn target.concat(source).map(function(element) {\n\t\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t\t})\n\t}\n\n\tfunction getMergeFunction(key, options) {\n\t\tif (!options.customMerge) {\n\t\t\treturn deepmerge\n\t\t}\n\t\tvar customMerge = options.customMerge(key);\n\t\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n\t}\n\n\tfunction getEnumerableOwnPropertySymbols(target) {\n\t\treturn Object.getOwnPropertySymbols\n\t\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t\t})\n\t\t\t: []\n\t}\n\n\tfunction getKeys(target) {\n\t\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n\t}\n\n\tfunction propertyIsOnObject(object, property) {\n\t\ttry {\n\t\t\treturn property in object\n\t\t} catch(_) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\t// Protects from prototype poisoning and unexpected merging up the prototype chain.\n\tfunction propertyIsUnsafe(target, key) {\n\t\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n\t}\n\n\tfunction mergeObject(target, source, options) {\n\t\tvar destination = {};\n\t\tif (options.isMergeableObject(target)) {\n\t\t\tgetKeys(target).forEach(function(key) {\n\t\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t\t});\n\t\t}\n\t\tgetKeys(source).forEach(function(key) {\n\t\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t\t} else {\n\t\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t\t}\n\t\t});\n\t\treturn destination\n\t}\n\n\tfunction deepmerge(target, source, options) {\n\t\toptions = options || {};\n\t\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\t\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t\t// implementations can use it. The caller may not replace it.\n\t\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\t\tvar sourceIsArray = Array.isArray(source);\n\t\tvar targetIsArray = Array.isArray(target);\n\t\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\t\tif (!sourceAndTargetTypesMatch) {\n\t\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t\t} else if (sourceIsArray) {\n\t\t\treturn options.arrayMerge(target, source, options)\n\t\t} else {\n\t\t\treturn mergeObject(target, source, options)\n\t\t}\n\t}\n\n\tdeepmerge.all = function deepmergeAll(array, options) {\n\t\tif (!Array.isArray(array)) {\n\t\t\tthrow new Error('first argument should be an array')\n\t\t}\n\n\t\treturn array.reduce(function(prev, next) {\n\t\t\treturn deepmerge(prev, next, options)\n\t\t}, {})\n\t};\n\n\tvar deepmerge_1 = deepmerge;\n\n\tvar cjs = deepmerge_1;\n\n\tfunction t(t){return 65<=t&&t<=90}function n(t){return 97<=t&&t<=122}function r(t){return 48<=t&&t<=57}function o(t){return t-32}function e(t){return t+32}function u(u){const c=u.charCodeAt(0);if(r(c)||45===c||isNaN(c))return u;let i=t(c);const f=i?[e(c)]:[c],s=u.length;for(let t=1;t<s;t++){let r=u.charCodeAt(t);if(95===r||32===r||45===r){if(i=!0,r=u.charCodeAt(++t),isNaN(r))return u;n(r)?f.push(o(r)):f.push(r);}else f.push(r);}return i?String.fromCharCode.apply(void 0,f):u}function c(r,o){const u=r.charCodeAt(0);if(!n(u)||isNaN(u))return r;let c=!1;const i=[u];let f=95;o&&o.charCodeAt(0)&&(f=o.charCodeAt(0));const s=r.length;for(let n=1;n<s;n++){const o=r.charCodeAt(n);t(o)?(c=!0,i.push(f),i.push(e(o))):i.push(o);}return c?String.fromCharCode.apply(void 0,i):r}function s(t){return Boolean(t)&&\"object\"==typeof t&&!(t instanceof Function)&&!(t instanceof Date)}function a(t,n,r){if(Array.isArray(t))return function(t,n,r){const o=new Array(t.length);let e=0;for(const u of t)o[e++]=s(u)?a(u,n,r):u;return o}(t,n,r);if(void 0!==t.prototype)return t;const o={};for(const e in t){const u=t[e];o[n(e,r)]=s(u)?a(u,n,r):u;}return o}function l(t){return s(t)?a(t,u):t}function d(t,n){return s(t)?a(t,c,n):t}\n\n\tlet options$2 = {};\n\tfunction merge(x, y, opt = {}) {\n\t  if (!y || typeof y !== \"object\") {\n\t    return x;\n\t  }\n\t  if (!x || typeof x !== \"object\") {\n\t    return x;\n\t  }\n\t  function arrayMerge(target, source, options2) {\n\t    const destination = target.slice();\n\t    source.forEach((item, index) => {\n\t      if (typeof destination[index] === \"undefined\") {\n\t        destination[index] = options2.cloneUnlessOtherwiseSpecified(\n\t          item,\n\t          options2\n\t        );\n\t      } else if (options2.isMergeableObject(item)) {\n\t        destination[index] = merge(target[index], item, options2);\n\t      } else if (target.indexOf(item) === -1) {\n\t        destination.push(item);\n\t      }\n\t    });\n\t    return destination;\n\t  }\n\t  return cjs(x, y, {\n\t    arrayMerge\n\t  });\n\t}\n\tfunction setOptions(optns) {\n\t  options$2 = optns;\n\t}\n\tfunction getOptions() {\n\t  return options$2;\n\t}\n\tfunction isObject(val) {\n\t  return val && typeof val === \"object\" && !(val instanceof Array);\n\t}\n\tfunction camelCase(str) {\n\t  return u(str);\n\t}\n\tfunction snakeCase(str) {\n\t  return c(str, \"_\");\n\t}\n\tfunction toCamel(obj) {\n\t  if (!obj)\n\t    return obj;\n\t  const objCopy = JSON.parse(JSON.stringify(obj));\n\t  return l(objCopy);\n\t}\n\tfunction toCamelPath(str) {\n\t  if (typeof str === \"string\") {\n\t    return str.split(\".\").map(u).join(\".\");\n\t  }\n\t  return str;\n\t}\n\tfunction toSnake(obj) {\n\t  if (!obj)\n\t    return obj;\n\t  const objCopy = JSON.parse(JSON.stringify(obj));\n\t  return d(objCopy, \"_\");\n\t}\n\tfunction trimBoth(str) {\n\t  return trimStart(trimEnd(str));\n\t}\n\tfunction trimStart(str) {\n\t  return typeof str === \"string\" ? str.replace(/^[/]+/, \"\") : \"\";\n\t}\n\tfunction trimEnd(str) {\n\t  return typeof str === \"string\" ? str.replace(/[/]+$/, \"\") : \"\";\n\t}\n\tfunction stringifyQuery(str) {\n\t  return lib.stringify(str);\n\t}\n\tfunction map$1(arr, cb) {\n\t  return arr instanceof Array ? arr.map(cb) : [];\n\t}\n\tfunction reduce$1(arr, cb, init) {\n\t  return arr instanceof Array ? arr.reduce(cb, init) : init;\n\t}\n\tfunction isServer() {\n\t  return !(typeof window !== \"undefined\" && window && window.document);\n\t}\n\tfunction isFunction(func) {\n\t  return typeof func === \"function\";\n\t}\n\tfunction defaultMethods(request, uri, methods) {\n\t  return {\n\t    list: methods.indexOf(\"list\") >= 0 ? function(query) {\n\t      return request(\"get\", uri, void 0, query);\n\t    } : void 0,\n\t    get: methods.indexOf(\"get\") >= 0 ? function(id, query) {\n\t      return request(\"get\", uri, id, query);\n\t    } : void 0\n\t  };\n\t}\n\tasync function vaultRequest(method, url, data, opt = void 0) {\n\t  const vaultUrl = options$2.vaultUrl;\n\t  const timeout = options$2.timeout;\n\t  const requestId = vaultRequestId();\n\t  const callback = `swell_vault_response_${requestId}`;\n\t  data = {\n\t    $jsonp: {\n\t      method,\n\t      callback\n\t    },\n\t    $data: data,\n\t    $key: options$2.key\n\t  };\n\t  return new Promise((resolve, reject) => {\n\t    const script = document.createElement(\"script\");\n\t    script.type = \"text/javascript\";\n\t    script.src = `${trimEnd(vaultUrl)}/${trimStart(url)}?${serializeData(\n      data\n    )}`;\n\t    const errorTimeout = setTimeout(() => {\n\t      window[callback]({\n\t        $error: `Request timed out after ${timeout / 1e3} seconds`,\n\t        $status: 500\n\t      });\n\t    }, timeout);\n\t    window[callback] = (result) => {\n\t      clearTimeout(errorTimeout);\n\t      if (result && result.$error) {\n\t        const err = new Error(result.$error);\n\t        err.code = \"request_error\";\n\t        err.status = result.$status;\n\t        reject(err);\n\t      } else if (!result || result.$status >= 300) {\n\t        const err = new Error(\n\t          \"A connection error occurred while making the request\"\n\t        );\n\t        err.code = \"connection_error\";\n\t        err.status = result.$status;\n\t        reject(err);\n\t      } else {\n\t        resolve(options$2.useCamelCase ? toCamel(result.$data) : result.$data);\n\t      }\n\t      delete window[callback];\n\t      script.parentNode.removeChild(script);\n\t    };\n\t    document.getElementsByTagName(\"head\")[0].appendChild(script);\n\t  });\n\t}\n\tfunction vaultRequestId() {\n\t  window.__swell_vault_request_id = window.__swell_vault_request_id || 0;\n\t  window.__swell_vault_request_id++;\n\t  return window.__swell_vault_request_id;\n\t}\n\tfunction serializeData(data) {\n\t  const s = [];\n\t  const add = function(key2, value) {\n\t    if (typeof value === \"function\") {\n\t      value = value();\n\t    } else if (value == null) {\n\t      value = \"\";\n\t    }\n\t    s[s.length] = encodeURIComponent(key2) + \"=\" + encodeURIComponent(value);\n\t  };\n\t  for (const key2 in data) {\n\t    buildParams(key2, data[key2], add);\n\t  }\n\t  return s.join(\"&\").replace(\" \", \"+\");\n\t}\n\tconst rbracket = /\\[\\]$/;\n\tfunction buildParams(key, obj, add) {\n\t  let name;\n\t  if (obj instanceof Array) {\n\t    for (let i = 0; i < obj.length; i++) {\n\t      if (rbracket.test(key)) {\n\t        add(key, v);\n\t      } else {\n\t        buildParams(\n\t          key + \"[\" + (typeof v === \"object\" && v != null ? i : \"\") + \"]\",\n\t          v,\n\t          add\n\t        );\n\t      }\n\t    }\n\t  } else if (obj && typeof obj === \"object\") {\n\t    for (name in obj) {\n\t      buildParams(key + \"[\" + name + \"]\", obj[name], add);\n\t    }\n\t  } else {\n\t    add(key, obj);\n\t  }\n\t}\n\tfunction base64Encode(string) {\n\t  if (typeof btoa !== \"undefined\") {\n\t    return btoa(string);\n\t  }\n\t  return Buffer.from(string).toString(\"base64\");\n\t}\n\tfunction getLocationParams(location) {\n\t  const url = location.search;\n\t  const query = url.substr(1);\n\t  const result = {};\n\t  query.split(\"&\").forEach(function(part) {\n\t    const item = part.split(\"=\");\n\t    result[item[0]] = decodeURIComponent(item[1]);\n\t  });\n\t  return result;\n\t}\n\tfunction removeUrlParams() {\n\t  const url = window.location.origin + window.location.pathname;\n\t  window.history.pushState({ path: url }, \"\", url);\n\t}\n\n\tvar utils = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tdefaultMethods: defaultMethods,\n\t\tset: set,\n\t\tget: get,\n\t\tuniq: uniq,\n\t\tfind: find,\n\t\tround: round,\n\t\tfindIndex: findIndex,\n\t\tcamelCase: camelCase,\n\t\tcloneDeep: cloneDeep,\n\t\tmerge: merge,\n\t\tsetOptions: setOptions,\n\t\tgetOptions: getOptions,\n\t\ttoCamel: toCamel,\n\t\ttoCamelPath: toCamelPath,\n\t\ttoSnake: toSnake,\n\t\ttrimBoth: trimBoth,\n\t\ttrimStart: trimStart,\n\t\ttrimEnd: trimEnd,\n\t\tstringifyQuery: stringifyQuery,\n\t\tisServer: isServer,\n\t\tisFunction: isFunction,\n\t\tisObject: isObject,\n\t\tisEqual: isEqual,\n\t\tsnakeCase: snakeCase,\n\t\tmap: map$1,\n\t\treduce: reduce$1,\n\t\tbase64Encode: base64Encode,\n\t\tvaultRequest: vaultRequest,\n\t\tgetLocationParams: getLocationParams,\n\t\tremoveUrlParams: removeUrlParams\n\t});\n\n\tconst cardApi = {\n\t  async createToken(data) {\n\t    let error = null;\n\t    let code = null;\n\t    let param = null;\n\t    if (!data) {\n\t      error = \"Card details are missing in `swell.card.createToken(card)`\";\n\t      param = \"\";\n\t    }\n\t    const card = toSnake(data);\n\t    if (!card.nonce) {\n\t      if (!this.validateNumber(card.number)) {\n\t        error = \"Card number appears to be invalid\";\n\t        code = \"invalid_card_number\";\n\t        param = \"number\";\n\t      }\n\t      if (card.exp) {\n\t        const exp = this.expiry(card.exp);\n\t        card.exp_month = exp.month;\n\t        card.exp_year = exp.year;\n\t      }\n\t      if (!this.validateExpiry(card.exp_month, card.exp_year)) {\n\t        error = \"Card expiry appears to be invalid\";\n\t        code = \"invalid_card_expiry\";\n\t        param = \"exp_month\";\n\t      }\n\t      if (!this.validateCVC(card.cvc)) {\n\t        error = \"Card CVC code appears to be invalid\";\n\t        code = \"invalid_card_cvc\";\n\t        param = \"exp_cvc\";\n\t      }\n\t    }\n\t    if (error) {\n\t      const err = new Error(error);\n\t      err.code = code || \"invalid_card\";\n\t      err.status = 402;\n\t      err.param = param;\n\t      throw err;\n\t    }\n\t    const result = await vaultRequest(\"post\", \"/tokens\", card);\n\t    if (result.errors) {\n\t      const param2 = Object.keys(result.errors)[0];\n\t      const err = new Error(result.errors[param2].message || \"Unknown error\");\n\t      err.code = \"vault_error\";\n\t      err.status = 402;\n\t      err.param = param2;\n\t      throw err;\n\t    }\n\t    return result;\n\t  },\n\t  expiry(value) {\n\t    if (value && value.month && value.year) {\n\t      return value;\n\t    }\n\t    const parts = new String(value).split(/[\\s\\/\\-]+/, 2);\n\t    const month = parts[0];\n\t    let year = parts[1];\n\t    if (year && year.length === 2 && /^\\d+$/.test(year)) {\n\t      const prefix = new Date().getFullYear().toString().substring(0, 2);\n\t      year = prefix + year;\n\t    }\n\t    return {\n\t      month: ~~month,\n\t      year: ~~year\n\t    };\n\t  },\n\t  types() {\n\t    let e, t, n, r;\n\t    t = {};\n\t    for (e = n = 40; n <= 49; e = ++n)\n\t      t[e] = \"Visa\";\n\t    for (e = r = 50; r <= 59; e = ++r)\n\t      t[e] = \"MasterCard\";\n\t    return t[34] = t[37] = \"American Express\", t[60] = t[62] = t[64] = t[65] = \"Discover\", t[35] = \"JCB\", t[30] = t[36] = t[38] = t[39] = \"Diners Club\", t;\n\t  },\n\t  type(num) {\n\t    return this.types()[num.slice(0, 2)] || \"Unknown\";\n\t  },\n\t  luhnCheck(num) {\n\t    let t, n, r, i, s, o;\n\t    r = true, i = 0, n = (num + \"\").split(\"\").reverse();\n\t    for (s = 0, o = n.length; s < o; s++) {\n\t      t = n[s], t = parseInt(t, 10);\n\t      if (r = !r)\n\t        t *= 2;\n\t      t > 9 && (t -= 9), i += t;\n\t    }\n\t    return i % 10 === 0;\n\t  },\n\t  validateNumber(num) {\n\t    return num = (num + \"\").replace(/\\s+|-/g, \"\"), num.length >= 10 && num.length <= 16 && this.luhnCheck(num);\n\t  },\n\t  validateExpiry(month, year) {\n\t    let r, i;\n\t    return month = String(month).trim(), year = String(year).trim(), /^\\d+$/.test(month) ? /^\\d+$/.test(year) ? parseInt(month, 10) <= 12 ? (i = new Date(year, month), r = new Date(), i.setMonth(i.getMonth() - 1), i.setMonth(i.getMonth() + 1, 1), i > r) : false : false : false;\n\t  },\n\t  validateCVC(val) {\n\t    return val = String(val).trim(), /^\\d+$/.test(val) && val.length >= 3 && val.length <= 4;\n\t  }\n\t};\n\n\tvar __defProp$9 = Object.defineProperty;\n\tvar __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp$9 = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum$9 = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues$9 = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp$9.call(b, prop))\n\t      __defNormalProp$9(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols$9)\n\t    for (var prop of __getOwnPropSymbols$9(b)) {\n\t      if (__propIsEnum$9.call(b, prop))\n\t        __defNormalProp$9(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tconst COOKIE_MAX_AGE = 604800;\n\tfunction getCookie(name) {\n\t  if (isServer()) {\n\t    return void 0;\n\t  }\n\t  const matches = document.cookie.match(\n\t    new RegExp(\n\t      \"(?:^|; )\" + name.replace(/([.$?*|{}()[]\\\\\\/\\+^])/g, \"\\\\$1\") + \"=([^;]*)\"\n\t    )\n\t  );\n\t  return matches ? decodeURIComponent(matches[1]) : void 0;\n\t}\n\tfunction setCookie(name, value, options = {}) {\n\t  if (isServer()) {\n\t    return;\n\t  }\n\t  options = __spreadValues$9({\n\t    path: \"/\",\n\t    \"max-age\": COOKIE_MAX_AGE,\n\t    samesite: \"lax\"\n\t  }, options);\n\t  if (options.expires && options.expires.toUTCString) {\n\t    options.expires = options.expires.toUTCString();\n\t  }\n\t  let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n\t  for (const optionKey in options) {\n\t    updatedCookie += \"; \" + optionKey;\n\t    const optionValue = options[optionKey];\n\t    if (optionValue !== true) {\n\t      updatedCookie += \"=\" + optionValue;\n\t    }\n\t  }\n\t  document.cookie = updatedCookie;\n\t}\n\n\tvar __defProp$8 = Object.defineProperty;\n\tvar __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp$8 = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum$8 = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues$8 = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp$8.call(b, prop))\n\t      __defNormalProp$8(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols$8)\n\t    for (var prop of __getOwnPropSymbols$8(b)) {\n\t      if (__propIsEnum$8.call(b, prop))\n\t        __defNormalProp$8(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tconst RECORD_TIMEOUT = 5e3;\n\tlet VALUES = {};\n\tconst cacheApi = {\n\t  options: {\n\t    enabled: true,\n\t    debug: false\n\t  },\n\t  debug(...args) {\n\t    if (this.options.debug) {\n\t      console.log(...args);\n\t    }\n\t  },\n\t  values({ model, id }, setValues = void 0) {\n\t    this.debug(\"cache.values\", ...arguments);\n\t    if (setValues !== void 0) {\n\t      for (let key in setValues) {\n\t        set(VALUES, `${model}.${id}.${key}`, setValues[key]);\n\t      }\n\t      return;\n\t    }\n\t    return get(VALUES, `${model}.${id}`, {});\n\t  },\n\t  preset(details) {\n\t    this.debug(\"cache.preset\", ...arguments);\n\t    const { presets = [] } = this.values(details);\n\t    presets.push(details);\n\t    this.values(details, { presets });\n\t  },\n\t  set(details) {\n\t    this.debug(\"cache.set\", ...arguments);\n\t    let { model, id, path, value } = details;\n\t    let { data = {}, record, presets } = this.values(details);\n\t    if (id === null) {\n\t      return;\n\t    }\n\t    if (record === void 0) {\n\t      return this.preset(details);\n\t    }\n\t    data = merge(record || {}, data);\n\t    const { useCamelCase } = getOptions();\n\t    if (useCamelCase && value && typeof value === \"object\") {\n\t      value = toCamel(value);\n\t    }\n\t    if (path || value instanceof Array) {\n\t      let upData = __spreadValues$8({}, data || {});\n\t      let upPath = useCamelCase ? toCamelPath(path) : path;\n\t      set(upData, upPath || \"\", value);\n\t      data = upData;\n\t    } else if (value && typeof value === \"object\") {\n\t      data = data || {};\n\t      data = merge(data, value);\n\t    } else {\n\t      data = value;\n\t    }\n\t    this.values(details, { data });\n\t    try {\n\t      const cache = VALUES[model][id];\n\t      if (cache !== void 0) {\n\t        if (cache.data !== void 0) {\n\t          cache.data = JSON.parse(JSON.stringify(cache.data));\n\t        }\n\t        if (cache.record !== void 0) {\n\t          cache.record = JSON.parse(JSON.stringify(cache.record));\n\t        }\n\t      }\n\t    } catch (err) {\n\t    }\n\t  },\n\t  get(model, id) {\n\t    this.debug(\"cache.get\", ...arguments);\n\t    const { data, recordTimer } = this.values({ model, id });\n\t    this.debug(\"cache.get:data+recordTimer\", ...arguments);\n\t    if (recordTimer) {\n\t      return data;\n\t    }\n\t  },\n\t  setRecord(record, details) {\n\t    this.debug(\"cache.setRecord\", ...arguments);\n\t    let { recordTimer, presets } = this.values(details);\n\t    if (recordTimer) {\n\t      clearTimeout(recordTimer);\n\t    }\n\t    recordTimer = setTimeout(() => {\n\t      this.values(details, { record: void 0, recordTimer: void 0 });\n\t    }, RECORD_TIMEOUT);\n\t    this.values(details, {\n\t      record: record !== void 0 ? record : null,\n\t      recordTimer\n\t    });\n\t    if (presets) {\n\t      for (let preset of presets) {\n\t        this.set(preset);\n\t      }\n\t      this.values(details, { presets: void 0 });\n\t    }\n\t    const result = this.get(details.model, details.id);\n\t    return result !== void 0 ? result : record;\n\t  },\n\t  async getFetch(model, id, fetch) {\n\t    if (this.options.enabled) {\n\t      this.debug(\"cache.getFetch\", ...arguments);\n\t      const value = this.get(model, id);\n\t      if (value !== void 0) {\n\t        return value;\n\t      }\n\t    }\n\t    const record = await fetch();\n\t    return this.setRecord(record, { model, id });\n\t  },\n\t  clear(model = void 0, id = void 0) {\n\t    this.debug(\"cache.clear\", ...arguments);\n\t    if (model) {\n\t      if (id) {\n\t        set(VALUES, `${model}.${id}`, void 0);\n\t      } else {\n\t        set(VALUES, model, void 0);\n\t      }\n\t    } else {\n\t      VALUES = {};\n\t    }\n\t  }\n\t};\n\n\tfunction methods$a(request) {\n\t  const { get, list } = defaultMethods(request, \"/attributes\", [\"list\", \"get\"]);\n\t  return {\n\t    get: (id, ...args) => {\n\t      return cacheApi.getFetch(\"attributes\", id, () => get(id, ...args));\n\t    },\n\t    list\n\t  };\n\t}\n\n\tvar __defProp$7 = Object.defineProperty;\n\tvar __defProps$4 = Object.defineProperties;\n\tvar __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;\n\tvar __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp$7 = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum$7 = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues$7 = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp$7.call(b, prop))\n\t      __defNormalProp$7(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols$7)\n\t    for (var prop of __getOwnPropSymbols$7(b)) {\n\t      if (__propIsEnum$7.call(b, prop))\n\t        __defNormalProp$7(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tvar __spreadProps$4 = (a, b) => __defProps$4(a, __getOwnPropDescs$4(b));\n\tlet OPTIONS;\n\tfunction methods$9(request, opt) {\n\t  OPTIONS = opt;\n\t  const { get: get2, list } = defaultMethods(request, \"/products\", [\"list\", \"get\"]);\n\t  return {\n\t    get: (id, ...args) => {\n\t      return cacheApi.getFetch(\"products\", id, () => get2(id, ...args));\n\t    },\n\t    list,\n\t    variation: calculateVariation,\n\t    categories: getCategories,\n\t    attributes: getAttributes,\n\t    priceRange: getPriceRange,\n\t    filters: getFilters,\n\t    filterableAttributeFilters: (products, options) => getFilterableAttributeFilters(request, products, options)\n\t  };\n\t}\n\tfunction getProductOptionIndex(product, filter = void 0) {\n\t  if (!product.options) {\n\t    return {};\n\t  }\n\t  const productOptions = filter ? product.options.filter(filter) : product.options;\n\t  return reduce$1(\n\t    productOptions,\n\t    (acc, op) => {\n\t      const values = reduce$1(\n\t        op.values,\n\t        (acc2, val) => __spreadProps$4(__spreadValues$7({}, acc2), {\n\t          [val.id]: __spreadProps$4(__spreadValues$7({}, val), { id: val.id }),\n\t          [val.name]: __spreadProps$4(__spreadValues$7({}, val), { id: val.id })\n\t        }),\n\t        {}\n\t      );\n\t      return __spreadProps$4(__spreadValues$7({}, acc), {\n\t        [op.id]: __spreadProps$4(__spreadValues$7({}, op), { values }),\n\t        [op.name]: __spreadProps$4(__spreadValues$7({}, op), { values })\n\t      });\n\t    },\n\t    {}\n\t  );\n\t}\n\tfunction cleanProductOptions(options) {\n\t  let result = options || [];\n\t  if (options && typeof options === \"object\" && !(options instanceof Array)) {\n\t    result = [];\n\t    for (const key in options) {\n\t      result.push({\n\t        id: key,\n\t        value: options[key]\n\t      });\n\t    }\n\t  }\n\t  if (result instanceof Array) {\n\t    return result.map((op) => ({\n\t      id: op.id || op.name,\n\t      value: op.value\n\t    }));\n\t  }\n\t  return result;\n\t}\n\tfunction findVariantWithOptionValueIds(product, ids) {\n\t  if (ids.length > 0) {\n\t    const variants = product.variants && product.variants.results;\n\t    if (variants.length > 0) {\n\t      for (const variant of variants) {\n\t        const variantObj = toSnake(variant);\n\t        const matched = isEqual(variantObj.option_value_ids.sort(), ids.sort());\n\t        if (matched) {\n\t          return variant;\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return null;\n\t}\n\tfunction calculateVariation(input, options, purchaseOption) {\n\t  const product = OPTIONS.useCamelCase ? toSnake(input) : input;\n\t  const purchaseOp = findPurchaseOption(product, purchaseOption);\n\t  const variation = __spreadProps$4(__spreadValues$7({}, product), {\n\t    price: purchaseOp.price || 0,\n\t    sale_price: purchaseOp.sale_price,\n\t    orig_price: purchaseOp.orig_price,\n\t    stock_status: product.stock_status\n\t  });\n\t  let optionPrice = 0;\n\t  const variantOptionValueIds = [];\n\t  const cleanOptions = cleanProductOptions(options);\n\t  const index = getProductOptionIndex(product);\n\t  for (const option of cleanOptions) {\n\t    if (index[option.id] && index[option.id].values[option.value]) {\n\t      if (index[option.id].variant) {\n\t        variantOptionValueIds.push(index[option.id].values[option.value].id);\n\t      } else {\n\t        optionPrice += index[option.id].values[option.value].price || 0;\n\t      }\n\t    }\n\t  }\n\t  if (variantOptionValueIds.length > 0) {\n\t    const variant = findVariantWithOptionValueIds(\n\t      product,\n\t      variantOptionValueIds\n\t    );\n\t    if (variant) {\n\t      let variantPurchaseOp = purchaseOp;\n\t      try {\n\t        variantPurchaseOp = findPurchaseOption(variant, purchaseOption);\n\t      } catch (err) {\n\t      }\n\t      variation.variant_id = variant.id;\n\t      variation.price = variantPurchaseOp.price || 0;\n\t      variation.sale_price = variantPurchaseOp.sale_price || purchaseOp.sale_price;\n\t      variation.orig_price = variantPurchaseOp.orig_price || purchaseOp.orig_price;\n\t      variation.stock_status = variant.stock_status;\n\t      variation.stock_level = variant.stock_level || 0;\n\t      variation.images = (variant.images && variant.images.length ? variant.images : product.images) || [];\n\t    }\n\t  }\n\t  if (optionPrice > 0) {\n\t    variation.price += optionPrice;\n\t    if (variation.sale_price) {\n\t      variation.sale_price += optionPrice;\n\t    }\n\t    if (variation.orig_price) {\n\t      variation.orig_price += optionPrice;\n\t    }\n\t  }\n\t  if (variation.sale_price === void 0) {\n\t    delete variation.sale_price;\n\t  }\n\t  if (variation.orig_price === void 0) {\n\t    delete variation.orig_price;\n\t  }\n\t  return OPTIONS.useCamelCase ? toCamel(variation) : variation;\n\t}\n\tfunction findPurchaseOption(product, purchaseOption) {\n\t  const plan = get(purchaseOption, \"plan_id\", get(purchaseOption, \"plan\"));\n\t  const type = get(\n\t    purchaseOption,\n\t    \"type\",\n\t    typeof purchaseOption === \"string\" ? purchaseOption : plan !== void 0 ? \"subscription\" : \"standard\"\n\t  );\n\t  let option = get(product, `purchase_options.${type}`);\n\t  if (!option && type !== \"standard\") {\n\t    throw new Error(\n\t      `Product purchase option '${type}' not found or not active`\n\t    );\n\t  }\n\t  if (option) {\n\t    if (option.plans) {\n\t      if (plan !== void 0) {\n\t        option = find(option.plans, { id: plan });\n\t        if (!option) {\n\t          throw new Error(\n\t            `Subscription purchase plan '${plan}' not found or not active`\n\t          );\n\t        }\n\t      } else {\n\t        option = option.plans[0];\n\t      }\n\t    }\n\t    return __spreadProps$4(__spreadValues$7({}, option), {\n\t      price: typeof option.price === \"number\" ? option.price : product.price,\n\t      sale_price: typeof option.sale_price === \"number\" ? option.sale_price : product.sale_price,\n\t      orig_price: typeof option.orig_price === \"number\" ? option.orig_price : product.orig_price\n\t    });\n\t  }\n\t  return {\n\t    type: \"standard\",\n\t    price: product.price,\n\t    sale_price: product.sale_price,\n\t    orig_price: product.orig_price\n\t  };\n\t}\n\tasync function getFilterableAttributeFilters(request, products, options) {\n\t  const { results: filterableAttributes } = await methods$a(\n\t    request).list({\n\t    filterable: true\n\t  });\n\t  return getFilters(products, __spreadProps$4(__spreadValues$7({}, options), { filterableAttributes }));\n\t}\n\tfunction getFilters(products, options = {}) {\n\t  let attributes = (options.attributes || options.attributes === void 0) && getAttributes(products);\n\t  if (options.filterableAttributes) {\n\t    attributes = attributes.filter(\n\t      (productAttr) => options.filterableAttributes.find(\n\t        (filterableAttr) => productAttr.id === filterableAttr.id\n\t      )\n\t    );\n\t  }\n\t  const categories = (options.categories || options.categories === void 0) && getCategories(products);\n\t  const priceRange = (options.price || options.price === void 0) && getPriceRange(products);\n\t  let filters = [];\n\t  if (priceRange) {\n\t    filters.push({\n\t      id: \"price\",\n\t      label: \"Price\",\n\t      type: \"range\",\n\t      options: [\n\t        {\n\t          value: priceRange.min,\n\t          label: priceRange.min\n\t        },\n\t        {\n\t          value: priceRange.max,\n\t          label: priceRange.max\n\t        }\n\t      ],\n\t      interval: priceRange.interval\n\t    });\n\t  }\n\t  if (categories && categories.length > 0) {\n\t    filters.push({\n\t      id: \"category\",\n\t      label: \"Category\",\n\t      type: \"select\",\n\t      options: categories.map((category) => ({\n\t        value: category.slug,\n\t        label: category.name\n\t      }))\n\t    });\n\t  }\n\t  if (attributes && attributes.length > 0) {\n\t    filters = [\n\t      ...filters,\n\t      ...reduce$1(\n\t        attributes,\n\t        (acc, attr) => [\n\t          ...acc,\n\t          ...attr.id !== \"category\" && attr.id !== \"price\" && attr.values instanceof Array && attr.values.length > 0 ? [\n\t            {\n\t              id: attr.id,\n\t              label: attr.name,\n\t              type: \"select\",\n\t              options: attr.values.map((value) => ({\n\t                value,\n\t                label: value\n\t              }))\n\t            }\n\t          ] : []\n\t        ],\n\t        []\n\t      )\n\t    ];\n\t  }\n\t  return filters;\n\t}\n\tfunction getCategories(products) {\n\t  const categories = [];\n\t  const collection = products && products.results || (products.id ? [products] : products);\n\t  if (collection instanceof Array) {\n\t    for (let product of collection) {\n\t      if (product.categories) {\n\t        for (let category of product.categories) {\n\t          if (!category)\n\t            continue;\n\t          let ex = find(categories, { id: category.id });\n\t          if (!ex) {\n\t            categories.push(category);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return categories;\n\t}\n\tfunction getAttributes(products) {\n\t  const attributes = [];\n\t  const collection = products && products.results || (products.id ? [products] : products);\n\t  if (collection instanceof Array) {\n\t    for (let product of collection) {\n\t      if (product.attributes) {\n\t        for (let id in product.attributes) {\n\t          if (!product.attributes[id])\n\t            continue;\n\t          const value = product.attributes[id].value;\n\t          let attr = find(attributes, { id: snakeCase(id) });\n\t          if (attr) {\n\t            attr.values = uniq([\n\t              ...attr.values,\n\t              ...value instanceof Array ? value : [value]\n\t            ]);\n\t          } else {\n\t            attributes.push(__spreadProps$4(__spreadValues$7({}, product.attributes[id]), {\n\t              value: void 0,\n\t              values: [...value instanceof Array ? value : [value]]\n\t            }));\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return attributes;\n\t}\n\tfunction getPriceRange(products) {\n\t  let min;\n\t  let max;\n\t  let interval;\n\t  const collection = products && products.results || (products.id ? [products] : products);\n\t  if (collection instanceof Array) {\n\t    for (let product of collection) {\n\t      if (max === void 0 || product.price > max) {\n\t        max = Math.ceil(product.price);\n\t      }\n\t      if (min === void 0 || product.price < min) {\n\t        min = Math.floor(product.price);\n\t      }\n\t    }\n\t  }\n\t  if (min === max) {\n\t    return null;\n\t  }\n\t  interval = Math.ceil((max - min) / 10) || 1;\n\t  if (interval > 1e3) {\n\t    interval = 1e3;\n\t  } else if (interval > 100) {\n\t    interval = 100;\n\t  } else if (interval > 10) {\n\t    interval = 10;\n\t  }\n\t  if (max % interval > 0) {\n\t    max = interval + max - max % interval;\n\t  }\n\t  if (min % interval > 0) {\n\t    min = min - min % interval;\n\t  }\n\t  while ((max - min) / interval % 1 > 0) {\n\t    max++;\n\t  }\n\t  return {\n\t    min,\n\t    max,\n\t    interval\n\t  };\n\t}\n\n\tvar __defProp$6 = Object.defineProperty;\n\tvar __defProps$3 = Object.defineProperties;\n\tvar __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;\n\tvar __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp$6 = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum$6 = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues$6 = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp$6.call(b, prop))\n\t      __defNormalProp$6(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols$6)\n\t    for (var prop of __getOwnPropSymbols$6(b)) {\n\t      if (__propIsEnum$6.call(b, prop))\n\t        __defNormalProp$6(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tvar __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));\n\tfunction methods$8(request, options) {\n\t  return {\n\t    state: null,\n\t    order: null,\n\t    settings: null,\n\t    requested: false,\n\t    pendingRequests: [],\n\t    cacheClear: null,\n\t    async requestStateChange(method, url, id, data) {\n\t      return this.requestStateSync(async () => {\n\t        const result = await request(method, url, id, data);\n\t        if (result && result.errors) {\n\t          return result;\n\t        }\n\t        this.state = result;\n\t        return result;\n\t      });\n\t    },\n\t    async requestStateSync(handler) {\n\t      if (this.state) {\n\t        return await handler();\n\t      } else if (this.requested) {\n\t        return new Promise((resolve) => {\n\t          this.pendingRequests.push({ handler, resolve });\n\t        });\n\t      }\n\t      this.requested = true;\n\t      const result = await handler();\n\t      this.requested = false;\n\t      while (this.pendingRequests.length > 0) {\n\t        const { handler: handler2, resolve } = this.pendingRequests.shift();\n\t        resolve(handler2());\n\t      }\n\t      return result;\n\t    },\n\t    get() {\n\t      let data;\n\t      if (this.cacheClear) {\n\t        this.cacheClear = null;\n\t        data = { $cache: false };\n\t      }\n\t      return this.requestStateChange(\"get\", \"/cart\", void 0, data);\n\t    },\n\t    clearCache() {\n\t      this.cacheClear = true;\n\t    },\n\t    getItemData(item, data = {}) {\n\t      let result = cloneDeep(item);\n\t      if (typeof item === \"string\") {\n\t        result = __spreadProps$3(__spreadValues$6({}, data || {}), {\n\t          product_id: item\n\t        });\n\t      }\n\t      if (result && result.options) {\n\t        result.options = cleanProductOptions(result.options);\n\t      }\n\t      return result;\n\t    },\n\t    addItem(item, data) {\n\t      return this.requestStateChange(\n\t        \"post\",\n\t        \"/cart/items\",\n\t        this.getItemData(item, data)\n\t      );\n\t    },\n\t    updateItem(id, item) {\n\t      return this.requestStateChange(\n\t        \"put\",\n\t        `/cart/items/${id}`,\n\t        this.getItemData(item)\n\t      );\n\t    },\n\t    setItems(input) {\n\t      let items = input;\n\t      if (items && items.map) {\n\t        items = items.map(this.getItemData);\n\t      }\n\t      return this.requestStateChange(\"put\", \"/cart/items\", items);\n\t    },\n\t    removeItem(id) {\n\t      return this.requestStateChange(\"delete\", `/cart/items/${id}`);\n\t    },\n\t    recover(checkoutId) {\n\t      return this.requestStateChange(\"put\", `/cart/recover/${checkoutId}`);\n\t    },\n\t    update(input) {\n\t      let data = input;\n\t      if (data.items && data.items.map) {\n\t        data = __spreadProps$3(__spreadValues$6({}, data), {\n\t          items: data.items.map(this.getItemData)\n\t        });\n\t      }\n\t      return this.requestStateChange(\"put\", `/cart`, data);\n\t    },\n\t    applyCoupon(code) {\n\t      return this.requestStateChange(\"put\", \"/cart/coupon\", { code });\n\t    },\n\t    removeCoupon() {\n\t      return this.requestStateChange(\"delete\", \"/cart/coupon\");\n\t    },\n\t    applyGiftcard(code) {\n\t      return this.requestStateChange(\"post\", \"/cart/giftcards\", { code });\n\t    },\n\t    removeGiftcard(id) {\n\t      return this.requestStateChange(\"delete\", `/cart/giftcards/${id}`);\n\t    },\n\t    async getShippingRates() {\n\t      await this.requestStateChange(\"get\", \"/cart/shipment-rating\");\n\t      return this.state[options.useCamelCase ? \"shipmentRating\" : \"shipment_rating\"];\n\t    },\n\t    async submitOrder() {\n\t      const result = await request(\"post\", \"/cart/order\");\n\t      if (result.errors) {\n\t        return result;\n\t      }\n\t      this.state = null;\n\t      this.order = result;\n\t      return result;\n\t    },\n\t    async getOrder(checkoutId = void 0) {\n\t      let result;\n\t      if (checkoutId) {\n\t        result = await request(\"get\", `/cart/order`, {\n\t          checkout_id: checkoutId\n\t        });\n\t      } else {\n\t        result = await request(\"get\", `/cart/order`);\n\t      }\n\t      this.order = result;\n\t      return result;\n\t    },\n\t    async getSettings() {\n\t      this.settings = await request(\"get\", \"/cart/settings\");\n\t      return this.settings;\n\t    }\n\t  };\n\t}\n\n\tfunction methods$7(request) {\n\t  return {\n\t    state: null,\n\t    async requestStateChange(method, url, id, data) {\n\t      const result = await request(method, url, id, data);\n\t      if (result && result.errors) {\n\t        return result;\n\t      }\n\t      return this.state = result;\n\t    },\n\t    get(query) {\n\t      return this.requestStateChange(\"get\", \"/account\", query);\n\t    },\n\t    create(data) {\n\t      return this.requestStateChange(\"post\", \"/account\", data);\n\t    },\n\t    update(data) {\n\t      return this.requestStateChange(\"put\", \"/account\", data);\n\t    },\n\t    login(email, password) {\n\t      if (password && password.password_token) {\n\t        return this.requestStateChange(\"post\", \"/account/login\", {\n\t          email,\n\t          password_token: password.password_token\n\t        });\n\t      }\n\t      return this.requestStateChange(\"post\", \"/account/login\", {\n\t        email,\n\t        password\n\t      });\n\t    },\n\t    logout() {\n\t      this.state = null;\n\t      return request(\"post\", \"/account/logout\");\n\t    },\n\t    recover(data) {\n\t      return request(\"post\", \"/account/recover\", data);\n\t    },\n\t    listAddresses(query) {\n\t      return request(\"get\", \"/account/addresses\", query);\n\t    },\n\t    createAddress(data) {\n\t      return request(\"post\", \"/account/addresses\", data);\n\t    },\n\t    updateAddress(id, data) {\n\t      return request(\"put\", `/account/addresses/${id}`, data);\n\t    },\n\t    deleteAddress(id) {\n\t      return request(\"delete\", `/account/addresses/${id}`);\n\t    },\n\t    listCards(query) {\n\t      return request(\"get\", \"/account/cards\", query);\n\t    },\n\t    createCard(data) {\n\t      return request(\"post\", \"/account/cards\", data);\n\t    },\n\t    updateCard(id, data) {\n\t      return request(\"put\", `/account/cards/${id}`, data);\n\t    },\n\t    deleteCard(id) {\n\t      return request(\"delete\", `/account/cards/${id}`);\n\t    },\n\t    listOrders(query) {\n\t      return request(\"get\", `/account/orders`, query);\n\t    },\n\t    getOrder(id) {\n\t      return request(\"get\", `/account/orders/${id}`);\n\t    },\n\t    getAddresses(query) {\n\t      return request(\"get\", \"/account/addresses\", query);\n\t    },\n\t    getCards(query) {\n\t      return request(\"get\", \"/account/cards\", query);\n\t    },\n\t    getOrders(query) {\n\t      return request(\"get\", `/account/orders`, query);\n\t    }\n\t  };\n\t}\n\n\tfunction methods$6(request) {\n\t  const { get, list } = defaultMethods(request, \"/categories\", [\"list\", \"get\"]);\n\t  return {\n\t    get: (id, ...args) => {\n\t      return cacheApi.getFetch(\"categories\", id, () => get(id, ...args));\n\t    },\n\t    list\n\t  };\n\t}\n\n\tfunction methods$5(request) {\n\t  const { get, list } = defaultMethods(request, \"/subscriptions\", [\n\t    \"list\",\n\t    \"get\"\n\t  ]);\n\t  return {\n\t    get: (id, ...args) => {\n\t      return cacheApi.getFetch(\"subscriptions\", id, () => get(id, ...args));\n\t    },\n\t    list,\n\t    getCleanData(data) {\n\t      if (data && data.options) {\n\t        data.options = cleanProductOptions(data.options);\n\t      }\n\t      if (data.items && data.items.map) {\n\t        data.items = data.items.map((item) => {\n\t          if (item.options) {\n\t            item.options = cleanProductOptions(item.options);\n\t          }\n\t          return item;\n\t        });\n\t      }\n\t      return data;\n\t    },\n\t    create(data) {\n\t      return request(\"post\", \"/subscriptions\", this.getCleanData(data));\n\t    },\n\t    update(id, data) {\n\t      return request(\"put\", `/subscriptions/${id}`, this.getCleanData(data));\n\t    },\n\t    addItem(id, item) {\n\t      return request(\n\t        \"post\",\n\t        `/subscriptions/${id}/items`,\n\t        this.getCleanData(item)\n\t      );\n\t    },\n\t    setItems(id, items) {\n\t      if (items && items.map) {\n\t        items = items.map(this.getCleanData);\n\t      }\n\t      return request(\"put\", `/subscriptions/${id}/items`, items);\n\t    },\n\t    updateItem(id, itemId, item) {\n\t      return request(\n\t        \"put\",\n\t        `/subscriptions/${id}/items/${itemId}`,\n\t        this.getCleanData(item)\n\t      );\n\t    },\n\t    removeItem(id, itemId) {\n\t      return request(\"delete\", `/subscriptions/${id}/items/${itemId}`);\n\t    }\n\t  };\n\t}\n\n\tvar __defProp$5 = Object.defineProperty;\n\tvar __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp$5 = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum$5 = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues$5 = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp$5.call(b, prop))\n\t      __defNormalProp$5(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols$5)\n\t    for (var prop of __getOwnPropSymbols$5(b)) {\n\t      if (__propIsEnum$5.call(b, prop))\n\t        __defNormalProp$5(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tfunction methods$4(request, opt) {\n\t  return {\n\t    get: (type, id, query) => {\n\t      return cacheApi.getFetch(\n\t        `content_${type}`,\n\t        id,\n\t        () => request(\"get\", `/content/${type}`, id, __spreadValues$5({\n\t          $preview: opt.previewContent\n\t        }, query || {}))\n\t      );\n\t    },\n\t    list: (type, query) => request(\"get\", `/content/${type}`, void 0, query)\n\t  };\n\t}\n\n\tvar __defProp$4 = Object.defineProperty;\n\tvar __defProps$2 = Object.defineProperties;\n\tvar __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;\n\tvar __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp$4 = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum$4 = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues$4 = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp$4.call(b, prop))\n\t      __defNormalProp$4(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols$4)\n\t    for (var prop of __getOwnPropSymbols$4(b)) {\n\t      if (__propIsEnum$4.call(b, prop))\n\t        __defNormalProp$4(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tvar __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));\n\tfunction methods$3(request, opt) {\n\t  return {\n\t    state: null,\n\t    menuState: null,\n\t    paymentState: null,\n\t    subscriptionState: null,\n\t    sessionState: null,\n\t    localizedState: {},\n\t    refresh() {\n\t      this.state = null;\n\t      this.menuState = null;\n\t      this.paymentState = null;\n\t      this.subscriptionState = null;\n\t      this.sessionState = null;\n\t      this.localizedState = {};\n\t      return this.get();\n\t    },\n\t    getState(uri, stateName, { id = void 0, def = void 0, refresh = false } = {}) {\n\t      if (!this[stateName] || refresh) {\n\t        this[stateName] = request(\"get\", uri);\n\t      }\n\t      if (this[stateName] && typeof this[stateName].then === \"function\") {\n\t        return this[stateName].then((state) => {\n\t          this[stateName] = state;\n\t          return this.getLocalizedState(stateName, id, def);\n\t        });\n\t      }\n\t      return this.getLocalizedState(stateName, id, def);\n\t    },\n\t    getLocalizedState(stateName, id, def) {\n\t      const locale = this.getCurrentLocale();\n\t      const ls = this.localizedState;\n\t      if (ls.code !== locale) {\n\t        ls.code = locale;\n\t        delete ls[locale];\n\t      }\n\t      if (!ls[locale]) {\n\t        ls[locale] = {};\n\t      }\n\t      if (!ls[locale][stateName]) {\n\t        ls[locale][stateName] = this.decodeLocale(this[stateName]);\n\t      }\n\t      return id ? get(ls[locale][stateName], id, def) : ls[locale][stateName];\n\t    },\n\t    findState(uri, stateName, { where = void 0, def = void 0 } = {}) {\n\t      const state = this.getState(uri, stateName);\n\t      if (state && typeof state.then === \"function\") {\n\t        return state.then((state2) => find(state2, where) || def);\n\t      }\n\t      return find(state, where) || def;\n\t    },\n\t    get(id = void 0, def = void 0) {\n\t      return this.getState(\"/settings\", \"state\", { id, def });\n\t    },\n\t    getCurrentLocale() {\n\t      return opt.api.locale.selected();\n\t    },\n\t    getStoreLocale() {\n\t      return get(this.state, \"store.locale\");\n\t    },\n\t    getStoreLocales() {\n\t      return get(this.state, \"store.locales\");\n\t    },\n\t    set({ model, path, value }) {\n\t      const locale = this.getCurrentLocale();\n\t      const stateName = model ? `${model.replace(/s$/, \"\")}State` : \"state\";\n\t      const { useCamelCase } = opt;\n\t      let mergeData = {};\n\t      if (path)\n\t        set(mergeData, path, value);\n\t      else\n\t        mergeData = value;\n\t      if (useCamelCase) {\n\t        mergeData = toCamel(mergeData);\n\t      }\n\t      this[stateName] = merge(this[stateName] || {}, mergeData);\n\t      if (this.localizedState[locale]) {\n\t        this.localizedState[locale][stateName] = this.decodeLocale(\n\t          this[stateName]\n\t        );\n\t      }\n\t    },\n\t    menus(id = void 0, def = void 0) {\n\t      return this.findState(\"/settings/menus\", \"menuState\", {\n\t        where: { id },\n\t        def\n\t      });\n\t    },\n\t    payments(id = void 0, def = void 0) {\n\t      return this.getState(\"/settings/payments\", \"paymentState\", { id, def });\n\t    },\n\t    subscriptions(id = void 0, def = void 0) {\n\t      return this.getState(\"/settings/subscriptions\", \"subscriptionState\", {\n\t        id,\n\t        def\n\t      });\n\t    },\n\t    session(id = void 0, def = void 0) {\n\t      return this.getState(\"/session\", \"sessionState\", { id, def });\n\t    },\n\t    decodeLocale(values) {\n\t      const locale = this.getCurrentLocale();\n\t      if (!values || typeof values !== \"object\") {\n\t        return values;\n\t      }\n\t      let configs = this.getStoreLocales();\n\t      if (configs) {\n\t        configs = configs.reduce(\n\t          (acc, config) => __spreadProps$2(__spreadValues$4({}, acc), {\n\t            [config.code]: config\n\t          }),\n\t          {}\n\t        );\n\t      } else {\n\t        configs = {};\n\t      }\n\t      return decodeLocaleObjects(cloneDeep(values), locale, configs, opt);\n\t    },\n\t    async load() {\n\t      try {\n\t        const { settings, menus, payments, subscriptions, session } = await request(\"get\", \"/settings/all\");\n\t        this.localizedState = {};\n\t        this.set({\n\t          value: settings\n\t        });\n\t        this.set({\n\t          model: \"menus\",\n\t          value: menus\n\t        });\n\t        this.set({\n\t          model: \"payments\",\n\t          value: payments\n\t        });\n\t        this.set({\n\t          model: \"subscriptions\",\n\t          value: subscriptions\n\t        });\n\t        this.set({\n\t          model: \"session\",\n\t          value: session\n\t        });\n\t      } catch (err) {\n\t        console.error(`Swell: unable to loading settings (${err})`);\n\t      }\n\t    }\n\t  };\n\t}\n\tfunction decodeLocaleObjects(values, locale, configs, opt) {\n\t  if (isObject(values)) {\n\t    const keys = Object.keys(values);\n\t    for (let key of keys) {\n\t      if (key === \"$locale\") {\n\t        decodeLocaleValue(locale, values, key, configs, opt);\n\t        delete values.$locale;\n\t      }\n\t      if (values[key] !== void 0) {\n\t        values[key] = decodeLocaleObjects(values[key], locale, configs, opt);\n\t      }\n\t    }\n\t  } else if (values instanceof Array) {\n\t    for (var i = 0; i < values.length; i++) {\n\t      values[i] = decodeLocaleObjects(values[i], locale, configs, opt);\n\t    }\n\t  }\n\t  return values;\n\t}\n\tfunction decodeLocaleValue(locale, values, key, configs, opt) {\n\t  if (!locale || !isObject(values[key])) {\n\t    return;\n\t  }\n\t  let returnLocaleKey;\n\t  let returnLocaleConfig;\n\t  const localeKeys = Object.keys(values[key]);\n\t  for (let localeKey of localeKeys) {\n\t    const shortKey = localeKey.replace(/\\-.+$/, \"\");\n\t    const transformedLocale = opt.useCamelCase ? camelCase(locale) : locale;\n\t    if (localeKey === locale || localeKey === transformedLocale || shortKey === transformedLocale) {\n\t      returnLocaleKey = locale;\n\t      returnLocaleConfig = configs[locale];\n\t    }\n\t  }\n\t  if (!returnLocaleKey && isObject(configs)) {\n\t    const localeKeys2 = Object.keys(configs);\n\t    for (let localeKey of localeKeys2) {\n\t      const shortKey = localeKey.replace(/\\-.+$/, \"\");\n\t      if (localeKey === locale || shortKey === locale) {\n\t        returnLocaleKey = localeKey;\n\t        returnLocaleConfig = configs[localeKey];\n\t      }\n\t    }\n\t  }\n\t  let fallbackKeys;\n\t  let fallbackValues = {};\n\t  if (returnLocaleConfig) {\n\t    let fallbackKey = returnLocaleConfig.fallback;\n\t    const origFallbackKey = fallbackKey;\n\t    while (fallbackKey) {\n\t      fallbackKeys = fallbackKeys || [];\n\t      fallbackKeys.push(fallbackKey);\n\t      fallbackValues = __spreadValues$4(__spreadValues$4({}, values[key][fallbackKey] || {}), fallbackValues);\n\t      fallbackKey = configs[fallbackKey] && configs[fallbackKey].fallback;\n\t      if (origFallbackKey === fallbackKey) {\n\t        break;\n\t      }\n\t    }\n\t  }\n\t  let localeValues = __spreadValues$4(__spreadValues$4({}, fallbackValues), values[key][returnLocaleKey] || {});\n\t  const valueKeys = Object.keys(localeValues);\n\t  for (let valueKey of valueKeys) {\n\t    const hasValue = localeValues[valueKey] !== null && localeValues[valueKey] !== \"\";\n\t    let shouldFallback = fallbackKeys && !hasValue;\n\t    if (shouldFallback) {\n\t      for (let fallbackKey of fallbackKeys) {\n\t        shouldFallback = !values[key][fallbackKey] || values[key][fallbackKey][valueKey] === null || values[key][fallbackKey][valueKey] === \"\";\n\t        if (shouldFallback) {\n\t          if (fallbackKey === \"none\") {\n\t            values[valueKey] = null;\n\t            break;\n\t          }\n\t          continue;\n\t        } else {\n\t          values[valueKey] = values[key][fallbackKey][valueKey];\n\t          break;\n\t        }\n\t      }\n\t    } else {\n\t      if (hasValue) {\n\t        values[valueKey] = localeValues[valueKey];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/**\n\t * Converts `string`, as a whole, to lower case just like\n\t * [String#toLowerCase](https://mdn.io/toLowerCase).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category String\n\t * @param {string} [string=''] The string to convert.\n\t * @returns {string} Returns the lower cased string.\n\t * @example\n\t *\n\t * _.toLower('--Foo-Bar--');\n\t * // => '--foo-bar--'\n\t *\n\t * _.toLower('fooBar');\n\t * // => 'foobar'\n\t *\n\t * _.toLower('__FOO_BAR__');\n\t * // => '__foo_bar__'\n\t */\n\tfunction toLower(value) {\n\t  return toString(value).toLowerCase();\n\t}\n\n\t/**\n\t * A specialized version of `_.reduce` for arrays without support for\n\t * iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Array} [array] The array to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @param {*} [accumulator] The initial value.\n\t * @param {boolean} [initAccum] Specify using the first element of `array` as\n\t *  the initial value.\n\t * @returns {*} Returns the accumulated value.\n\t */\n\tfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n\t  var index = -1,\n\t      length = array == null ? 0 : array.length;\n\n\t  if (initAccum && length) {\n\t    accumulator = array[++index];\n\t  }\n\t  while (++index < length) {\n\t    accumulator = iteratee(accumulator, array[index], index, array);\n\t  }\n\t  return accumulator;\n\t}\n\n\t/**\n\t * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n\t *\n\t * @private\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {Function} Returns the new base function.\n\t */\n\tfunction createBaseFor(fromRight) {\n\t  return function(object, iteratee, keysFunc) {\n\t    var index = -1,\n\t        iterable = Object(object),\n\t        props = keysFunc(object),\n\t        length = props.length;\n\n\t    while (length--) {\n\t      var key = props[fromRight ? length : ++index];\n\t      if (iteratee(iterable[key], key, iterable) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return object;\n\t  };\n\t}\n\n\t/**\n\t * The base implementation of `baseForOwn` which iterates over `object`\n\t * properties returned by `keysFunc` and invokes `iteratee` for each property.\n\t * Iteratee functions may exit iteration early by explicitly returning `false`.\n\t *\n\t * @private\n\t * @param {Object} object The object to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @param {Function} keysFunc The function to get the keys of `object`.\n\t * @returns {Object} Returns `object`.\n\t */\n\tvar baseFor = createBaseFor();\n\n\t/**\n\t * The base implementation of `_.forOwn` without support for iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Object} object The object to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseForOwn(object, iteratee) {\n\t  return object && baseFor(object, iteratee, keys);\n\t}\n\n\t/**\n\t * Creates a `baseEach` or `baseEachRight` function.\n\t *\n\t * @private\n\t * @param {Function} eachFunc The function to iterate over a collection.\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {Function} Returns the new base function.\n\t */\n\tfunction createBaseEach(eachFunc, fromRight) {\n\t  return function(collection, iteratee) {\n\t    if (collection == null) {\n\t      return collection;\n\t    }\n\t    if (!isArrayLike(collection)) {\n\t      return eachFunc(collection, iteratee);\n\t    }\n\t    var length = collection.length,\n\t        index = fromRight ? length : -1,\n\t        iterable = Object(collection);\n\n\t    while ((fromRight ? index-- : ++index < length)) {\n\t      if (iteratee(iterable[index], index, iterable) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return collection;\n\t  };\n\t}\n\n\t/**\n\t * The base implementation of `_.forEach` without support for iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Array|Object} collection The collection to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array|Object} Returns `collection`.\n\t */\n\tvar baseEach = createBaseEach(baseForOwn);\n\n\t/**\n\t * The base implementation of `_.reduce` and `_.reduceRight`, without support\n\t * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n\t *\n\t * @private\n\t * @param {Array|Object} collection The collection to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @param {*} accumulator The initial value.\n\t * @param {boolean} initAccum Specify using the first or last element of\n\t *  `collection` as the initial value.\n\t * @param {Function} eachFunc The function to iterate over `collection`.\n\t * @returns {*} Returns the accumulated value.\n\t */\n\tfunction baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n\t  eachFunc(collection, function(value, index, collection) {\n\t    accumulator = initAccum\n\t      ? (initAccum = false, value)\n\t      : iteratee(accumulator, value, index, collection);\n\t  });\n\t  return accumulator;\n\t}\n\n\t/**\n\t * Reduces `collection` to a value which is the accumulated result of running\n\t * each element in `collection` thru `iteratee`, where each successive\n\t * invocation is supplied the return value of the previous. If `accumulator`\n\t * is not given, the first element of `collection` is used as the initial\n\t * value. The iteratee is invoked with four arguments:\n\t * (accumulator, value, index|key, collection).\n\t *\n\t * Many lodash methods are guarded to work as iteratees for methods like\n\t * `_.reduce`, `_.reduceRight`, and `_.transform`.\n\t *\n\t * The guarded methods are:\n\t * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n\t * and `sortBy`\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Collection\n\t * @param {Array|Object} collection The collection to iterate over.\n\t * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n\t * @param {*} [accumulator] The initial value.\n\t * @returns {*} Returns the accumulated value.\n\t * @see _.reduceRight\n\t * @example\n\t *\n\t * _.reduce([1, 2], function(sum, n) {\n\t *   return sum + n;\n\t * }, 0);\n\t * // => 3\n\t *\n\t * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n\t *   (result[value] || (result[value] = [])).push(key);\n\t *   return result;\n\t * }, {});\n\t * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n\t */\n\tfunction reduce(collection, iteratee, accumulator) {\n\t  var func = isArray(collection) ? arrayReduce : baseReduce,\n\t      initAccum = arguments.length < 3;\n\n\t  return func(collection, baseIteratee(iteratee), accumulator, initAccum, baseEach);\n\t}\n\n\t/** `Object#toString` result references. */\n\tvar mapTag = '[object Map]',\n\t    setTag = '[object Set]';\n\n\t/** Used for built-in method references. */\n\tvar objectProto = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\n\t/**\n\t * Checks if `value` is an empty object, collection, map, or set.\n\t *\n\t * Objects are considered empty if they have no own enumerable string keyed\n\t * properties.\n\t *\n\t * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n\t * jQuery-like collections are considered empty if they have a `length` of `0`.\n\t * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n\t * @example\n\t *\n\t * _.isEmpty(null);\n\t * // => true\n\t *\n\t * _.isEmpty(true);\n\t * // => true\n\t *\n\t * _.isEmpty(1);\n\t * // => true\n\t *\n\t * _.isEmpty([1, 2, 3]);\n\t * // => false\n\t *\n\t * _.isEmpty({ 'a': 1 });\n\t * // => false\n\t */\n\tfunction isEmpty(value) {\n\t  if (value == null) {\n\t    return true;\n\t  }\n\t  if (isArrayLike(value) &&\n\t      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n\t        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n\t    return !value.length;\n\t  }\n\t  var tag = getTag$1(value);\n\t  if (tag == mapTag || tag == setTag) {\n\t    return !value.size;\n\t  }\n\t  if (isPrototype(value)) {\n\t    return !baseKeys(value).length;\n\t  }\n\t  for (var key in value) {\n\t    if (hasOwnProperty.call(value, key)) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\n\t/**\n\t * The base implementation of `_.map` without support for iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Array|Object} collection The collection to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array} Returns the new mapped array.\n\t */\n\tfunction baseMap(collection, iteratee) {\n\t  var index = -1,\n\t      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n\t  baseEach(collection, function(value, key, collection) {\n\t    result[++index] = iteratee(value, key, collection);\n\t  });\n\t  return result;\n\t}\n\n\t/**\n\t * Creates an array of values by running each element in `collection` thru\n\t * `iteratee`. The iteratee is invoked with three arguments:\n\t * (value, index|key, collection).\n\t *\n\t * Many lodash methods are guarded to work as iteratees for methods like\n\t * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n\t *\n\t * The guarded methods are:\n\t * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n\t * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n\t * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n\t * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Collection\n\t * @param {Array|Object} collection The collection to iterate over.\n\t * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n\t * @returns {Array} Returns the new mapped array.\n\t * @example\n\t *\n\t * function square(n) {\n\t *   return n * n;\n\t * }\n\t *\n\t * _.map([4, 8], square);\n\t * // => [16, 64]\n\t *\n\t * _.map({ 'a': 4, 'b': 8 }, square);\n\t * // => [16, 64] (iteration order is not guaranteed)\n\t *\n\t * var users = [\n\t *   { 'user': 'barney' },\n\t *   { 'user': 'fred' }\n\t * ];\n\t *\n\t * // The `_.property` iteratee shorthand.\n\t * _.map(users, 'user');\n\t * // => ['barney', 'fred']\n\t */\n\tfunction map(collection, iteratee) {\n\t  var func = isArray(collection) ? arrayMap : baseMap;\n\t  return func(collection, baseIteratee(iteratee));\n\t}\n\n\tvar __defProp$3 = Object.defineProperty;\n\tvar __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp$3 = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum$3 = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues$3 = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp$3.call(b, prop))\n\t      __defNormalProp$3(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols$3)\n\t    for (var prop of __getOwnPropSymbols$3(b)) {\n\t      if (__propIsEnum$3.call(b, prop))\n\t        __defNormalProp$3(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tconst addressFieldsMap$1 = {\n\t  city: \"city\",\n\t  country: \"country\",\n\t  line1: \"address1\",\n\t  line2: \"address2\",\n\t  postal_code: \"zip\",\n\t  state: \"state\"\n\t};\n\tconst billingFieldsMap = {\n\t  name: \"name\",\n\t  phone: \"phone\"\n\t};\n\tfunction mapValues(fieldsMap, data) {\n\t  const result = {};\n\t  for (const [destinationKey, sourceKey] of Object.entries(fieldsMap)) {\n\t    const value = data[sourceKey];\n\t    if (value) {\n\t      result[destinationKey] = value;\n\t    }\n\t  }\n\t  return result;\n\t}\n\tfunction getBillingDetails(cart) {\n\t  const details = __spreadValues$3({}, mapValues(billingFieldsMap, cart.billing));\n\t  if (cart.account && cart.account.email) {\n\t    details.email = cart.account.email;\n\t  }\n\t  const address = mapValues(addressFieldsMap$1, cart.billing);\n\t  if (!isEmpty(address)) {\n\t    details.address = address;\n\t  }\n\t  return details;\n\t}\n\tfunction getKlarnaItems(cart) {\n\t  const currency = toLower(get(cart, \"currency\", \"eur\"));\n\t  const items = map(cart.items, (item) => ({\n\t    type: \"sku\",\n\t    description: item.product.name,\n\t    quantity: item.quantity,\n\t    currency,\n\t    amount: Math.round(toNumber(item.price_total - item.discount_total) * 100)\n\t  }));\n\t  const tax = get(cart, \"tax_included_total\");\n\t  if (tax) {\n\t    items.push({\n\t      type: \"tax\",\n\t      description: \"Taxes\",\n\t      currency,\n\t      amount: Math.round(toNumber(tax) * 100)\n\t    });\n\t  }\n\t  const shipping = get(cart, \"shipping\", {});\n\t  const shippingTotal = get(cart, \"shipment_total\", {});\n\t  if (shipping.price) {\n\t    items.push({\n\t      type: \"shipping\",\n\t      description: shipping.service_name,\n\t      currency,\n\t      amount: Math.round(toNumber(shippingTotal) * 100)\n\t    });\n\t  }\n\t  return items;\n\t}\n\tfunction setKlarnaBillingShipping(source, data) {\n\t  const shippingNameFieldsMap = {\n\t    shipping_first_name: \"first_name\",\n\t    shipping_last_name: \"last_name\"\n\t  };\n\t  const shippingFieldsMap = {\n\t    phone: \"phone\"\n\t  };\n\t  const billingNameFieldsMap = {\n\t    first_name: \"first_name\",\n\t    last_name: \"last_name\"\n\t  };\n\t  const billingFieldsMap2 = {\n\t    email: \"email\"\n\t  };\n\t  const fillValues = (fieldsMap, data2) => reduce(\n\t    fieldsMap,\n\t    (acc, srcKey, destKey) => {\n\t      const value = data2[srcKey];\n\t      if (value) {\n\t        acc[destKey] = value;\n\t      }\n\t      return acc;\n\t    },\n\t    {}\n\t  );\n\t  source.klarna = __spreadValues$3(__spreadValues$3({}, source.klarna), fillValues(shippingNameFieldsMap, data.shipping));\n\t  const shipping = fillValues(shippingFieldsMap, data.shipping);\n\t  const shippingAddress = fillValues(addressFieldsMap$1, data.shipping);\n\t  if (shipping || shippingAddress) {\n\t    source.source_order.shipping = __spreadValues$3(__spreadValues$3({}, shipping ? shipping : {}), shippingAddress ? { address: shippingAddress } : {});\n\t  }\n\t  source.klarna = __spreadValues$3(__spreadValues$3({}, source.klarna), fillValues(\n\t    billingNameFieldsMap,\n\t    data.billing || get(data, \"account.billing\") || data.shipping\n\t  ));\n\t  const billing = fillValues(billingFieldsMap2, data.account);\n\t  const billingAddress = fillValues(\n\t    addressFieldsMap$1,\n\t    data.billing || get(data, \"account.billing\") || data.shipping\n\t  );\n\t  if (billing || billingAddress) {\n\t    source.owner = __spreadValues$3(__spreadValues$3({}, billing ? billing : {}), billingAddress ? { address: billingAddress } : {});\n\t  }\n\t}\n\tfunction setBancontactOwner(source, data) {\n\t  const fillValues = (fieldsMap, data2) => reduce(\n\t    fieldsMap,\n\t    (acc, srcKey, destKey) => {\n\t      const value = data2[srcKey];\n\t      if (value) {\n\t        acc[destKey] = value;\n\t      }\n\t      return acc;\n\t    },\n\t    {}\n\t  );\n\t  const { account = {}, billing, shipping } = data;\n\t  const billingData = __spreadValues$3(__spreadValues$3(__spreadValues$3(__spreadValues$3({}, account.shipping), account.billing), shipping), billing);\n\t  const billingAddress = fillValues(addressFieldsMap$1, billingData);\n\t  source.owner = __spreadValues$3(__spreadValues$3({\n\t    email: account.email,\n\t    name: billingData.name || account.name\n\t  }, billingData.phone ? { phone: billingData.phone } : account.phone ? { phone: account.phone } : {}), !isEmpty(billingAddress) ? { address: billingAddress } : {});\n\t}\n\tasync function createPaymentMethod(stripe, cardElement, authorize, cart) {\n\t  const billingDetails = getBillingDetails(cart);\n\t  const { paymentMethod, error: paymentMethodError } = await stripe.createPaymentMethod(__spreadValues$3({\n\t    type: \"card\",\n\t    card: cardElement\n\t  }, !isEmpty(billingDetails) ? { billing_details: billingDetails } : {}));\n\t  if (paymentMethodError) {\n\t    return { error: paymentMethodError };\n\t  }\n\t  const customer = cart.account && cart.account.stripe_customer;\n\t  const authorization = await authorize({\n\t    gateway: \"stripe\",\n\t    params: __spreadValues$3({\n\t      usage: \"off_session\",\n\t      payment_method: paymentMethod.id\n\t    }, customer ? { customer } : {})\n\t  });\n\t  if (!authorization) {\n\t    return;\n\t  }\n\t  const { error: setupIntentError } = await stripe.confirmCardSetup(\n\t    authorization.client_secret\n\t  );\n\t  return setupIntentError ? { error: setupIntentError } : authorization.card;\n\t}\n\tasync function createIDealPaymentMethod(stripe, element, cart) {\n\t  const billingDetails = getBillingDetails(cart);\n\t  return await stripe.createPaymentMethod(__spreadValues$3({\n\t    type: \"ideal\",\n\t    ideal: element\n\t  }, billingDetails ? { billing_details: billingDetails } : {}));\n\t}\n\tasync function createKlarnaSource(stripe, cart) {\n\t  const sourceObject = {\n\t    type: \"klarna\",\n\t    flow: \"redirect\",\n\t    amount: Math.round(get(cart, \"grand_total\", 0) * 100),\n\t    currency: toLower(get(cart, \"currency\", \"eur\")),\n\t    klarna: {\n\t      product: \"payment\",\n\t      purchase_country: get(cart, \"settings.country\", \"DE\")\n\t    },\n\t    source_order: {\n\t      items: getKlarnaItems(cart)\n\t    },\n\t    redirect: {\n\t      return_url: window.location.href\n\t    }\n\t  };\n\t  setKlarnaBillingShipping(sourceObject, cart);\n\t  return await stripe.createSource(sourceObject);\n\t}\n\tasync function createBancontactSource(stripe, cart) {\n\t  const sourceObject = {\n\t    type: \"bancontact\",\n\t    amount: Math.round(get(cart, \"grand_total\", 0) * 100),\n\t    currency: toLower(get(cart, \"currency\", \"eur\")),\n\t    redirect: {\n\t      return_url: window.location.href\n\t    }\n\t  };\n\t  setBancontactOwner(sourceObject, cart);\n\t  return await stripe.createSource(sourceObject);\n\t}\n\tfunction stripeAmountByCurrency(currency, amount) {\n\t  const zeroDecimalCurrencies = [\n\t    \"BIF\",\n\t    \"DJF\",\n\t    \"JPY\",\n\t    \"KRW\",\n\t    \"PYG\",\n\t    \"VND\",\n\t    \"XAF\",\n\t    \"XPF\",\n\t    \"CLP\",\n\t    \"GNF\",\n\t    \"KMF\",\n\t    \"MGA\",\n\t    \"RWF\",\n\t    \"VUV\",\n\t    \"XOF\"\n\t  ];\n\t  if (zeroDecimalCurrencies.includes(currency.toUpperCase())) {\n\t    return amount;\n\t  } else {\n\t    return Math.round(amount * 100);\n\t  }\n\t}\n\n\tfunction generateOrderId() {\n\t  return Math.random().toString(36).substr(2, 9);\n\t}\n\tasync function createQuickpayCard(authorize) {\n\t  const returnUrl = window.location.origin + window.location.pathname;\n\t  const authorization = await authorize({\n\t    gateway: \"quickpay\",\n\t    params: {\n\t      action: \"create\",\n\t      continueurl: `${returnUrl}?gateway=quickpay&redirect_status=succeeded`,\n\t      cancelurl: `${returnUrl}?gateway=quickpay&redirect_status=canceled`\n\t    }\n\t  });\n\t  if (authorization && authorization.url) {\n\t    window.location.replace(authorization.url);\n\t  }\n\t}\n\tasync function getQuickpayCardDetais(id, authorize) {\n\t  return await authorize({\n\t    gateway: \"quickpay\",\n\t    params: { action: \"get\", id }\n\t  });\n\t}\n\tasync function createQuickpayPayment(cart, createIntent) {\n\t  return await createIntent({\n\t    gateway: \"quickpay\",\n\t    intent: {\n\t      currency: get(cart, \"currency\", \"USD\"),\n\t      order_id: generateOrderId()\n\t    }\n\t  });\n\t}\n\n\tasync function createPaysafecardPayment(cart, createIntent) {\n\t  const returnUrl = window.location.origin + window.location.pathname;\n\t  const url = `${returnUrl}?gateway=paysafecard`;\n\t  return await createIntent({\n\t    gateway: \"paysafecard\",\n\t    intent: {\n\t      type: \"PAYSAFECARD\",\n\t      amount: cart.grand_total,\n\t      redirect: {\n\t        success_url: url,\n\t        failure_url: url\n\t      },\n\t      notification_url: url,\n\t      customer: {\n\t        id: get(cart, \"account.id\")\n\t      },\n\t      currency: get(cart, \"currency\", \"USD\")\n\t    }\n\t  });\n\t}\n\n\tvar __defProp$2 = Object.defineProperty;\n\tvar __defProps$1 = Object.defineProperties;\n\tvar __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;\n\tvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues$2 = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp$2.call(b, prop))\n\t      __defNormalProp$2(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols$2)\n\t    for (var prop of __getOwnPropSymbols$2(b)) {\n\t      if (__propIsEnum$2.call(b, prop))\n\t        __defNormalProp$2(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tvar __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));\n\tconst addressFieldsMap = {\n\t  given_name: \"first_name\",\n\t  family_name: \"last_name\",\n\t  city: \"city\",\n\t  country: \"country\",\n\t  phone: \"phone\",\n\t  postal_code: \"zip\",\n\t  street_address: \"address1\",\n\t  street_address2: \"address2\",\n\t  region: \"state\"\n\t};\n\tconst mapFields = (fieldsMap, data) => reduce(\n\t  fieldsMap,\n\t  (acc, srcKey, destKey) => {\n\t    const value = data[srcKey];\n\t    if (value) {\n\t      acc[destKey] = value;\n\t    }\n\t    return acc;\n\t  },\n\t  {}\n\t);\n\tconst mapAddressFields = (cart, addressField) => __spreadProps$1(__spreadValues$2({}, mapFields(addressFieldsMap, cart[addressField])), {\n\t  email: get(cart, \"account.email\")\n\t});\n\tfunction getOrderLines(cart) {\n\t  const items = map(cart.items, (item) => ({\n\t    type: \"physical\",\n\t    name: get(item, \"product.name\"),\n\t    reference: get(item, \"product.sku\") || get(item, \"product.slug\"),\n\t    quantity: item.quantity,\n\t    unit_price: Math.round(toNumber(item.price - item.discount_each) * 100),\n\t    total_amount: Math.round(\n\t      toNumber(item.price_total - item.discount_total) * 100\n\t    ),\n\t    tax_rate: 0,\n\t    total_tax_amount: 0\n\t  }));\n\t  const tax = get(cart, \"tax_included_total\");\n\t  const taxAmount = toNumber(tax) * 100;\n\t  if (tax) {\n\t    items.push({\n\t      type: \"sales_tax\",\n\t      name: \"Taxes\",\n\t      quantity: 1,\n\t      unit_price: taxAmount,\n\t      total_amount: taxAmount,\n\t      tax_rate: 0,\n\t      total_tax_amount: 0\n\t    });\n\t  }\n\t  const shipping = get(cart, \"shipping\", {});\n\t  const shippingTotal = get(cart, \"shipment_total\", {});\n\t  const shippingAmount = toNumber(shippingTotal) * 100;\n\t  if (shipping.price) {\n\t    items.push({\n\t      type: \"shipping_fee\",\n\t      name: shipping.service_name,\n\t      quantity: 1,\n\t      unit_price: shippingAmount,\n\t      total_amount: shippingAmount,\n\t      tax_rate: 0,\n\t      total_tax_amount: 0\n\t    });\n\t  }\n\t  return items;\n\t}\n\tasync function createKlarnaSession(cart, createIntent) {\n\t  const returnUrl = `${window.location.origin}${window.location.pathname}?gateway=klarna_direct&sid={{session_id}}`;\n\t  const successUrl = `${returnUrl}&authorization_token={{authorization_token}}`;\n\t  return createIntent({\n\t    gateway: \"klarna\",\n\t    intent: {\n\t      locale: cart.display_locale || get(cart, \"settings.locale\") || \"en-US\",\n\t      purchase_country: get(cart, \"billing.country\") || get(cart, \"shipping.country\"),\n\t      purchase_currency: cart.currency,\n\t      billing_address: mapAddressFields(cart, \"billing\"),\n\t      shipping_address: mapAddressFields(cart, \"shipping\"),\n\t      order_amount: Math.round(get(cart, \"grand_total\", 0) * 100),\n\t      order_lines: JSON.stringify(getOrderLines(cart)),\n\t      merchant_urls: {\n\t        success: successUrl,\n\t        back: returnUrl,\n\t        cancel: returnUrl,\n\t        error: returnUrl,\n\t        failure: returnUrl\n\t      }\n\t    }\n\t  });\n\t}\n\n\tvar __defProp$1 = Object.defineProperty;\n\tvar __defProps = Object.defineProperties;\n\tvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\n\tvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues$1 = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp$1.call(b, prop))\n\t      __defNormalProp$1(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols$1)\n\t    for (var prop of __getOwnPropSymbols$1(b)) {\n\t      if (__propIsEnum$1.call(b, prop))\n\t        __defNormalProp$1(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\tconst LOADING_SCRIPTS = {};\n\tconst CARD_ELEMENTS = {};\n\tconst API = {};\n\tlet options$1 = null;\n\tfunction methods$2(request, opts) {\n\t  options$1 = opts || options$1;\n\t  return {\n\t    params: null,\n\t    methodSettings: null,\n\t    get(id) {\n\t      return request(\"get\", \"/payments\", id);\n\t    },\n\t    async methods() {\n\t      if (this.methodSettings) {\n\t        return this.methodSettings;\n\t      }\n\t      const result = await request(\"get\", \"/payment/methods\");\n\t      return this.methodSettings = result;\n\t    },\n\t    async createElements(elementParams) {\n\t      this.params = elementParams || {};\n\t      const cart = toSnake(await methods$8(request, options$1).get());\n\t      if (!cart) {\n\t        throw new Error(\"Cart not found\");\n\t      }\n\t      const payMethods = toSnake(\n\t        await methods$3(request, options$1).payments()\n\t      );\n\t      if (payMethods.error) {\n\t        throw new Error(payMethods.error);\n\t      }\n\t      await render(request, cart, payMethods, this.params);\n\t    },\n\t    async tokenize(params) {\n\t      const cart = toSnake(await methods$8(request, options$1).get());\n\t      if (!cart) {\n\t        throw new Error(\"Cart not found\");\n\t      }\n\t      const payMethods = toSnake(\n\t        await methods$3(request, options$1).payments()\n\t      );\n\t      if (payMethods.error) {\n\t        throw new Error(payMethods.error);\n\t      }\n\t      return await paymentTokenize(\n\t        request,\n\t        params || this.params,\n\t        payMethods,\n\t        cart\n\t      );\n\t    },\n\t    async handleRedirect(params) {\n\t      const cart = toSnake(await methods$8(request, options$1).get());\n\t      if (!cart) {\n\t        throw new Error(\"Cart not found\");\n\t      }\n\t      return await handleRedirect(request, params || this.params, cart);\n\t    },\n\t    async authenticate(id) {\n\t      const payment = await this.get(id);\n\t      if (!payment) {\n\t        throw new Error(\"Payment not found\");\n\t      }\n\t      const payMethods = toSnake(\n\t        await methods$3(request, options$1).payments()\n\t      );\n\t      if (payMethods.error) {\n\t        throw new Error(payMethods.error);\n\t      }\n\t      return await authenticate(request, payment, payMethods);\n\t    },\n\t    async createIntent(data) {\n\t      const intent = await vaultRequest(\"post\", \"/intent\", data);\n\t      if (intent.errors) {\n\t        const param = Object.keys(intent.errors)[0];\n\t        const err = new Error(intent.errors[param].message || \"Unknown error\");\n\t        err.code = \"vault_error\";\n\t        err.status = 402;\n\t        err.param = param;\n\t        throw err;\n\t      }\n\t      return intent;\n\t    },\n\t    async updateIntent(data) {\n\t      const intent = await vaultRequest(\"put\", \"/intent\", data);\n\t      if (intent.errors) {\n\t        const param = Object.keys(intent.errors)[0];\n\t        const err = new Error(intent.errors[param].message || \"Unknown error\");\n\t        err.code = \"vault_error\";\n\t        err.status = 402;\n\t        err.param = param;\n\t        throw err;\n\t      }\n\t      return intent;\n\t    },\n\t    async authorizeGateway(data) {\n\t      const authorization = await vaultRequest(\"post\", \"/authorization\", data);\n\t      if (authorization.errors) {\n\t        const param = Object.keys(authorization.errors)[0];\n\t        const err = new Error(\n\t          authorization.errors[param].message || \"Unknown error\"\n\t        );\n\t        err.code = \"vault_error\";\n\t        err.status = 402;\n\t        err.param = param;\n\t        throw err;\n\t      }\n\t      return authorization;\n\t    }\n\t  };\n\t}\n\tasync function render(request, cart, payMethods, params) {\n\t  if (params.card) {\n\t    if (!payMethods.card) {\n\t      console.error(\n\t        `Payment element error: credit card payments are disabled. See Payment settings in the Swell dashboard for details.`\n\t      );\n\t    } else if (payMethods.card.gateway === \"braintree\") {\n\t      if (!window.braintree) {\n\t        await loadScript(\n\t          \"braintree-web\",\n\t          \"https://js.braintreegateway.com/web/3.57.0/js/client.min.js\"\n\t        );\n\t      }\n\t    } else if (payMethods.card.gateway === \"stripe\") {\n\t      if (!window.Stripe) {\n\t        await loadScript(\"stripe-js\", \"https://js.stripe.com/v3/\");\n\t      }\n\t      await stripeElements(request, payMethods, params);\n\t    }\n\t  }\n\t  if (params.ideal) {\n\t    if (!payMethods.card) {\n\t      console.error(\n\t        `Payment element error: credit card payments are disabled. See Payment settings in the Swell dashboard for details.`\n\t      );\n\t    } else if (!payMethods.ideal) {\n\t      console.error(\n\t        `Payment element error: iDEAL payments are disabled. See Payment settings in the Swell dashboard for details.`\n\t      );\n\t    } else if (payMethods.card.gateway === \"stripe\") {\n\t      if (!window.Stripe) {\n\t        await loadScript(\"stripe-js\", \"https://js.stripe.com/v3/\");\n\t      }\n\t      await stripeElements(request, payMethods, params);\n\t    }\n\t  }\n\t  if (params.paypal) {\n\t    if (!payMethods.paypal) {\n\t      console.error(\n\t        `Payment element error: PayPal payments are disabled. See Payment settings in the Swell dashboard for details.`\n\t      );\n\t    } else if (payMethods.card && payMethods.card.gateway === \"braintree\" && payMethods.paypal.gateway === \"braintree\") {\n\t      if (!window.paypal) {\n\t        await loadScript(\n\t          \"paypal-sdk\",\n\t          `https://www.paypal.com/sdk/js?currency=${cart.currency}&client-id=${payMethods.paypal.client_id}&merchant-id=${payMethods.paypal.merchant_id}&vault=true`\n\t        );\n\t      }\n\t      if (!window.braintree) {\n\t        await loadScript(\n\t          \"braintree-web\",\n\t          \"https://js.braintreegateway.com/web/3.57.0/js/client.min.js\"\n\t        );\n\t      }\n\t      if (window.braintree && !window.braintree.paypalCheckout) {\n\t        await loadScript(\n\t          \"braintree-web-paypal-checkout\",\n\t          \"https://js.braintreegateway.com/web/3.57.0/js/paypal-checkout.min.js\"\n\t        );\n\t      }\n\t      await braintreePayPalButton(request, cart, payMethods, params);\n\t    } else {\n\t      if (!window.paypal) {\n\t        await loadScript(\n\t          \"paypal-sdk\",\n\t          `https://www.paypal.com/sdk/js?currency=${cart.currency}&client-id=${payMethods.paypal.client_id}&merchant-id=${payMethods.paypal.merchant_id}&intent=authorize&commit=false`\n\t        );\n\t      }\n\t      await payPalButton(request, cart, payMethods, params);\n\t    }\n\t  }\n\t}\n\tconst loadScript = async (id, src) => {\n\t  LOADING_SCRIPTS[id] = LOADING_SCRIPTS[id] || new Promise((resolve) => {\n\t    const script = document.createElement(\"script\");\n\t    script.id = id;\n\t    script.src = src;\n\t    script.async = true;\n\t    script.type = \"text/javascript\";\n\t    script.addEventListener(\n\t      \"load\",\n\t      () => {\n\t        resolve();\n\t        LOADING_SCRIPTS[id] = null;\n\t      },\n\t      {\n\t        once: true\n\t      }\n\t    );\n\t    document.head.appendChild(script);\n\t  });\n\t  return LOADING_SCRIPTS[id];\n\t};\n\tasync function stripeElements(request, payMethods, params) {\n\t  const { publishable_key } = payMethods.card;\n\t  const stripe = window.Stripe(publishable_key);\n\t  const elements = stripe.elements(params.config);\n\t  const createElement = (type) => {\n\t    const elementParams = get(params, `card[${type}]`) || params.card || params.ideal;\n\t    const elementOptions = elementParams.options || {};\n\t    const element = elements.create(type, elementOptions);\n\t    element.mount(elementParams.elementId || `#${type}-element`);\n\t    elementParams.onChange && element.on(\"change\", elementParams.onChange);\n\t    elementParams.onReady && element.on(\"ready\", elementParams.onReady);\n\t    elementParams.onFocus && element.on(\"focus\", elementParams.onFocus);\n\t    elementParams.onBlur && element.on(\"blur\", elementParams.onBlur);\n\t    elementParams.onEscape && element.on(\"escape\", elementParams.onEscape);\n\t    elementParams.onClick && element.on(\"click\", elementParams.onClick);\n\t    if (type === \"card\" || type === \"cardNumber\" || type === \"idealBank\") {\n\t      CARD_ELEMENTS.stripe = element;\n\t    }\n\t  };\n\t  API.stripe = stripe;\n\t  if (params.ideal) {\n\t    createElement(\"idealBank\");\n\t  } else if (params.card.separateElements) {\n\t    createElement(\"cardNumber\");\n\t    createElement(\"cardExpiry\");\n\t    createElement(\"cardCvc\");\n\t  } else {\n\t    createElement(\"card\");\n\t  }\n\t}\n\tasync function shouldUsePayPalEmail(guest, request, options2) {\n\t  if (!guest)\n\t    return false;\n\t  const updatedCart = await methods$8(request, options2).get();\n\t  const currentEmail = get(updatedCart, \"account.email\");\n\t  if (!currentEmail) {\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\tasync function payPalButton(request, cart, payMethods, params) {\n\t  const paypal = window.paypal;\n\t  const { paypal: { locale, style, elementId } = {} } = params;\n\t  const { capture_total, currency, guest } = cart;\n\t  const onError = (error) => {\n\t    const errorHandler = get(params, \"paypal.onError\");\n\t    if (isFunction(errorHandler)) {\n\t      return errorHandler(error);\n\t    }\n\t    throw new Error(error.message);\n\t  };\n\t  const onSuccess = () => {\n\t    const successHandler = get(params, \"paypal.onSuccess\");\n\t    return isFunction(successHandler) && successHandler();\n\t  };\n\t  if (!(capture_total > 0)) {\n\t    throw new Error(\n\t      \"Invalid PayPal button amount. Value should be greater than zero.\"\n\t    );\n\t  }\n\t  paypal.Buttons(\n\t    {\n\t      locale: locale || \"en_US\",\n\t      style: style || {\n\t        layout: \"horizontal\",\n\t        height: 45,\n\t        color: \"gold\",\n\t        shape: \"rect\",\n\t        label: \"paypal\",\n\t        tagline: false\n\t      },\n\t      createOrder: (data, actions) => actions.order.create({\n\t        intent: \"AUTHORIZE\",\n\t        purchase_units: [\n\t          {\n\t            amount: {\n\t              value: +capture_total.toFixed(2),\n\t              currency_code: currency\n\t            }\n\t          }\n\t        ]\n\t      }),\n\t      onApprove: (data, actions) => actions.order.get().then(async (order) => {\n\t        const orderId = order.id;\n\t        const payer = order.payer;\n\t        const shipping = get(order, \"purchase_units[0].shipping\");\n\t        const usePayPalEmail = await shouldUsePayPalEmail(\n\t          guest,\n\t          request,\n\t          options$1\n\t        );\n\t        return methods$8(request).update(__spreadProps(__spreadValues$1({}, usePayPalEmail && {\n\t          account: {\n\t            email: payer.email_address\n\t          }\n\t        }), {\n\t          billing: {\n\t            method: \"paypal\",\n\t            paypal: { order_id: orderId }\n\t          },\n\t          shipping: {\n\t            name: shipping.name.full_name,\n\t            address1: shipping.address.address_line_1,\n\t            address2: shipping.address.address_line_2,\n\t            state: shipping.address.admin_area_1,\n\t            city: shipping.address.admin_area_2,\n\t            zip: shipping.address.postal_code,\n\t            country: shipping.address.country_code\n\t          }\n\t        }));\n\t      }).then(onSuccess).catch(onError)\n\t    },\n\t    onError\n\t  ).render(elementId || \"#paypal-button\");\n\t}\n\tasync function braintreePayPalButton(request, cart, payMethods, params) {\n\t  const authorization = await vaultRequest(\"post\", \"/authorization\", {\n\t    gateway: \"braintree\"\n\t  });\n\t  if (authorization.error) {\n\t    throw new Error(authorization.error);\n\t  }\n\t  const braintree = window.braintree;\n\t  const paypal = window.paypal;\n\t  braintree.client.create({\n\t    authorization\n\t  }).then(\n\t    (client) => braintree.paypalCheckout.create({\n\t      client\n\t    })\n\t  ).then((paypalCheckoutInstance) => {\n\t    return paypal.Buttons({\n\t      style: params.paypal.style || {},\n\t      createBillingAgreement: () => paypalCheckoutInstance.createPayment({\n\t        flow: \"vault\",\n\t        currency: cart.currency,\n\t        amount: cart.grand_total\n\t      }),\n\t      onApprove: (data, actions) => paypalCheckoutInstance.tokenizePayment(data).then(\n\t        ({ nonce }) => methods$8(request, options$1).update({\n\t          billing: { paypal: { nonce } }\n\t        })\n\t      ).then(\n\t        () => isFunction(params.paypal.onSuccess) && params.paypal.onSuccess(data, actions)\n\t      ).catch(\n\t        isFunction(params.paypal.onError) ? params.paypal.onError : (err) => console.error(\"PayPal error\", err)\n\t      ),\n\t      onCancel: isFunction(params.paypal.onCancel) ? () => params.paypal.onCancel() : () => console.log(\"PayPal payment cancelled\"),\n\t      onError: isFunction(params.paypal.onError) ? (err) => params.paypal.onError(err) : (err) => console.error(\"PayPal error\", err)\n\t    }).render(params.paypal.elementId || \"#paypal-button\");\n\t  }).catch(\n\t    isFunction(params.paypal.onError) ? params.paypal.onError : (err) => console.error(\"PayPal error\", err)\n\t  );\n\t}\n\tasync function paymentTokenize(request, params, payMethods, cart) {\n\t  const { capture_total, auth_total } = cart;\n\t  const onError = (error) => {\n\t    const errorHandler = get(params, \"card.onError\") || get(params, \"ideal.onError\") || get(params, \"klarna.onError\") || get(params, \"bancontact.onError\") || get(params, \"paysafecard.onError\");\n\t    if (isFunction(errorHandler)) {\n\t      return errorHandler(error);\n\t    }\n\t    throw new Error(error.message);\n\t  };\n\t  const onSuccess = (result) => {\n\t    const successHandler = get(params, \"card.onSuccess\") || get(params, \"ideal.onSuccess\");\n\t    if (isFunction(successHandler)) {\n\t      return successHandler(result);\n\t    }\n\t  };\n\t  if (!params) {\n\t    return onError({ message: \"Tokenization parameters not passed\" });\n\t  }\n\t  if (params.card && payMethods.card) {\n\t    if (payMethods.card.gateway === \"stripe\" && CARD_ELEMENTS.stripe && API.stripe) {\n\t      const stripe = API.stripe;\n\t      const paymentMethod = await createPaymentMethod(\n\t        stripe,\n\t        CARD_ELEMENTS.stripe,\n\t        methods$2(request).authorizeGateway,\n\t        cart\n\t      ).catch(onError);\n\t      if (!paymentMethod) {\n\t        return;\n\t      } else if (paymentMethod.error) {\n\t        return onError(paymentMethod.error);\n\t      } else if (capture_total < 1) {\n\t        return methods$8(request, options$1).update({\n\t          billing: {\n\t            method: \"card\",\n\t            card: paymentMethod\n\t          }\n\t        }).then(onSuccess).catch(onError);\n\t      }\n\t      const currency = toLower(get(cart, \"currency\", \"usd\"));\n\t      const amount = stripeAmountByCurrency(\n\t        currency,\n\t        capture_total + auth_total\n\t      );\n\t      const stripeCustomer = get(cart, \"account.stripe_customer\");\n\t      const intent = toSnake(\n\t        await methods$2(request).createIntent({\n\t          gateway: \"stripe\",\n\t          intent: __spreadValues$1({\n\t            payment_method: paymentMethod.token,\n\t            amount,\n\t            currency,\n\t            capture_method: \"manual\",\n\t            off_session: true,\n\t            confirm: true\n\t          }, stripeCustomer ? { customer: stripeCustomer } : {})\n\t        }).catch(onError)\n\t      );\n\t      if (intent && intent.status === \"requires_confirmation\") {\n\t        const { paymentIntent, error } = await stripe.confirmCardPayment(\n\t          intent.client_secret\n\t        );\n\t        return error ? onError(error) : await methods$8(request, options$1).update({\n\t          billing: {\n\t            method: \"card\",\n\t            card: paymentMethod,\n\t            intent: {\n\t              stripe: __spreadValues$1({\n\t                id: paymentIntent.id\n\t              }, !!auth_total && {\n\t                auth_amount: auth_total\n\t              })\n\t            }\n\t          }\n\t        }).then(onSuccess).catch(onError);\n\t      }\n\t    } else if (payMethods.card.gateway === \"quickpay\") {\n\t      const intent = await createQuickpayPayment(\n\t        cart,\n\t        methods$2(request).createIntent\n\t      ).catch(onError);\n\t      if (!intent) {\n\t        return;\n\t      } else if (intent.error) {\n\t        return onError(intent.error);\n\t      }\n\t      await methods$8(request, options$1).update({\n\t        billing: {\n\t          method: \"card\",\n\t          intent: {\n\t            quickpay: {\n\t              id: intent\n\t            }\n\t          }\n\t        }\n\t      });\n\t      createQuickpayCard(methods$2(request).authorizeGateway).catch(onError);\n\t    }\n\t  } else if (params.ideal && payMethods.ideal) {\n\t    if (payMethods.card && payMethods.card.gateway === \"stripe\" && CARD_ELEMENTS.stripe && API.stripe) {\n\t      const { error, paymentMethod } = await createIDealPaymentMethod(\n\t        API.stripe,\n\t        CARD_ELEMENTS.stripe,\n\t        cart\n\t      );\n\t      if (error) {\n\t        return onError(error);\n\t      }\n\t      const currency = toLower(get(cart, \"currency\", \"eur\"));\n\t      const amount = stripeAmountByCurrency(currency, capture_total);\n\t      const intent = toSnake(\n\t        await methods$2(request).createIntent({\n\t          gateway: \"stripe\",\n\t          intent: {\n\t            payment_method: paymentMethod.id,\n\t            amount,\n\t            currency,\n\t            payment_method_types: \"ideal\",\n\t            confirmation_method: \"manual\",\n\t            confirm: true,\n\t            return_url: window.location.href\n\t          }\n\t        }).catch(onError)\n\t      );\n\t      if (intent) {\n\t        await methods$8(request, options$1).update({\n\t          billing: {\n\t            method: \"ideal\",\n\t            ideal: {\n\t              token: paymentMethod.id\n\t            },\n\t            intent: { stripe: { id: intent.id } }\n\t          }\n\t        }).catch(onError);\n\t        return (intent.status === \"requires_action\" || intent.status === \"requires_source_action\") && await API.stripe.handleCardAction(intent.client_secret);\n\t      }\n\t    }\n\t  } else if (params.klarna && payMethods.klarna) {\n\t    if (payMethods.klarna.gateway === \"klarna\") {\n\t      const session = await createKlarnaSession(\n\t        cart,\n\t        methods$2(request).createIntent\n\t      ).catch(onError);\n\t      return session && window.location.replace(session.redirect_url);\n\t    } else if (payMethods.card && payMethods.card.gateway === \"stripe\") {\n\t      if (!window.Stripe) {\n\t        await loadScript(\"stripe-js\", \"https://js.stripe.com/v3/\");\n\t      }\n\t      const { publishable_key } = payMethods.card;\n\t      const stripe = window.Stripe(publishable_key);\n\t      const settings = toSnake(await methods$3(request, options$1).get());\n\t      const { error, source } = await createKlarnaSource(stripe, __spreadProps(__spreadValues$1({}, cart), {\n\t        settings: settings.store\n\t      }));\n\t      return error ? onError(error) : methods$8(request, options$1).update({\n\t        billing: {\n\t          method: \"klarna\"\n\t        }\n\t      }).then(() => window.location.replace(source.redirect.url)).catch(onError);\n\t    }\n\t  } else if (params.bancontact && payMethods.bancontact) {\n\t    if (payMethods.card && payMethods.card.gateway === \"stripe\") {\n\t      if (!window.Stripe) {\n\t        await loadScript(\"stripe-js\", \"https://js.stripe.com/v3/\");\n\t      }\n\t      const { publishable_key } = payMethods.card;\n\t      const stripe = window.Stripe(publishable_key);\n\t      const { error, source } = await createBancontactSource(stripe, cart);\n\t      return error ? onError(error) : methods$8(request, options$1).update({\n\t        billing: {\n\t          method: \"bancontact\"\n\t        }\n\t      }).then(() => window.location.replace(source.redirect.url)).catch(onError);\n\t    }\n\t  } else if (params.paysafecard && payMethods.paysafecard) {\n\t    const intent = await createPaysafecardPayment(\n\t      cart,\n\t      methods$2(request).createIntent\n\t    ).catch(onError);\n\t    if (!intent) {\n\t      return;\n\t    }\n\t    await methods$8(request, options$1).update({\n\t      billing: {\n\t        method: \"paysafecard\",\n\t        intent: {\n\t          paysafecard: {\n\t            id: intent.id\n\t          }\n\t        }\n\t      }\n\t    });\n\t    return window.location.replace(intent.redirect.auth_url);\n\t  }\n\t}\n\tasync function handleRedirect(request, params, cart) {\n\t  const onError = (error) => {\n\t    const errorHandler = get(params, \"card.onError\") || get(params, \"paysafecard.onError\") || get(params, \"klarna.onError\");\n\t    if (isFunction(errorHandler)) {\n\t      return errorHandler(error);\n\t    }\n\t    throw new Error(error.message);\n\t  };\n\t  const onSuccess = (result2) => {\n\t    const successHandler = get(params, \"card.onSuccess\") || get(params, \"paysafecard.onSuccess\") || get(params, \"klarna.onSuccess\");\n\t    if (isFunction(successHandler)) {\n\t      return successHandler(result2);\n\t    }\n\t  };\n\t  const queryParams = getLocationParams(window.location);\n\t  removeUrlParams();\n\t  const { gateway } = queryParams;\n\t  let result;\n\t  if (gateway === \"quickpay\") {\n\t    result = await handleQuickpayRedirectAction(\n\t      request,\n\t      cart,\n\t      params,\n\t      queryParams\n\t    );\n\t  } else if (gateway === \"paysafecard\") {\n\t    result = await handlePaysafecardRedirectAction(\n\t      request,\n\t      cart);\n\t  } else if (gateway === \"klarna_direct\") {\n\t    result = await handleDirectKlarnaRedirectAction(\n\t      request,\n\t      cart,\n\t      params,\n\t      queryParams\n\t    );\n\t  }\n\t  if (!result) {\n\t    return;\n\t  } else if (result.error) {\n\t    return onError(result.error);\n\t  } else {\n\t    return onSuccess(result);\n\t  }\n\t}\n\tasync function handleQuickpayRedirectAction(request, cart, params, queryParams) {\n\t  const { redirect_status: status, card_id: id } = queryParams;\n\t  switch (status) {\n\t    case \"succeeded\":\n\t      const card = await getQuickpayCardDetais(\n\t        id,\n\t        methods$2(request).authorizeGateway\n\t      );\n\t      if (!card) {\n\t        return;\n\t      } else if (card.error) {\n\t        return card;\n\t      } else {\n\t        await methods$8(request, options$1).update({\n\t          billing: {\n\t            method: \"card\",\n\t            card\n\t          }\n\t        });\n\t        return { success: true };\n\t      }\n\t    case \"canceled\":\n\t      return {\n\t        error: {\n\t          message: \"We are unable to authenticate your payment method. Please choose a different payment method and try again.\"\n\t        }\n\t      };\n\t    default:\n\t      return { error: { message: `Unknown redirect status: ${status}.` } };\n\t  }\n\t}\n\tasync function handlePaysafecardRedirectAction(request, cart) {\n\t  const paymentId = get(cart, \"billing.intent.paysafecard.id\");\n\t  if (!paymentId) {\n\t    return {\n\t      error: {\n\t        message: \"Paysafecard payment ID not defined.\"\n\t      }\n\t    };\n\t  }\n\t  const intent = await methods$2(request).updateIntent({\n\t    gateway: \"paysafecard\",\n\t    intent: { payment_id: paymentId }\n\t  });\n\t  if (!intent) {\n\t    return;\n\t  }\n\t  switch (intent.status) {\n\t    case \"AUTHORIZED\":\n\t      return { success: true };\n\t    case \"CANCELED_CUSTOMER\":\n\t      return {\n\t        error: {\n\t          message: \"We are unable to authenticate your payment method. Please choose a different payment method and try again.\"\n\t        }\n\t      };\n\t    default:\n\t      return {\n\t        error: { message: `Unknown redirect status: ${intent.status}.` }\n\t      };\n\t  }\n\t}\n\tasync function handleDirectKlarnaRedirectAction(request, cart, params, queryParams) {\n\t  const { authorization_token } = queryParams;\n\t  if (!authorization_token) {\n\t    return {\n\t      error: {\n\t        message: \"We are unable to authenticate your payment method. Please choose a different payment method and try again.\"\n\t      }\n\t    };\n\t  }\n\t  await methods$8(request, options$1).update({\n\t    billing: {\n\t      method: \"klarna\",\n\t      klarna: {\n\t        token: authorization_token\n\t      }\n\t    }\n\t  });\n\t  return { success: true };\n\t}\n\tasync function authenticate(request, payment, payMethods) {\n\t  const { method, gateway } = payment;\n\t  if (method === \"card\") {\n\t    const cardMethod = payMethods.card;\n\t    if (!cardMethod) {\n\t      console.error(\n\t        `Authenticate error: credit card payments are disabled. See Payment settings in the Swell dashboard for details.`\n\t      );\n\t    } else if (gateway === \"stripe\" && cardMethod.gateway === \"stripe\") {\n\t      if (!window.Stripe) {\n\t        await loadScript(\"stripe-js\", \"https://js.stripe.com/v3/\");\n\t      }\n\t      return authenticateStripeCard(request, payment, payMethods);\n\t    }\n\t  }\n\t}\n\tasync function authenticateStripeCard(request, payment, payMethods) {\n\t  const { transaction_id: id, card: { token } = {} } = payment;\n\t  const { publishable_key } = payMethods.card;\n\t  const intent = await methods$2(request, options$1).updateIntent({\n\t    gateway: \"stripe\",\n\t    intent: { id, payment_method: token }\n\t  }).catch((error) => ({\n\t    error\n\t  }));\n\t  if (intent.error) {\n\t    return intent;\n\t  }\n\t  const stripe = window.Stripe(publishable_key);\n\t  const actionResult = await stripe.confirmCardPayment(intent.client_secret);\n\t  return actionResult.error ? {\n\t    error: {\n\t      message: actionResult.error.message,\n\t      code: actionResult.error.code\n\t    }\n\t  } : { status: actionResult.status };\n\t}\n\n\tfunction methods$1(request, opt) {\n\t  return {\n\t    code: null,\n\t    state: null,\n\t    list() {\n\t      return opt.api.settings.get(\"store.locales\", []);\n\t    },\n\t    async select(locale) {\n\t      this.set(locale);\n\t      setCookie(\"swell-locale\", locale);\n\t      opt.api.settings.locale = locale;\n\t      return await request(\"put\", \"/session\", { locale });\n\t    },\n\t    selected() {\n\t      if (this.code) {\n\t        return this.code;\n\t      }\n\t      const storeLocale = opt.api.settings.getStoreLocale();\n\t      const cookieLocale = getCookie(\"swell-locale\");\n\t      opt.api.settings.locale = cookieLocale || storeLocale;\n\t      return cookieLocale || storeLocale;\n\t    },\n\t    get() {\n\t      if (!this.code) {\n\t        this.code = this.selected();\n\t      }\n\t      if (!this.state) {\n\t        this.state = this.set(this.code);\n\t      }\n\t      return this.state;\n\t    },\n\t    set(code) {\n\t      this.code = code;\n\t      this.state = find(this.list(), { code }) || {};\n\t      return this.state;\n\t    }\n\t  };\n\t}\n\n\tconst FORMATTERS = {};\n\tfunction methods(request, opt) {\n\t  return {\n\t    code: null,\n\t    state: null,\n\t    locale: null,\n\t    list() {\n\t      return opt.api.settings.get(\"store.currencies\", []);\n\t    },\n\t    async select(currency) {\n\t      this.set(currency);\n\t      return request(\"put\", \"/session\", { currency });\n\t    },\n\t    selected() {\n\t      if (!this.code) {\n\t        this.set(\n\t          getCookie(\"swell-currency\") || opt.api.settings.get(\"store.currency\")\n\t        );\n\t      }\n\t      return this.code;\n\t    },\n\t    get() {\n\t      if (!this.code) {\n\t        this.code = this.selected();\n\t      }\n\t      if (!this.state) {\n\t        this.state = this.set(this.code);\n\t      }\n\t      return this.state;\n\t    },\n\t    set(code = \"USD\") {\n\t      this.code = code;\n\t      this.state = find(this.list(), { code }) || { code };\n\t      this.locale = String(\n\t        opt.api.settings.get(\n\t          \"store.locale\",\n\t          typeof navigator === \"object\" ? navigator.language : \"en-US\"\n\t        )\n\t      );\n\t      setCookie(\"swell-currency\", code);\n\t      return this.state;\n\t    },\n\t    format(amount, params = {}) {\n\t      let state = this.get();\n\t      if (params.code && params.code !== state.code) {\n\t        const list = this.list();\n\t        state = find(list, { code: params.code }) || { code: params.code };\n\t      }\n\t      const { code = \"USD\", type, decimals, rate } = state;\n\t      const formatCode = params.code || code;\n\t      const formatRate = params.rate || rate;\n\t      const formatLocale = params.locale || this.locale;\n\t      const formatDecimals = typeof params.decimals === \"number\" ? params.decimals : decimals;\n\t      const { convert = true } = params;\n\t      let formatAmount = amount;\n\t      if (convert && (type === \"display\" || params.rate) && typeof formatAmount === \"number\" && typeof formatRate === \"number\") {\n\t        formatAmount = this.applyRounding(amount * formatRate, state);\n\t      }\n\t      const formatter = this.formatter({\n\t        code: formatCode,\n\t        locale: formatLocale,\n\t        decimals: formatDecimals\n\t      });\n\t      try {\n\t        if (typeof formatAmount === \"number\") {\n\t          return formatter.format(formatAmount);\n\t        } else {\n\t          const symbol = get(formatter.formatToParts(0), \"0.value\", \"$\");\n\t          return symbol !== formatCode ? symbol : \"\";\n\t        }\n\t      } catch (err) {\n\t        console.warn(err);\n\t      }\n\t      return String(amount);\n\t    },\n\t    formatter({ code, locale, decimals }) {\n\t      locale = String(locale || \"\").replace(\"_\", \"-\");\n\t      const key = [code, locale, decimals].join(\"|\");\n\t      if (FORMATTERS[key]) {\n\t        return FORMATTERS[key];\n\t      }\n\t      const formatLocales = [];\n\t      if (locale) {\n\t        formatLocales.push(locale);\n\t      }\n\t      formatLocales.push(\"en-US\");\n\t      const formatDecimals = typeof decimals === \"number\" ? decimals : void 0;\n\t      const props = {\n\t        style: \"currency\",\n\t        currency: code,\n\t        currencyDisplay: \"symbol\",\n\t        minimumFractionDigits: formatDecimals,\n\t        maximumFractionDigits: formatDecimals\n\t      };\n\t      try {\n\t        try {\n\t          FORMATTERS[key] = new Intl.NumberFormat(formatLocales, props);\n\t        } catch (err) {\n\t          if (err.message.indexOf(\"Invalid language tag\") >= 0) {\n\t            FORMATTERS[key] = new Intl.NumberFormat(\"en-US\", props);\n\t          }\n\t        }\n\t      } catch (err) {\n\t        console.warn(err);\n\t      }\n\t      return FORMATTERS[key];\n\t    },\n\t    applyRounding(value, config) {\n\t      if (!config || !config.round) {\n\t        return value;\n\t      }\n\t      const scale = config.decimals;\n\t      const fraction = config.round_interval === \"fraction\" ? config.round_fraction || 0 : 0;\n\t      let roundValue = ~~value;\n\t      let decimalValue = this.round(value, scale);\n\t      if (decimalValue === fraction) {\n\t        return roundValue + decimalValue;\n\t      }\n\t      const diff = this.round(decimalValue - fraction, 1);\n\t      const direction = config.round === \"nearest\" ? diff > 0 ? diff >= 0.5 ? \"up\" : \"down\" : diff <= -0.5 ? \"down\" : \"up\" : config.round;\n\t      switch (direction) {\n\t        case \"down\":\n\t          roundValue = roundValue + fraction - (decimalValue > fraction ? 0 : 1);\n\t          break;\n\t        case \"up\":\n\t        default:\n\t          roundValue = roundValue + fraction + (decimalValue > fraction ? 1 : 0);\n\t          break;\n\t      }\n\t      return this.round(roundValue, scale);\n\t    },\n\t    round\n\t  };\n\t}\n\n\tvar __defProp = Object.defineProperty;\n\tvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\n\tvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\tvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\tvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n\tvar __spreadValues = (a, b) => {\n\t  for (var prop in b || (b = {}))\n\t    if (__hasOwnProp.call(b, prop))\n\t      __defNormalProp(a, prop, b[prop]);\n\t  if (__getOwnPropSymbols)\n\t    for (var prop of __getOwnPropSymbols(b)) {\n\t      if (__propIsEnum.call(b, prop))\n\t        __defNormalProp(a, prop, b[prop]);\n\t    }\n\t  return a;\n\t};\n\tconst options = {\n\t  store: null,\n\t  key: null,\n\t  url: null,\n\t  useCamelCase: null,\n\t  previewContent: null\n\t};\n\tconst api = {\n\t  version: \"3.18.2\",\n\t  options,\n\t  request,\n\t  init(store, key, opt = {}) {\n\t    options.key = key;\n\t    options.store = store;\n\t    options.url = opt.url ? trimEnd(opt.url) : `https://${store}.swell.store`;\n\t    options.vaultUrl = opt.vaultUrl ? trimEnd(opt.vaultUrl) : `https://vault.schema.io`;\n\t    options.timeout = opt.timeout && parseInt(opt.timeout, 10) || 2e4;\n\t    options.useCamelCase = opt.useCamelCase || false;\n\t    options.previewContent = opt.previewContent || false;\n\t    options.session = opt.session;\n\t    options.locale = opt.locale;\n\t    options.currency = opt.currency;\n\t    options.api = api;\n\t    setOptions(options);\n\t  },\n\t  auth(...args) {\n\t    return this.init(...args);\n\t  },\n\t  get(url, query) {\n\t    return request(\"get\", url, query);\n\t  },\n\t  put(url, data) {\n\t    return request(\"put\", url, data);\n\t  },\n\t  post(url, data) {\n\t    return request(\"post\", url, data);\n\t  },\n\t  delete(url, data) {\n\t    return request(\"delete\", url, data);\n\t  },\n\t  cache: cacheApi,\n\t  card: cardApi,\n\t  cart: methods$8(request, options),\n\t  account: methods$7(request),\n\t  products: methods$9(request, options),\n\t  categories: methods$6(request),\n\t  attributes: methods$a(request),\n\t  subscriptions: methods$5(request),\n\t  content: methods$4(request, options),\n\t  settings: methods$3(request, options),\n\t  payment: methods$2(request, options),\n\t  locale: methods$1(request, options),\n\t  currency: methods(request, options),\n\t  utils\n\t};\n\tasync function request(method, url, id = void 0, data = void 0, opt = void 0) {\n\t  const allOptions = __spreadValues(__spreadValues({}, options), opt);\n\t  const session = allOptions.session || getCookie(\"swell-session\");\n\t  const locale2 = allOptions.locale || getCookie(\"swell-locale\");\n\t  const currency2 = allOptions.currency || getCookie(\"swell-currency\");\n\t  const baseUrl = `${allOptions.url}${allOptions.base || \"\"}/api`;\n\t  const reqMethod = String(method).toLowerCase();\n\t  let reqUrl = url;\n\t  let reqData = id;\n\t  if (data !== void 0 || typeof id === \"string\") {\n\t    reqUrl = [trimEnd(url), trimStart(id)].join(\"/\");\n\t    reqData = data;\n\t  }\n\t  reqUrl = allOptions.fullUrl || `${baseUrl}/${trimBoth(reqUrl)}`;\n\t  reqData = allOptions.useCamelCase ? toSnake(reqData) : reqData;\n\t  let reqBody;\n\t  if (reqMethod === \"get\") {\n\t    let exQuery;\n\t    [reqUrl, exQuery] = reqUrl.split(\"?\");\n\t    const fullQuery = [exQuery, stringifyQuery(reqData)].join(\"&\").replace(/^&/, \"\");\n\t    reqUrl = `${reqUrl}${fullQuery ? `?${fullQuery}` : \"\"}`;\n\t  } else {\n\t    reqBody = JSON.stringify(reqData);\n\t  }\n\t  const reqHeaders = {\n\t    Accept: \"application/json\",\n\t    \"Content-Type\": \"application/json\",\n\t    Authorization: `Basic ${base64Encode(String(allOptions.key))}`\n\t  };\n\t  if (session) {\n\t    reqHeaders[\"X-Session\"] = session;\n\t  }\n\t  if (locale2) {\n\t    reqHeaders[\"X-Locale\"] = locale2;\n\t  }\n\t  if (currency2) {\n\t    reqHeaders[\"X-Currency\"] = currency2;\n\t  }\n\t  const response = await fetch(reqUrl, {\n\t    method: reqMethod,\n\t    headers: reqHeaders,\n\t    body: reqBody,\n\t    credentials: \"include\",\n\t    mode: \"cors\"\n\t  });\n\t  const responseSession = response.headers.get(\"X-Session\");\n\t  if (typeof responseSession === \"string\" && session !== responseSession) {\n\t    setCookie(\"swell-session\", responseSession);\n\t  }\n\t  const result = await response.json();\n\t  if (result && result.error) {\n\t    const err = new Error(result.error.message);\n\t    err.status = response.status;\n\t    err.code = result.error.code;\n\t    err.param = result.error.param;\n\t    throw err;\n\t  } else if (!response.ok) {\n\t    const err = new Error(\n\t      \"A connection error occurred while making the request\"\n\t    );\n\t    err.code = \"connection_error\";\n\t    throw err;\n\t  }\n\t  return options.useCamelCase ? toCamel(result) : result;\n\t}\n\n\treturn api;\n\n}));\n//# sourceMappingURL=swell.umd.min.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/swell-js/dist/swell.umd.min.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=D%3A%5Cdev_test%5Csrc%5Cpages%5C%5Bslug%5D.tsx&page=%2F%5Bslug%5D!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);